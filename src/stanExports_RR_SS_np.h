// Generated by rstantools.  Do not edit by hand.

/*
    salmonIPM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    salmonIPM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with salmonIPM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_RR_SS_np_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_RR_SS_np");
    reader.add_event(139, 137, "end", "model_RR_SS_np");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
SR(const int& SR_fun,
       const T1__& alpha,
       const T2__& Rmax,
       const T3__& S,
       const T4__& A, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ R(DUMMY_VAR__);
        (void) R;  // dummy to suppress unused var warning
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 6;
        if (as_bool(logical_eq(SR_fun, 1))) {
            current_statement_begin__ = 7;
            stan::math::assign(R, ((alpha * S) / A));
        } else if (as_bool(logical_eq(SR_fun, 2))) {
            current_statement_begin__ = 9;
            stan::math::assign(R, ((alpha * S) / (A + ((alpha * S) / Rmax))));
        } else if (as_bool(logical_eq(SR_fun, 3))) {
            current_statement_begin__ = 11;
            stan::math::assign(R, ((alpha * (S / A)) * stan::math::exp(((-(alpha) * S) / ((A * stan::math::e()) * Rmax)))));
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct SR_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
    operator()(const int& SR_fun,
       const T1__& alpha,
       const T2__& Rmax,
       const T3__& S,
       const T4__& A, std::ostream* pstream__) const {
        return SR(SR_fun, alpha, Rmax, S, A, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pexp_lpdf(const T0__& y,
              const T1__& mu,
              const T2__& sigma,
              const T3__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(-(pow((stan::math::fabs((y - mu)) / sigma), shape)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pexp_lpdf(const T0__& y,
              const T1__& mu,
              const T2__& sigma,
              const T3__& shape, std::ostream* pstream__) {
    return pexp_lpdf<false>(y,mu,sigma,shape, pstream__);
}
struct pexp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
              const T1__& mu,
              const T2__& sigma,
              const T3__& shape, std::ostream* pstream__) const {
        return pexp_lpdf(y, mu, sigma, shape, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_RR_SS_np : public prob_grad {
private:
        int SR_fun;
        int N;
        std::vector<int> pop;
        std::vector<int> year;
        int N_fit;
        std::vector<int> which_fit;
        vector_d S;
        vector_d R;
        vector_d A;
        std::vector<int> S_NA;
        std::vector<int> R_NA;
        int N_age;
        int max_age;
        matrix_d p;
        int N_pop;
        int N_year;
        std::vector<int> ages;
public:
    model_RR_SS_np(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_RR_SS_np(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_RR_SS_np_namespace::model_RR_SS_np";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "SR_fun", "int", context__.to_vec());
            SR_fun = int(0);
            vals_i__ = context__.vals_i("SR_fun");
            pos__ = 0;
            SR_fun = vals_i__[pos__++];
            check_greater_or_equal(function__, "SR_fun", SR_fun, 1);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 25;
            validate_non_negative_index("pop", "N", N);
            context__.validate_dims("data initialization", "pop", "int", context__.to_vec(N));
            pop = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("pop");
            pos__ = 0;
            size_t pop_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < pop_k_0_max__; ++k_0__) {
                pop[k_0__] = vals_i__[pos__++];
            }
            size_t pop_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pop_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pop[i_0__]", pop[i_0__], 1);
                check_less_or_equal(function__, "pop[i_0__]", pop[i_0__], N);
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("year", "N", N);
            context__.validate_dims("data initialization", "year", "int", context__.to_vec(N));
            year = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("year");
            pos__ = 0;
            size_t year_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < year_k_0_max__; ++k_0__) {
                year[k_0__] = vals_i__[pos__++];
            }
            size_t year_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < year_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "year[i_0__]", year[i_0__], 1);
                check_less_or_equal(function__, "year[i_0__]", year[i_0__], N);
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "N_fit", "int", context__.to_vec());
            N_fit = int(0);
            vals_i__ = context__.vals_i("N_fit");
            pos__ = 0;
            N_fit = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_fit", N_fit, 1);
            check_less_or_equal(function__, "N_fit", N_fit, N);
            current_statement_begin__ = 28;
            validate_non_negative_index("which_fit", "N_fit", N_fit);
            context__.validate_dims("data initialization", "which_fit", "int", context__.to_vec(N_fit));
            which_fit = std::vector<int>(N_fit, int(0));
            vals_i__ = context__.vals_i("which_fit");
            pos__ = 0;
            size_t which_fit_k_0_max__ = N_fit;
            for (size_t k_0__ = 0; k_0__ < which_fit_k_0_max__; ++k_0__) {
                which_fit[k_0__] = vals_i__[pos__++];
            }
            size_t which_fit_i_0_max__ = N_fit;
            for (size_t i_0__ = 0; i_0__ < which_fit_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_fit[i_0__]", which_fit[i_0__], 1);
                check_less_or_equal(function__, "which_fit[i_0__]", which_fit[i_0__], N);
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("S", "N", N);
            context__.validate_dims("data initialization", "S", "vector_d", context__.to_vec(N));
            S = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("S");
            pos__ = 0;
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                S(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 30;
            validate_non_negative_index("R", "N", N);
            context__.validate_dims("data initialization", "R", "vector_d", context__.to_vec(N));
            R = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("R");
            pos__ = 0;
            size_t R_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                R(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "R", R, 0);
            current_statement_begin__ = 31;
            validate_non_negative_index("A", "N", N);
            context__.validate_dims("data initialization", "A", "vector_d", context__.to_vec(N));
            A = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("S_NA", "N", N);
            context__.validate_dims("data initialization", "S_NA", "int", context__.to_vec(N));
            S_NA = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("S_NA");
            pos__ = 0;
            size_t S_NA_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < S_NA_k_0_max__; ++k_0__) {
                S_NA[k_0__] = vals_i__[pos__++];
            }
            size_t S_NA_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < S_NA_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "S_NA[i_0__]", S_NA[i_0__], 0);
                check_less_or_equal(function__, "S_NA[i_0__]", S_NA[i_0__], 1);
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("R_NA", "N", N);
            context__.validate_dims("data initialization", "R_NA", "int", context__.to_vec(N));
            R_NA = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("R_NA");
            pos__ = 0;
            size_t R_NA_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < R_NA_k_0_max__; ++k_0__) {
                R_NA[k_0__] = vals_i__[pos__++];
            }
            size_t R_NA_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < R_NA_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "R_NA[i_0__]", R_NA[i_0__], 0);
                check_less_or_equal(function__, "R_NA[i_0__]", R_NA[i_0__], 1);
            }
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "N_age", "int", context__.to_vec());
            N_age = int(0);
            vals_i__ = context__.vals_i("N_age");
            pos__ = 0;
            N_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_age", N_age, 2);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "max_age", "int", context__.to_vec());
            max_age = int(0);
            vals_i__ = context__.vals_i("max_age");
            pos__ = 0;
            max_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "max_age", max_age, 2);
            current_statement_begin__ = 36;
            validate_non_negative_index("p", "max(pop)", max(pop));
            validate_non_negative_index("p", "N_age", N_age);
            context__.validate_dims("data initialization", "p", "matrix_d", context__.to_vec(max(pop),N_age));
            p = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(max(pop), N_age);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            size_t p_j_2_max__ = N_age;
            size_t p_j_1_max__ = max(pop);
            for (size_t j_2__ = 0; j_2__ < p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                    p(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            // initialize transformed data variables
            current_statement_begin__ = 40;
            N_pop = int(0);
            stan::math::fill(N_pop, std::numeric_limits<int>::min());
            current_statement_begin__ = 41;
            N_year = int(0);
            stan::math::fill(N_year, std::numeric_limits<int>::min());
            current_statement_begin__ = 42;
            validate_non_negative_index("ages", "N_age", N_age);
            ages = std::vector<int>(N_age, int(0));
            stan::math::fill(ages, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 44;
            stan::math::assign(N_pop, max(pop));
            current_statement_begin__ = 45;
            stan::math::assign(N_year, max(year));
            current_statement_begin__ = 46;
            for (int a = 1; a <= N_age; ++a) {
                current_statement_begin__ = 47;
                stan::model::assign(ages, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            ((max_age - N_age) + a), 
                            "assigning variable ages");
            }
            // validate transformed data
            current_statement_begin__ = 40;
            check_greater_or_equal(function__, "N_pop", N_pop, 1);
            check_less_or_equal(function__, "N_pop", N_pop, N);
            current_statement_begin__ = 41;
            check_greater_or_equal(function__, "N_year", N_year, 1);
            check_less_or_equal(function__, "N_year", N_year, N);
            current_statement_begin__ = 42;
            size_t ages_i_0_max__ = N_age;
            for (size_t i_0__ = 0; i_0__ < ages_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ages[i_0__]", ages[i_0__], 2);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 51;
            validate_non_negative_index("alpha", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 52;
            validate_non_negative_index("Rmax", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 53;
            validate_non_negative_index("rho", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 54;
            validate_non_negative_index("sigma", "N_pop", N_pop);
            num_params_r__ += N_pop;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_RR_SS_np() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 51;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(N_pop);
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("Rmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Rmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Rmax");
        pos__ = 0U;
        validate_non_negative_index("Rmax", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "Rmax", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Rmax(N_pop);
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            Rmax(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, Rmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Rmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "rho", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho(N_pop);
        size_t rho_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            rho(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(-(1), 1, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(N_pop);
        size_t sigma_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                alpha = in__.vector_lb_constrain(0, N_pop);
            current_statement_begin__ = 52;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rmax;
            (void) Rmax;  // dummy to suppress unused var warning
            if (jacobian__)
                Rmax = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                Rmax = in__.vector_lb_constrain(0, N_pop);
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(-(1), 1, N_pop, lp__);
            else
                rho = in__.vector_lub_constrain(-(1), 1, N_pop);
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                sigma = in__.vector_lb_constrain(0, N_pop);
            // transformed parameters
            current_statement_begin__ = 58;
            validate_non_negative_index("R_hat", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R_hat(N);
            stan::math::initialize(R_hat, DUMMY_VAR__);
            stan::math::fill(R_hat, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("R_ar1", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R_ar1(N);
            stan::math::initialize(R_ar1, DUMMY_VAR__);
            stan::math::fill(R_ar1, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("sigma_ar1", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_ar1(N);
            stan::math::initialize(sigma_ar1, DUMMY_VAR__);
            stan::math::fill(sigma_ar1, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 63;
            stan::math::assign(R_hat, rep_vector(0, N));
            current_statement_begin__ = 64;
            stan::math::assign(R_ar1, rep_vector(0, N));
            current_statement_begin__ = 65;
            stan::math::assign(sigma_ar1, rep_vector(0, N));
            current_statement_begin__ = 67;
            for (int i = 1; i <= N_fit; ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(R_hat, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                            (get_base1(A, get_base1(which_fit, i, "which_fit", 1), "A", 1) * SR(SR_fun, get_base1(alpha, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "alpha", 1), get_base1(Rmax, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "Rmax", 1), get_base1(S, get_base1(which_fit, i, "which_fit", 1), "S", 1), get_base1(A, get_base1(which_fit, i, "which_fit", 1), "A", 1), pstream__)), 
                            "assigning variable R_hat");
                current_statement_begin__ = 71;
                if (as_bool((primitive_value(logical_eq(i, 1)) || primitive_value(logical_neq(get_base1(pop, get_base1(which_fit, (i - 1), "which_fit", 1), "pop", 1), get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1)))))) {
                    current_statement_begin__ = 73;
                    stan::model::assign(R_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                get_base1(R_hat, get_base1(which_fit, i, "which_fit", 1), "R_hat", 1), 
                                "assigning variable R_ar1");
                    current_statement_begin__ = 74;
                    stan::model::assign(sigma_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                (get_base1(sigma, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "sigma", 1) / stan::math::sqrt((1 - pow(get_base1(rho, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "rho", 1), 2)))), 
                                "assigning variable sigma_ar1");
                } else {
                    {
                    current_statement_begin__ = 78;
                    local_scalar_t__ err(DUMMY_VAR__);
                    (void) err;  // dummy to suppress unused var warning
                    stan::math::initialize(err, DUMMY_VAR__);
                    stan::math::fill(err, DUMMY_VAR__);
                    current_statement_begin__ = 79;
                    int dt(0);
                    (void) dt;  // dummy to suppress unused var warning
                    stan::math::fill(dt, std::numeric_limits<int>::min());
                    current_statement_begin__ = 80;
                    local_scalar_t__ rho2j(DUMMY_VAR__);
                    (void) rho2j;  // dummy to suppress unused var warning
                    stan::math::initialize(rho2j, DUMMY_VAR__);
                    stan::math::fill(rho2j, DUMMY_VAR__);
                    current_statement_begin__ = 82;
                    stan::math::assign(err, (stan::math::log(get_base1(R, get_base1(which_fit, (i - 1), "which_fit", 1), "R", 1)) - stan::math::log(get_base1(R_hat, get_base1(which_fit, (i - 1), "which_fit", 1), "R_hat", 1))));
                    current_statement_begin__ = 83;
                    stan::math::assign(dt, (get_base1(which_fit, i, "which_fit", 1) - get_base1(which_fit, (i - 1), "which_fit", 1)));
                    current_statement_begin__ = 84;
                    stan::model::assign(R_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                (get_base1(R_hat, get_base1(which_fit, i, "which_fit", 1), "R_hat", 1) * stan::math::exp((pow(get_base1(rho, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "rho", 1), dt) * err))), 
                                "assigning variable R_ar1");
                    current_statement_begin__ = 86;
                    stan::math::assign(rho2j, 0);
                    current_statement_begin__ = 87;
                    for (int j = 0; j <= (dt - 1); ++j) {
                        current_statement_begin__ = 88;
                        stan::math::assign(rho2j, (rho2j + pow(get_base1(rho, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "rho", 1), (2 * j))));
                    }
                    current_statement_begin__ = 89;
                    stan::model::assign(sigma_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                (get_base1(sigma, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "sigma", 1) * stan::math::sqrt(rho2j)), 
                                "assigning variable sigma_ar1");
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 58;
            size_t R_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R_hat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R_hat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "R_hat", R_hat, 0);
            current_statement_begin__ = 59;
            size_t R_ar1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_ar1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R_ar1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R_ar1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R_ar1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "R_ar1", R_ar1, 0);
            current_statement_begin__ = 60;
            size_t sigma_ar1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_ar1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_ar1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_ar1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_ar1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sigma_ar1", sigma_ar1, 0);
            // model body
            current_statement_begin__ = 96;
            lp_accum__.add(lognormal_log<propto__>(alpha, 2.0, 2.0));
            current_statement_begin__ = 97;
            lp_accum__.add(lognormal_log<propto__>(Rmax, 2.0, 3.0));
            current_statement_begin__ = 98;
            for (int i = 1; i <= N_pop; ++i) {
                current_statement_begin__ = 100;
                lp_accum__.add(pexp_lpdf<propto__>(get_base1(rho, i, "rho", 1), 0, 0.85, 20, pstream__));
                current_statement_begin__ = 101;
                lp_accum__.add(pexp_lpdf<propto__>(get_base1(sigma, i, "sigma", 1), 0, 2, 10, pstream__));
            }
            current_statement_begin__ = 105;
            lp_accum__.add(lognormal_log<propto__>(stan::model::rvalue(R, stan::model::cons_list(stan::model::index_multi(which_fit), stan::model::nil_index_list()), "R"), stan::math::log(stan::model::rvalue(R_ar1, stan::model::cons_list(stan::model::index_multi(which_fit), stan::model::nil_index_list()), "R_ar1")), stan::model::rvalue(sigma_ar1, stan::model::cons_list(stan::model::index_multi(which_fit), stan::model::nil_index_list()), "sigma_ar1")));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("Rmax");
        names__.push_back("rho");
        names__.push_back("sigma");
        names__.push_back("R_hat");
        names__.push_back("R_ar1");
        names__.push_back("sigma_ar1");
        names__.push_back("S_sim");
        names__.push_back("R_sim");
        names__.push_back("err_sim");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_RR_SS_np_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(0, N_pop);
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> Rmax = in__.vector_lb_constrain(0, N_pop);
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            vars__.push_back(Rmax(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho = in__.vector_lub_constrain(-(1), 1, N_pop);
        size_t rho_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            vars__.push_back(rho(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, N_pop);
        size_t sigma_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 58;
            validate_non_negative_index("R_hat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R_hat(N);
            stan::math::initialize(R_hat, DUMMY_VAR__);
            stan::math::fill(R_hat, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("R_ar1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R_ar1(N);
            stan::math::initialize(R_ar1, DUMMY_VAR__);
            stan::math::fill(R_ar1, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("sigma_ar1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_ar1(N);
            stan::math::initialize(sigma_ar1, DUMMY_VAR__);
            stan::math::fill(sigma_ar1, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 63;
            stan::math::assign(R_hat, rep_vector(0, N));
            current_statement_begin__ = 64;
            stan::math::assign(R_ar1, rep_vector(0, N));
            current_statement_begin__ = 65;
            stan::math::assign(sigma_ar1, rep_vector(0, N));
            current_statement_begin__ = 67;
            for (int i = 1; i <= N_fit; ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(R_hat, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                            (get_base1(A, get_base1(which_fit, i, "which_fit", 1), "A", 1) * SR(SR_fun, get_base1(alpha, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "alpha", 1), get_base1(Rmax, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "Rmax", 1), get_base1(S, get_base1(which_fit, i, "which_fit", 1), "S", 1), get_base1(A, get_base1(which_fit, i, "which_fit", 1), "A", 1), pstream__)), 
                            "assigning variable R_hat");
                current_statement_begin__ = 71;
                if (as_bool((primitive_value(logical_eq(i, 1)) || primitive_value(logical_neq(get_base1(pop, get_base1(which_fit, (i - 1), "which_fit", 1), "pop", 1), get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1)))))) {
                    current_statement_begin__ = 73;
                    stan::model::assign(R_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                get_base1(R_hat, get_base1(which_fit, i, "which_fit", 1), "R_hat", 1), 
                                "assigning variable R_ar1");
                    current_statement_begin__ = 74;
                    stan::model::assign(sigma_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                (get_base1(sigma, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "sigma", 1) / stan::math::sqrt((1 - pow(get_base1(rho, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "rho", 1), 2)))), 
                                "assigning variable sigma_ar1");
                } else {
                    {
                    current_statement_begin__ = 78;
                    local_scalar_t__ err(DUMMY_VAR__);
                    (void) err;  // dummy to suppress unused var warning
                    stan::math::initialize(err, DUMMY_VAR__);
                    stan::math::fill(err, DUMMY_VAR__);
                    current_statement_begin__ = 79;
                    int dt(0);
                    (void) dt;  // dummy to suppress unused var warning
                    stan::math::fill(dt, std::numeric_limits<int>::min());
                    current_statement_begin__ = 80;
                    local_scalar_t__ rho2j(DUMMY_VAR__);
                    (void) rho2j;  // dummy to suppress unused var warning
                    stan::math::initialize(rho2j, DUMMY_VAR__);
                    stan::math::fill(rho2j, DUMMY_VAR__);
                    current_statement_begin__ = 82;
                    stan::math::assign(err, (stan::math::log(get_base1(R, get_base1(which_fit, (i - 1), "which_fit", 1), "R", 1)) - stan::math::log(get_base1(R_hat, get_base1(which_fit, (i - 1), "which_fit", 1), "R_hat", 1))));
                    current_statement_begin__ = 83;
                    stan::math::assign(dt, (get_base1(which_fit, i, "which_fit", 1) - get_base1(which_fit, (i - 1), "which_fit", 1)));
                    current_statement_begin__ = 84;
                    stan::model::assign(R_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                (get_base1(R_hat, get_base1(which_fit, i, "which_fit", 1), "R_hat", 1) * stan::math::exp((pow(get_base1(rho, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "rho", 1), dt) * err))), 
                                "assigning variable R_ar1");
                    current_statement_begin__ = 86;
                    stan::math::assign(rho2j, 0);
                    current_statement_begin__ = 87;
                    for (int j = 0; j <= (dt - 1); ++j) {
                        current_statement_begin__ = 88;
                        stan::math::assign(rho2j, (rho2j + pow(get_base1(rho, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "rho", 1), (2 * j))));
                    }
                    current_statement_begin__ = 89;
                    stan::model::assign(sigma_ar1, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(which_fit, i, "which_fit", 1)), stan::model::nil_index_list()), 
                                (get_base1(sigma, get_base1(pop, get_base1(which_fit, i, "which_fit", 1), "pop", 1), "sigma", 1) * stan::math::sqrt(rho2j)), 
                                "assigning variable sigma_ar1");
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 58;
            check_greater_or_equal(function__, "R_hat", R_hat, 0);
            current_statement_begin__ = 59;
            check_greater_or_equal(function__, "R_ar1", R_ar1, 0);
            current_statement_begin__ = 60;
            check_greater_or_equal(function__, "sigma_ar1", sigma_ar1, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t R_hat_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                    vars__.push_back(R_hat(j_1__));
                }
                size_t R_ar1_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < R_ar1_j_1_max__; ++j_1__) {
                    vars__.push_back(R_ar1(j_1__));
                }
                size_t sigma_ar1_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < sigma_ar1_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_ar1(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 109;
            validate_non_negative_index("S_sim", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_sim(N);
            stan::math::initialize(S_sim, DUMMY_VAR__);
            stan::math::fill(S_sim, DUMMY_VAR__);
            current_statement_begin__ = 110;
            validate_non_negative_index("R_sim", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R_sim(N);
            stan::math::initialize(R_sim, DUMMY_VAR__);
            stan::math::fill(R_sim, DUMMY_VAR__);
            current_statement_begin__ = 111;
            validate_non_negative_index("err_sim", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> err_sim(N);
            stan::math::initialize(err_sim, DUMMY_VAR__);
            stan::math::fill(err_sim, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 113;
            stan::math::assign(S_sim, S);
            current_statement_begin__ = 114;
            stan::math::assign(R_sim, R);
            current_statement_begin__ = 115;
            stan::math::assign(err_sim, rep_vector(0, N));
            current_statement_begin__ = 117;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 119;
                if (as_bool(logical_eq(get_base1(S_NA, i, "S_NA", 1), 1))) {
                    current_statement_begin__ = 121;
                    if (as_bool((primitive_value(logical_gte(i, max_age)) && primitive_value(logical_eq(get_base1(pop, (i - max_age), "pop", 1), get_base1(pop, i, "pop", 1)))))) {
                        current_statement_begin__ = 123;
                        stan::model::assign(S_sim, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    0, 
                                    "assigning variable S_sim");
                        current_statement_begin__ = 124;
                        for (int a = 1; a <= N_age; ++a) {
                            current_statement_begin__ = 125;
                            stan::model::assign(S_sim, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (get_base1(S_sim, i, "S_sim", 1) + (get_base1(R_sim, (i - get_base1(ages, a, "ages", 1)), "R_sim", 1) * get_base1(p, get_base1(pop, i, "pop", 1), a, "p", 1))), 
                                        "assigning variable S_sim");
                        }
                    }
                }
                current_statement_begin__ = 129;
                if (as_bool((primitive_value(logical_eq(i, 1)) || primitive_value(logical_neq(get_base1(pop, (i - 1), "pop", 1), get_base1(pop, i, "pop", 1)))))) {
                    current_statement_begin__ = 130;
                    stan::model::assign(err_sim, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                normal_rng(0, get_base1(sigma, get_base1(pop, i, "pop", 1), "sigma", 1), base_rng__), 
                                "assigning variable err_sim");
                } else {
                    current_statement_begin__ = 132;
                    stan::model::assign(err_sim, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                normal_rng((get_base1(rho, get_base1(pop, i, "pop", 1), "rho", 1) * get_base1(err_sim, (i - 1), "err_sim", 1)), get_base1(sigma, get_base1(pop, i, "pop", 1), "sigma", 1), base_rng__), 
                                "assigning variable err_sim");
                }
                current_statement_begin__ = 134;
                if (as_bool(logical_eq(get_base1(R_NA, i, "R_NA", 1), 1))) {
                    current_statement_begin__ = 135;
                    stan::model::assign(R_sim, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(A, i, "A", 1) * SR(SR_fun, get_base1(alpha, get_base1(pop, i, "pop", 1), "alpha", 1), get_base1(Rmax, get_base1(pop, i, "pop", 1), "Rmax", 1), get_base1(S_sim, i, "S_sim", 1), get_base1(A, i, "A", 1), pstream__)) * stan::math::exp(get_base1(err_sim, i, "err_sim", 1))), 
                                "assigning variable R_sim");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 109;
            size_t S_sim_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_sim_j_1_max__; ++j_1__) {
                vars__.push_back(S_sim(j_1__));
            }
            current_statement_begin__ = 110;
            size_t R_sim_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_sim_j_1_max__; ++j_1__) {
                vars__.push_back(R_sim(j_1__));
            }
            current_statement_begin__ = 111;
            size_t err_sim_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < err_sim_j_1_max__; ++j_1__) {
                vars__.push_back(err_sim(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_RR_SS_np";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t R_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_ar1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_ar1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_ar1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_ar1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_ar1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_ar1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t S_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < S_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < R_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t err_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < err_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "err_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t R_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_ar1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_ar1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_ar1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_ar1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_ar1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_ar1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t S_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < S_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < R_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t err_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < err_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "err_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_RR_SS_np_namespace::model_RR_SS_np stan_model;
#endif
