// Generated by rstantools.  Do not edit by hand.

/*
    salmonIPM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    salmonIPM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with salmonIPM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_IPM_SS_pp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_IPM_SS_pp");
    reader.add_event(450, 448, "end", "model_IPM_SS_pp");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
SR(const int& SR_fun,
       const T1__& alpha,
       const T2__& Rmax,
       const T3__& S,
       const T4__& A, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ R(DUMMY_VAR__);
        (void) R;  // dummy to suppress unused var warning
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 6;
        if (as_bool(logical_eq(SR_fun, 1))) {
            current_statement_begin__ = 7;
            stan::math::assign(R, (alpha * S));
        } else if (as_bool(logical_eq(SR_fun, 2))) {
            current_statement_begin__ = 9;
            stan::math::assign(R, ((alpha * S) / (1 + ((alpha * S) / (A * Rmax)))));
        } else if (as_bool(logical_eq(SR_fun, 3))) {
            current_statement_begin__ = 11;
            stan::math::assign(R, ((alpha * S) * stan::math::exp(((-(alpha) * S) / ((A * stan::math::e()) * Rmax)))));
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct SR_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
    operator()(const int& SR_fun,
       const T1__& alpha,
       const T2__& Rmax,
       const T3__& S,
       const T4__& A, std::ostream* pstream__) const {
        return SR(SR_fun, alpha, Rmax, S, A, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pexp_lpdf(const T0__& y,
              const T1__& mu,
              const T2__& sigma_R,
              const T3__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(-(pow((stan::math::fabs((y - mu)) / sigma_R), shape)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pexp_lpdf(const T0__& y,
              const T1__& mu,
              const T2__& sigma_R,
              const T3__& shape, std::ostream* pstream__) {
    return pexp_lpdf<false>(y,mu,sigma_R,shape, pstream__);
}
struct pexp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
              const T1__& mu,
              const T2__& sigma_R,
              const T3__& shape, std::ostream* pstream__) const {
        return pexp_lpdf(y, mu, sigma_R, shape, pstream__);
    }
};
std::vector<int>
veq(const std::vector<int>& x,
        const int& y, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 23;
        validate_non_negative_index("xeqy", "size(x)", size(x));
        std::vector<int  > xeqy(size(x), int(0));
        stan::math::fill(xeqy, std::numeric_limits<int>::min());
        current_statement_begin__ = 24;
        for (int i = 1; i <= size(x); ++i) {
            current_statement_begin__ = 25;
            stan::model::assign(xeqy, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        logical_eq(get_base1(x, i, "x", 1), y), 
                        "assigning variable xeqy");
        }
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(xeqy);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct veq_functor__ {
            std::vector<int>
    operator()(const std::vector<int>& x,
        const int& y, std::ostream* pstream__) const {
        return veq(x, y, pstream__);
    }
};
std::vector<int>
vand(const std::vector<int>& cond1,
         const std::vector<int>& cond2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 31;
        validate_non_negative_index("cond1_and_cond2", "size(cond1)", size(cond1));
        std::vector<int  > cond1_and_cond2(size(cond1), int(0));
        stan::math::fill(cond1_and_cond2, std::numeric_limits<int>::min());
        current_statement_begin__ = 32;
        for (int i = 1; i <= size(cond1); ++i) {
            current_statement_begin__ = 33;
            stan::model::assign(cond1_and_cond2, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (primitive_value(get_base1(cond1, i, "cond1", 1)) && primitive_value(get_base1(cond2, i, "cond2", 1))), 
                        "assigning variable cond1_and_cond2");
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(cond1_and_cond2);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct vand_functor__ {
            std::vector<int>
    operator()(const std::vector<int>& cond1,
         const std::vector<int>& cond2, std::ostream* pstream__) const {
        return vand(cond1, cond2, pstream__);
    }
};
std::vector<int>
rsub(const std::vector<int>& x,
         const std::vector<int>& cond, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 39;
        validate_non_negative_index("xsub", "sum(cond)", sum(cond));
        std::vector<int  > xsub(sum(cond), int(0));
        stan::math::fill(xsub, std::numeric_limits<int>::min());
        current_statement_begin__ = 40;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        current_statement_begin__ = 41;
        stan::math::assign(pos, 1);
        current_statement_begin__ = 42;
        for (int i = 1; i <= size(x); ++i) {
            current_statement_begin__ = 43;
            if (as_bool(get_base1(cond, i, "cond", 1))) {
                current_statement_begin__ = 45;
                stan::model::assign(xsub, 
                            stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                            get_base1(x, i, "x", 1), 
                            "assigning variable xsub");
                current_statement_begin__ = 46;
                stan::math::assign(pos, (pos + 1));
            }
        }
        current_statement_begin__ = 48;
        return stan::math::promote_scalar<fun_return_scalar_t__>(xsub);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rsub_functor__ {
            std::vector<int>
    operator()(const std::vector<int>& x,
         const std::vector<int>& cond, std::ostream* pstream__) const {
        return rsub(x, cond, pstream__);
    }
};
int
which(const std::vector<int>& cond, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 53;
        int which_cond(0);
        (void) which_cond;  // dummy to suppress unused var warning
        stan::math::fill(which_cond, std::numeric_limits<int>::min());
        current_statement_begin__ = 54;
        for (int i = 1; i <= size(cond); ++i) {
            current_statement_begin__ = 55;
            if (as_bool(get_base1(cond, i, "cond", 1))) {
                current_statement_begin__ = 55;
                stan::math::assign(which_cond, i);
            }
        }
        current_statement_begin__ = 56;
        return stan::math::promote_scalar<fun_return_scalar_t__>(which_cond);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct which_functor__ {
            int
    operator()(const std::vector<int>& cond, std::ostream* pstream__) const {
        return which(cond, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
quantile(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
             const T1__& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 70;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(v));
        current_statement_begin__ = 71;
        local_scalar_t__ Np(DUMMY_VAR__);
        (void) Np;  // dummy to suppress unused var warning
        stan::math::initialize(Np, DUMMY_VAR__);
        stan::math::fill(Np, DUMMY_VAR__);
        stan::math::assign(Np,stan::math::round((N * p)));
        current_statement_begin__ = 72;
        local_scalar_t__ q(DUMMY_VAR__);
        (void) q;  // dummy to suppress unused var warning
        stan::math::initialize(q, DUMMY_VAR__);
        stan::math::fill(q, DUMMY_VAR__);
        current_statement_begin__ = 74;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 75;
            if (as_bool(logical_eq((i - Np), 0.0))) {
                current_statement_begin__ = 75;
                stan::math::assign(q, get_base1(v, i, "v", 1));
            }
        }
        current_statement_begin__ = 77;
        return stan::math::promote_scalar<fun_return_scalar_t__>(q);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct quantile_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
             const T1__& p, std::ostream* pstream__) const {
        return quantile(v, p, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_IPM_SS_pp
  : public stan::model::model_base_crtp<model_IPM_SS_pp> {
private:
        int N;
        std::vector<int> pop;
        std::vector<int> year;
        int N_fwd;
        std::vector<int> pop_fwd;
        std::vector<int> year_fwd;
        vector_d A_fwd;
        vector_d F_rate_fwd;
        vector_d B_rate_fwd;
        vector_d p_HOS_fwd;
        int SR_fun;
        vector_d A;
        int N_X_alpha;
        std::vector<row_vector_d> X_alpha;
        int N_X_Rmax;
        std::vector<row_vector_d> X_Rmax;
        int N_X_R;
        std::vector<row_vector_d> X_R;
        vector_d F_rate;
        int N_B;
        std::vector<int> which_B;
        vector_d B_take_obs;
        int N_S_obs;
        std::vector<int> which_S_obs;
        vector_d S_obs;
        int N_age;
        int max_age;
        matrix_d n_age_obs;
        int N_H;
        std::vector<int> which_H;
        std::vector<int> n_W_obs;
        std::vector<int> n_H_obs;
        int N_pop;
        int N_year;
        int N_year_all;
        std::vector<int> pop_year_indx;
        std::vector<int> ages;
        int min_age;
        vector_d ones_N_age;
        vector_d ones_N;
        std::vector<int> n_HW_obs;
        std::vector<std::vector<int> > fwd_init_indx;
        double mu_mu_Rmax;
        double sigma_mu_Rmax;
        vector_d mu_S_init;
        double sigma_S_init;
        matrix_d mu_q_init;
public:
    model_IPM_SS_pp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_IPM_SS_pp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_IPM_SS_pp_namespace::model_IPM_SS_pp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 84;
            validate_non_negative_index("pop", "N", N);
            context__.validate_dims("data initialization", "pop", "int", context__.to_vec(N));
            pop = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("pop");
            pos__ = 0;
            size_t pop_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < pop_k_0_max__; ++k_0__) {
                pop[k_0__] = vals_i__[pos__++];
            }
            size_t pop_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pop_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pop[i_0__]", pop[i_0__], 1);
                check_less_or_equal(function__, "pop[i_0__]", pop[i_0__], N);
            }
            current_statement_begin__ = 85;
            validate_non_negative_index("year", "N", N);
            context__.validate_dims("data initialization", "year", "int", context__.to_vec(N));
            year = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("year");
            pos__ = 0;
            size_t year_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < year_k_0_max__; ++k_0__) {
                year[k_0__] = vals_i__[pos__++];
            }
            size_t year_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < year_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "year[i_0__]", year[i_0__], 1);
                check_less_or_equal(function__, "year[i_0__]", year[i_0__], N);
            }
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "N_fwd", "int", context__.to_vec());
            N_fwd = int(0);
            vals_i__ = context__.vals_i("N_fwd");
            pos__ = 0;
            N_fwd = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_fwd", N_fwd, 0);
            current_statement_begin__ = 88;
            validate_non_negative_index("pop_fwd", "N_fwd", N_fwd);
            context__.validate_dims("data initialization", "pop_fwd", "int", context__.to_vec(N_fwd));
            pop_fwd = std::vector<int>(N_fwd, int(0));
            vals_i__ = context__.vals_i("pop_fwd");
            pos__ = 0;
            size_t pop_fwd_k_0_max__ = N_fwd;
            for (size_t k_0__ = 0; k_0__ < pop_fwd_k_0_max__; ++k_0__) {
                pop_fwd[k_0__] = vals_i__[pos__++];
            }
            size_t pop_fwd_i_0_max__ = N_fwd;
            for (size_t i_0__ = 0; i_0__ < pop_fwd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pop_fwd[i_0__]", pop_fwd[i_0__], 1);
                check_less_or_equal(function__, "pop_fwd[i_0__]", pop_fwd[i_0__], N);
            }
            current_statement_begin__ = 89;
            validate_non_negative_index("year_fwd", "N_fwd", N_fwd);
            context__.validate_dims("data initialization", "year_fwd", "int", context__.to_vec(N_fwd));
            year_fwd = std::vector<int>(N_fwd, int(0));
            vals_i__ = context__.vals_i("year_fwd");
            pos__ = 0;
            size_t year_fwd_k_0_max__ = N_fwd;
            for (size_t k_0__ = 0; k_0__ < year_fwd_k_0_max__; ++k_0__) {
                year_fwd[k_0__] = vals_i__[pos__++];
            }
            size_t year_fwd_i_0_max__ = N_fwd;
            for (size_t i_0__ = 0; i_0__ < year_fwd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "year_fwd[i_0__]", year_fwd[i_0__], 1);
                check_less_or_equal(function__, "year_fwd[i_0__]", year_fwd[i_0__], (N + N_fwd));
            }
            current_statement_begin__ = 90;
            validate_non_negative_index("A_fwd", "N_fwd", N_fwd);
            context__.validate_dims("data initialization", "A_fwd", "vector_d", context__.to_vec(N_fwd));
            A_fwd = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_fwd);
            vals_r__ = context__.vals_r("A_fwd");
            pos__ = 0;
            size_t A_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < A_fwd_j_1_max__; ++j_1__) {
                A_fwd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "A_fwd", A_fwd, 0);
            current_statement_begin__ = 91;
            validate_non_negative_index("F_rate_fwd", "N_fwd", N_fwd);
            context__.validate_dims("data initialization", "F_rate_fwd", "vector_d", context__.to_vec(N_fwd));
            F_rate_fwd = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_fwd);
            vals_r__ = context__.vals_r("F_rate_fwd");
            pos__ = 0;
            size_t F_rate_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < F_rate_fwd_j_1_max__; ++j_1__) {
                F_rate_fwd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "F_rate_fwd", F_rate_fwd, 0);
            check_less_or_equal(function__, "F_rate_fwd", F_rate_fwd, 1);
            current_statement_begin__ = 92;
            validate_non_negative_index("B_rate_fwd", "N_fwd", N_fwd);
            context__.validate_dims("data initialization", "B_rate_fwd", "vector_d", context__.to_vec(N_fwd));
            B_rate_fwd = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_fwd);
            vals_r__ = context__.vals_r("B_rate_fwd");
            pos__ = 0;
            size_t B_rate_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < B_rate_fwd_j_1_max__; ++j_1__) {
                B_rate_fwd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "B_rate_fwd", B_rate_fwd, 0);
            check_less_or_equal(function__, "B_rate_fwd", B_rate_fwd, 1);
            current_statement_begin__ = 93;
            validate_non_negative_index("p_HOS_fwd", "N_fwd", N_fwd);
            context__.validate_dims("data initialization", "p_HOS_fwd", "vector_d", context__.to_vec(N_fwd));
            p_HOS_fwd = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_fwd);
            vals_r__ = context__.vals_r("p_HOS_fwd");
            pos__ = 0;
            size_t p_HOS_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < p_HOS_fwd_j_1_max__; ++j_1__) {
                p_HOS_fwd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "p_HOS_fwd", p_HOS_fwd, 0);
            check_less_or_equal(function__, "p_HOS_fwd", p_HOS_fwd, 1);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "SR_fun", "int", context__.to_vec());
            SR_fun = int(0);
            vals_i__ = context__.vals_i("SR_fun");
            pos__ = 0;
            SR_fun = vals_i__[pos__++];
            check_greater_or_equal(function__, "SR_fun", SR_fun, 1);
            current_statement_begin__ = 96;
            validate_non_negative_index("A", "N", N);
            context__.validate_dims("data initialization", "A", "vector_d", context__.to_vec(N));
            A = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "A", A, 0);
            current_statement_begin__ = 97;
            context__.validate_dims("data initialization", "N_X_alpha", "int", context__.to_vec());
            N_X_alpha = int(0);
            vals_i__ = context__.vals_i("N_X_alpha");
            pos__ = 0;
            N_X_alpha = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_X_alpha", N_X_alpha, 0);
            current_statement_begin__ = 98;
            validate_non_negative_index("X_alpha", "N_X_alpha", N_X_alpha);
            validate_non_negative_index("X_alpha", "N", N);
            context__.validate_dims("data initialization", "X_alpha", "row_vector_d", context__.to_vec(N,N_X_alpha));
            X_alpha = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(N, Eigen::Matrix<double, 1, Eigen::Dynamic>(N_X_alpha));
            vals_r__ = context__.vals_r("X_alpha");
            pos__ = 0;
            size_t X_alpha_j_1_max__ = N_X_alpha;
            size_t X_alpha_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_alpha_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_alpha_k_0_max__; ++k_0__) {
                    X_alpha[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "N_X_Rmax", "int", context__.to_vec());
            N_X_Rmax = int(0);
            vals_i__ = context__.vals_i("N_X_Rmax");
            pos__ = 0;
            N_X_Rmax = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_X_Rmax", N_X_Rmax, 0);
            current_statement_begin__ = 100;
            validate_non_negative_index("X_Rmax", "N_X_Rmax", N_X_Rmax);
            validate_non_negative_index("X_Rmax", "N", N);
            context__.validate_dims("data initialization", "X_Rmax", "row_vector_d", context__.to_vec(N,N_X_Rmax));
            X_Rmax = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(N, Eigen::Matrix<double, 1, Eigen::Dynamic>(N_X_Rmax));
            vals_r__ = context__.vals_r("X_Rmax");
            pos__ = 0;
            size_t X_Rmax_j_1_max__ = N_X_Rmax;
            size_t X_Rmax_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_Rmax_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_Rmax_k_0_max__; ++k_0__) {
                    X_Rmax[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 101;
            context__.validate_dims("data initialization", "N_X_R", "int", context__.to_vec());
            N_X_R = int(0);
            vals_i__ = context__.vals_i("N_X_R");
            pos__ = 0;
            N_X_R = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_X_R", N_X_R, 0);
            current_statement_begin__ = 102;
            validate_non_negative_index("X_R", "N_X_R", N_X_R);
            validate_non_negative_index("X_R", "N", N);
            context__.validate_dims("data initialization", "X_R", "row_vector_d", context__.to_vec(N,N_X_R));
            X_R = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(N, Eigen::Matrix<double, 1, Eigen::Dynamic>(N_X_R));
            vals_r__ = context__.vals_r("X_R");
            pos__ = 0;
            size_t X_R_j_1_max__ = N_X_R;
            size_t X_R_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_R_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_R_k_0_max__; ++k_0__) {
                    X_R[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 104;
            validate_non_negative_index("F_rate", "N", N);
            context__.validate_dims("data initialization", "F_rate", "vector_d", context__.to_vec(N));
            F_rate = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("F_rate");
            pos__ = 0;
            size_t F_rate_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < F_rate_j_1_max__; ++j_1__) {
                F_rate(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "F_rate", F_rate, 0);
            check_less_or_equal(function__, "F_rate", F_rate, 1);
            current_statement_begin__ = 105;
            context__.validate_dims("data initialization", "N_B", "int", context__.to_vec());
            N_B = int(0);
            vals_i__ = context__.vals_i("N_B");
            pos__ = 0;
            N_B = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_B", N_B, 0);
            check_less_or_equal(function__, "N_B", N_B, N);
            current_statement_begin__ = 106;
            validate_non_negative_index("which_B", "N_B", N_B);
            context__.validate_dims("data initialization", "which_B", "int", context__.to_vec(N_B));
            which_B = std::vector<int>(N_B, int(0));
            vals_i__ = context__.vals_i("which_B");
            pos__ = 0;
            size_t which_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < which_B_k_0_max__; ++k_0__) {
                which_B[k_0__] = vals_i__[pos__++];
            }
            size_t which_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < which_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_B[i_0__]", which_B[i_0__], 1);
                check_less_or_equal(function__, "which_B[i_0__]", which_B[i_0__], N);
            }
            current_statement_begin__ = 107;
            validate_non_negative_index("B_take_obs", "N_B", N_B);
            context__.validate_dims("data initialization", "B_take_obs", "vector_d", context__.to_vec(N_B));
            B_take_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_B);
            vals_r__ = context__.vals_r("B_take_obs");
            pos__ = 0;
            size_t B_take_obs_j_1_max__ = N_B;
            for (size_t j_1__ = 0; j_1__ < B_take_obs_j_1_max__; ++j_1__) {
                B_take_obs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 109;
            context__.validate_dims("data initialization", "N_S_obs", "int", context__.to_vec());
            N_S_obs = int(0);
            vals_i__ = context__.vals_i("N_S_obs");
            pos__ = 0;
            N_S_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_S_obs", N_S_obs, 1);
            check_less_or_equal(function__, "N_S_obs", N_S_obs, N);
            current_statement_begin__ = 110;
            validate_non_negative_index("which_S_obs", "N_S_obs", N_S_obs);
            context__.validate_dims("data initialization", "which_S_obs", "int", context__.to_vec(N_S_obs));
            which_S_obs = std::vector<int>(N_S_obs, int(0));
            vals_i__ = context__.vals_i("which_S_obs");
            pos__ = 0;
            size_t which_S_obs_k_0_max__ = N_S_obs;
            for (size_t k_0__ = 0; k_0__ < which_S_obs_k_0_max__; ++k_0__) {
                which_S_obs[k_0__] = vals_i__[pos__++];
            }
            size_t which_S_obs_i_0_max__ = N_S_obs;
            for (size_t i_0__ = 0; i_0__ < which_S_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_S_obs[i_0__]", which_S_obs[i_0__], 1);
                check_less_or_equal(function__, "which_S_obs[i_0__]", which_S_obs[i_0__], N);
            }
            current_statement_begin__ = 111;
            validate_non_negative_index("S_obs", "N", N);
            context__.validate_dims("data initialization", "S_obs", "vector_d", context__.to_vec(N));
            S_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("S_obs");
            pos__ = 0;
            size_t S_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_obs_j_1_max__; ++j_1__) {
                S_obs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "S_obs", S_obs, 0);
            current_statement_begin__ = 113;
            context__.validate_dims("data initialization", "N_age", "int", context__.to_vec());
            N_age = int(0);
            vals_i__ = context__.vals_i("N_age");
            pos__ = 0;
            N_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_age", N_age, 2);
            current_statement_begin__ = 114;
            context__.validate_dims("data initialization", "max_age", "int", context__.to_vec());
            max_age = int(0);
            vals_i__ = context__.vals_i("max_age");
            pos__ = 0;
            max_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "max_age", max_age, 2);
            current_statement_begin__ = 115;
            validate_non_negative_index("n_age_obs", "N", N);
            validate_non_negative_index("n_age_obs", "N_age", N_age);
            context__.validate_dims("data initialization", "n_age_obs", "matrix_d", context__.to_vec(N,N_age));
            n_age_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N_age);
            vals_r__ = context__.vals_r("n_age_obs");
            pos__ = 0;
            size_t n_age_obs_j_2_max__ = N_age;
            size_t n_age_obs_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < n_age_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < n_age_obs_j_1_max__; ++j_1__) {
                    n_age_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "n_age_obs", n_age_obs, 0);
            current_statement_begin__ = 117;
            context__.validate_dims("data initialization", "N_H", "int", context__.to_vec());
            N_H = int(0);
            vals_i__ = context__.vals_i("N_H");
            pos__ = 0;
            N_H = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_H", N_H, 0);
            check_less_or_equal(function__, "N_H", N_H, N);
            current_statement_begin__ = 118;
            validate_non_negative_index("which_H", "N_H", N_H);
            context__.validate_dims("data initialization", "which_H", "int", context__.to_vec(N_H));
            which_H = std::vector<int>(N_H, int(0));
            vals_i__ = context__.vals_i("which_H");
            pos__ = 0;
            size_t which_H_k_0_max__ = N_H;
            for (size_t k_0__ = 0; k_0__ < which_H_k_0_max__; ++k_0__) {
                which_H[k_0__] = vals_i__[pos__++];
            }
            size_t which_H_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < which_H_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_H[i_0__]", which_H[i_0__], 1);
                check_less_or_equal(function__, "which_H[i_0__]", which_H[i_0__], N);
            }
            current_statement_begin__ = 119;
            validate_non_negative_index("n_W_obs", "N_H", N_H);
            context__.validate_dims("data initialization", "n_W_obs", "int", context__.to_vec(N_H));
            n_W_obs = std::vector<int>(N_H, int(0));
            vals_i__ = context__.vals_i("n_W_obs");
            pos__ = 0;
            size_t n_W_obs_k_0_max__ = N_H;
            for (size_t k_0__ = 0; k_0__ < n_W_obs_k_0_max__; ++k_0__) {
                n_W_obs[k_0__] = vals_i__[pos__++];
            }
            size_t n_W_obs_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < n_W_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_W_obs[i_0__]", n_W_obs[i_0__], 0);
            }
            current_statement_begin__ = 120;
            validate_non_negative_index("n_H_obs", "N_H", N_H);
            context__.validate_dims("data initialization", "n_H_obs", "int", context__.to_vec(N_H));
            n_H_obs = std::vector<int>(N_H, int(0));
            vals_i__ = context__.vals_i("n_H_obs");
            pos__ = 0;
            size_t n_H_obs_k_0_max__ = N_H;
            for (size_t k_0__ = 0; k_0__ < n_H_obs_k_0_max__; ++k_0__) {
                n_H_obs[k_0__] = vals_i__[pos__++];
            }
            size_t n_H_obs_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < n_H_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_H_obs[i_0__]", n_H_obs[i_0__], 0);
            }
            // initialize transformed data variables
            current_statement_begin__ = 124;
            N_pop = int(0);
            stan::math::fill(N_pop, std::numeric_limits<int>::min());
            stan::math::assign(N_pop,max(pop));
            current_statement_begin__ = 125;
            N_year = int(0);
            stan::math::fill(N_year, std::numeric_limits<int>::min());
            stan::math::assign(N_year,max(year));
            current_statement_begin__ = 126;
            N_year_all = int(0);
            stan::math::fill(N_year_all, std::numeric_limits<int>::min());
            current_statement_begin__ = 127;
            validate_non_negative_index("pop_year_indx", "N", N);
            pop_year_indx = std::vector<int>(N, int(0));
            stan::math::fill(pop_year_indx, std::numeric_limits<int>::min());
            current_statement_begin__ = 128;
            validate_non_negative_index("ages", "N_age", N_age);
            ages = std::vector<int>(N_age, int(0));
            stan::math::fill(ages, std::numeric_limits<int>::min());
            current_statement_begin__ = 129;
            min_age = int(0);
            stan::math::fill(min_age, std::numeric_limits<int>::min());
            current_statement_begin__ = 130;
            validate_non_negative_index("ones_N_age", "N_age", N_age);
            ones_N_age = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_age);
            stan::math::fill(ones_N_age, DUMMY_VAR__);
            stan::math::assign(ones_N_age,rep_vector(1, N_age));
            current_statement_begin__ = 131;
            validate_non_negative_index("ones_N", "N", N);
            ones_N = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(ones_N, DUMMY_VAR__);
            stan::math::assign(ones_N,rep_vector(1, N));
            current_statement_begin__ = 132;
            validate_non_negative_index("n_HW_obs", "N_H", N_H);
            n_HW_obs = std::vector<int>(N_H, int(0));
            stan::math::fill(n_HW_obs, std::numeric_limits<int>::min());
            current_statement_begin__ = 133;
            validate_non_negative_index("fwd_init_indx", "N_fwd", N_fwd);
            validate_non_negative_index("fwd_init_indx", "N_age", N_age);
            fwd_init_indx = std::vector<std::vector<int> >(N_fwd, std::vector<int>(N_age, int(0)));
            stan::math::fill(fwd_init_indx, std::numeric_limits<int>::min());
            current_statement_begin__ = 134;
            mu_mu_Rmax = double(0);
            stan::math::fill(mu_mu_Rmax, DUMMY_VAR__);
            stan::math::assign(mu_mu_Rmax,quantile(stan::math::log(stan::model::rvalue(S_obs, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S_obs")), 0.9, pstream__));
            current_statement_begin__ = 135;
            sigma_mu_Rmax = double(0);
            stan::math::fill(sigma_mu_Rmax, DUMMY_VAR__);
            stan::math::assign(sigma_mu_Rmax,sd(stan::math::log(stan::model::rvalue(S_obs, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S_obs"))));
            current_statement_begin__ = 136;
            validate_non_negative_index("mu_S_init", "(max_age * N_pop)", (max_age * N_pop));
            mu_S_init = Eigen::Matrix<double, Eigen::Dynamic, 1>((max_age * N_pop));
            stan::math::fill(mu_S_init, DUMMY_VAR__);
            current_statement_begin__ = 137;
            sigma_S_init = double(0);
            stan::math::fill(sigma_S_init, DUMMY_VAR__);
            stan::math::assign(sigma_S_init,(2 * sd(stan::math::log(stan::model::rvalue(S_obs, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S_obs")))));
            current_statement_begin__ = 138;
            validate_non_negative_index("mu_q_init", "N_age", N_age);
            validate_non_negative_index("mu_q_init", "(max_age * N_pop)", (max_age * N_pop));
            mu_q_init = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_age, (max_age * N_pop));
            stan::math::fill(mu_q_init, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 140;
            stan::math::assign(N_year_all, max(append_array(year, year_fwd)));
            current_statement_begin__ = 141;
            for (int a = 1; a <= N_age; ++a) {
                current_statement_begin__ = 142;
                stan::model::assign(ages, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            ((max_age - N_age) + a), 
                            "assigning variable ages");
            }
            current_statement_begin__ = 143;
            stan::math::assign(min_age, min(ages));
            current_statement_begin__ = 144;
            for (int i = 1; i <= N_H; ++i) {
                current_statement_begin__ = 144;
                stan::model::assign(n_HW_obs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(n_H_obs, i, "n_H_obs", 1) + get_base1(n_W_obs, i, "n_W_obs", 1)), 
                            "assigning variable n_HW_obs");
            }
            current_statement_begin__ = 146;
            stan::model::assign(pop_year_indx, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable pop_year_indx");
            current_statement_begin__ = 147;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 149;
                if (as_bool((primitive_value(logical_eq(i, 1)) || primitive_value(logical_neq(get_base1(pop, (i - 1), "pop", 1), get_base1(pop, i, "pop", 1)))))) {
                    current_statement_begin__ = 150;
                    stan::model::assign(pop_year_indx, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable pop_year_indx");
                } else {
                    current_statement_begin__ = 152;
                    stan::model::assign(pop_year_indx, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(pop_year_indx, (i - 1), "pop_year_indx", 1) + 1), 
                                "assigning variable pop_year_indx");
                }
            }
            current_statement_begin__ = 155;
            stan::math::assign(fwd_init_indx, rep_array(0, N_fwd, N_age));
            current_statement_begin__ = 156;
            for (int i = 1; i <= N_fwd; ++i) {
                current_statement_begin__ = 158;
                for (int a = 1; a <= N_age; ++a) {
                    current_statement_begin__ = 160;
                    if (as_bool(logical_lt((get_base1(year_fwd, i, "year_fwd", 1) - get_base1(ages, a, "ages", 1)), min(rsub(year_fwd, veq(pop_fwd, get_base1(pop_fwd, i, "pop_fwd", 1), pstream__), pstream__))))) {
                        current_statement_begin__ = 161;
                        stan::model::assign(fwd_init_indx, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                    which(vand(veq(pop, get_base1(pop_fwd, i, "pop_fwd", 1), pstream__), veq(year, (get_base1(year_fwd, i, "year_fwd", 1) - get_base1(ages, a, "ages", 1)), pstream__), pstream__), pstream__), 
                                    "assigning variable fwd_init_indx");
                    }
                }
            }
            current_statement_begin__ = 165;
            for (int i = 1; i <= max_age; ++i) {
                {
                current_statement_begin__ = 167;
                int N_orphan_age(0);
                (void) N_orphan_age;  // dummy to suppress unused var warning
                stan::math::fill(N_orphan_age, std::numeric_limits<int>::min());
                stan::math::assign(N_orphan_age,(N_age - std::max((i - min_age), 0)));
                current_statement_begin__ = 168;
                int N_amalg_age(0);
                (void) N_amalg_age;  // dummy to suppress unused var warning
                stan::math::fill(N_amalg_age, std::numeric_limits<int>::min());
                stan::math::assign(N_amalg_age,((N_age - N_orphan_age) + 1));
                current_statement_begin__ = 170;
                for (int j = 1; j <= N_pop; ++j) {
                    {
                    current_statement_begin__ = 172;
                    int ii(0);
                    (void) ii;  // dummy to suppress unused var warning
                    stan::math::fill(ii, std::numeric_limits<int>::min());
                    stan::math::assign(ii,(((j - 1) * max_age) + i));
                    current_statement_begin__ = 175;
                    stan::model::assign(mu_S_init, 
                                stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                                ((mean(stan::math::log(stan::model::rvalue(S_obs, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S_obs"))) + stan::math::log(N_orphan_age)) - stan::math::log(N_age)), 
                                "assigning variable mu_S_init");
                    current_statement_begin__ = 178;
                    stan::model::assign(mu_q_init, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list())), 
                                append_row(rep_vector((1.0 / N_amalg_age), N_amalg_age), rep_vector(1, (N_orphan_age - 1))), 
                                "assigning variable mu_q_init");
                    }
                }
                }
            }
            // validate transformed data
            current_statement_begin__ = 124;
            check_greater_or_equal(function__, "N_pop", N_pop, 1);
            check_less_or_equal(function__, "N_pop", N_pop, N);
            current_statement_begin__ = 125;
            check_greater_or_equal(function__, "N_year", N_year, 1);
            check_less_or_equal(function__, "N_year", N_year, N);
            current_statement_begin__ = 126;
            check_greater_or_equal(function__, "N_year_all", N_year_all, 1);
            check_less_or_equal(function__, "N_year_all", N_year_all, N);
            current_statement_begin__ = 127;
            size_t pop_year_indx_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pop_year_indx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pop_year_indx[i_0__]", pop_year_indx[i_0__], 1);
            }
            current_statement_begin__ = 128;
            size_t ages_i_0_max__ = N_age;
            for (size_t i_0__ = 0; i_0__ < ages_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ages[i_0__]", ages[i_0__], 2);
            }
            current_statement_begin__ = 129;
            check_greater_or_equal(function__, "min_age", min_age, 1);
            current_statement_begin__ = 132;
            size_t n_HW_obs_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < n_HW_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_HW_obs[i_0__]", n_HW_obs[i_0__], 0);
            }
            current_statement_begin__ = 133;
            size_t fwd_init_indx_i_0_max__ = N_fwd;
            size_t fwd_init_indx_i_1_max__ = N_age;
            for (size_t i_0__ = 0; i_0__ < fwd_init_indx_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < fwd_init_indx_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "fwd_init_indx[i_0__][i_1__]", fwd_init_indx[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "fwd_init_indx[i_0__][i_1__]", fwd_init_indx[i_0__][i_1__], N);
                }
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 186;
            num_params_r__ += 1;
            current_statement_begin__ = 187;
            validate_non_negative_index("beta_alpha", "N_X_alpha", N_X_alpha);
            num_params_r__ += N_X_alpha;
            current_statement_begin__ = 188;
            num_params_r__ += 1;
            current_statement_begin__ = 189;
            validate_non_negative_index("zeta_alpha", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 190;
            num_params_r__ += 1;
            current_statement_begin__ = 191;
            validate_non_negative_index("beta_Rmax", "N_X_Rmax", N_X_Rmax);
            num_params_r__ += N_X_Rmax;
            current_statement_begin__ = 192;
            num_params_r__ += 1;
            current_statement_begin__ = 193;
            validate_non_negative_index("zeta_Rmax", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 194;
            num_params_r__ += 1;
            current_statement_begin__ = 195;
            validate_non_negative_index("beta_R", "N_X_R", N_X_R);
            num_params_r__ += N_X_R;
            current_statement_begin__ = 196;
            num_params_r__ += 1;
            current_statement_begin__ = 197;
            num_params_r__ += 1;
            current_statement_begin__ = 198;
            validate_non_negative_index("zeta_year_R", "N_year_all", N_year_all);
            num_params_r__ += N_year_all;
            current_statement_begin__ = 199;
            num_params_r__ += 1;
            current_statement_begin__ = 200;
            validate_non_negative_index("zeta_R", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 202;
            validate_non_negative_index("mu_p", "N_age", N_age);
            num_params_r__ += (N_age - 1);
            current_statement_begin__ = 203;
            validate_non_negative_index("sigma_pop_p", "(N_age - 1)", (N_age - 1));
            num_params_r__ += (N_age - 1);
            current_statement_begin__ = 204;
            validate_non_negative_index("L_pop_p", "(N_age - 1)", (N_age - 1));
            validate_non_negative_index("L_pop_p", "(N_age - 1)", (N_age - 1));
            num_params_r__ += (((N_age - 1) * ((N_age - 1) - 1)) / 2);
            current_statement_begin__ = 205;
            validate_non_negative_index("zeta_pop_p", "N_pop", N_pop);
            validate_non_negative_index("zeta_pop_p", "(N_age - 1)", (N_age - 1));
            num_params_r__ += (N_pop * (N_age - 1));
            current_statement_begin__ = 206;
            validate_non_negative_index("sigma_p", "(N_age - 1)", (N_age - 1));
            num_params_r__ += (N_age - 1);
            current_statement_begin__ = 207;
            validate_non_negative_index("L_p", "(N_age - 1)", (N_age - 1));
            validate_non_negative_index("L_p", "(N_age - 1)", (N_age - 1));
            num_params_r__ += (((N_age - 1) * ((N_age - 1) - 1)) / 2);
            current_statement_begin__ = 208;
            validate_non_negative_index("zeta_p", "N", N);
            validate_non_negative_index("zeta_p", "(N_age - 1)", (N_age - 1));
            num_params_r__ += (N * (N_age - 1));
            current_statement_begin__ = 210;
            validate_non_negative_index("p_HOS", "N_H", N_H);
            num_params_r__ += N_H;
            current_statement_begin__ = 211;
            validate_non_negative_index("B_rate", "N_B", N_B);
            num_params_r__ += N_B;
            current_statement_begin__ = 213;
            validate_non_negative_index("S_init", "(max_age * N_pop)", (max_age * N_pop));
            num_params_r__ += (max_age * N_pop);
            current_statement_begin__ = 214;
            validate_non_negative_index("q_init", "N_age", N_age);
            validate_non_negative_index("q_init", "(max_age * N_pop)", (max_age * N_pop));
            num_params_r__ += ((N_age - 1) * (max_age * N_pop));
            current_statement_begin__ = 215;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_IPM_SS_pp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 186;
        if (!(context__.contains_r("mu_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_alpha", "double", context__.to_vec());
        double mu_alpha(0);
        mu_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 187;
        if (!(context__.contains_r("beta_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_alpha");
        pos__ = 0U;
        validate_non_negative_index("beta_alpha", "N_X_alpha", N_X_alpha);
        context__.validate_dims("parameter initialization", "beta_alpha", "vector_d", context__.to_vec(N_X_alpha));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_alpha(N_X_alpha);
        size_t beta_alpha_j_1_max__ = N_X_alpha;
        for (size_t j_1__ = 0; j_1__ < beta_alpha_j_1_max__; ++j_1__) {
            beta_alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 188;
        if (!(context__.contains_r("sigma_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_alpha", "double", context__.to_vec());
        double sigma_alpha(0);
        sigma_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 189;
        if (!(context__.contains_r("zeta_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_alpha");
        pos__ = 0U;
        validate_non_negative_index("zeta_alpha", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "zeta_alpha", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_alpha(N_pop);
        size_t zeta_alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_alpha_j_1_max__; ++j_1__) {
            zeta_alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 190;
        if (!(context__.contains_r("mu_Rmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_Rmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_Rmax");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_Rmax", "double", context__.to_vec());
        double mu_Rmax(0);
        mu_Rmax = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_Rmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_Rmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 191;
        if (!(context__.contains_r("beta_Rmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_Rmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_Rmax");
        pos__ = 0U;
        validate_non_negative_index("beta_Rmax", "N_X_Rmax", N_X_Rmax);
        context__.validate_dims("parameter initialization", "beta_Rmax", "vector_d", context__.to_vec(N_X_Rmax));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_Rmax(N_X_Rmax);
        size_t beta_Rmax_j_1_max__ = N_X_Rmax;
        for (size_t j_1__ = 0; j_1__ < beta_Rmax_j_1_max__; ++j_1__) {
            beta_Rmax(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_Rmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_Rmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 192;
        if (!(context__.contains_r("sigma_Rmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_Rmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_Rmax");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_Rmax", "double", context__.to_vec());
        double sigma_Rmax(0);
        sigma_Rmax = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_Rmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_Rmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 193;
        if (!(context__.contains_r("zeta_Rmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_Rmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_Rmax");
        pos__ = 0U;
        validate_non_negative_index("zeta_Rmax", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "zeta_Rmax", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_Rmax(N_pop);
        size_t zeta_Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_Rmax_j_1_max__; ++j_1__) {
            zeta_Rmax(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_Rmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_Rmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 194;
        if (!(context__.contains_r("rho_alphaRmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_alphaRmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_alphaRmax");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_alphaRmax", "double", context__.to_vec());
        double rho_alphaRmax(0);
        rho_alphaRmax = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_alphaRmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_alphaRmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 195;
        if (!(context__.contains_r("beta_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_R");
        pos__ = 0U;
        validate_non_negative_index("beta_R", "N_X_R", N_X_R);
        context__.validate_dims("parameter initialization", "beta_R", "vector_d", context__.to_vec(N_X_R));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_R(N_X_R);
        size_t beta_R_j_1_max__ = N_X_R;
        for (size_t j_1__ = 0; j_1__ < beta_R_j_1_max__; ++j_1__) {
            beta_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 196;
        if (!(context__.contains_r("rho_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_R");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_R", "double", context__.to_vec());
        double rho_R(0);
        rho_R = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 197;
        if (!(context__.contains_r("sigma_year_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_year_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_year_R");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_year_R", "double", context__.to_vec());
        double sigma_year_R(0);
        sigma_year_R = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_year_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_year_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 198;
        if (!(context__.contains_r("zeta_year_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_year_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_year_R");
        pos__ = 0U;
        validate_non_negative_index("zeta_year_R", "N_year_all", N_year_all);
        context__.validate_dims("parameter initialization", "zeta_year_R", "vector_d", context__.to_vec(N_year_all));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_year_R(N_year_all);
        size_t zeta_year_R_j_1_max__ = N_year_all;
        for (size_t j_1__ = 0; j_1__ < zeta_year_R_j_1_max__; ++j_1__) {
            zeta_year_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_year_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_year_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 199;
        if (!(context__.contains_r("sigma_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_R");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_R", "double", context__.to_vec());
        double sigma_R(0);
        sigma_R = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 200;
        if (!(context__.contains_r("zeta_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_R");
        pos__ = 0U;
        validate_non_negative_index("zeta_R", "N", N);
        context__.validate_dims("parameter initialization", "zeta_R", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_R(N);
        size_t zeta_R_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_R_j_1_max__; ++j_1__) {
            zeta_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 202;
        if (!(context__.contains_r("mu_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_p");
        pos__ = 0U;
        validate_non_negative_index("mu_p", "N_age", N_age);
        context__.validate_dims("parameter initialization", "mu_p", "vector_d", context__.to_vec(N_age));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_p(N_age);
        size_t mu_p_j_1_max__ = N_age;
        for (size_t j_1__ = 0; j_1__ < mu_p_j_1_max__; ++j_1__) {
            mu_p(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(mu_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 203;
        if (!(context__.contains_r("sigma_pop_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_pop_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_pop_p");
        pos__ = 0U;
        validate_non_negative_index("sigma_pop_p", "(N_age - 1)", (N_age - 1));
        context__.validate_dims("parameter initialization", "sigma_pop_p", "vector_d", context__.to_vec((N_age - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_pop_p((N_age - 1));
        size_t sigma_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_pop_p_j_1_max__; ++j_1__) {
            sigma_pop_p(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_pop_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_pop_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 204;
        if (!(context__.contains_r("L_pop_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_pop_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_pop_p");
        pos__ = 0U;
        validate_non_negative_index("L_pop_p", "(N_age - 1)", (N_age - 1));
        validate_non_negative_index("L_pop_p", "(N_age - 1)", (N_age - 1));
        context__.validate_dims("parameter initialization", "L_pop_p", "matrix_d", context__.to_vec((N_age - 1),(N_age - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_pop_p((N_age - 1), (N_age - 1));
        size_t L_pop_p_j_2_max__ = (N_age - 1);
        size_t L_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < L_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_pop_p_j_1_max__; ++j_1__) {
                L_pop_p(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_pop_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_pop_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 205;
        if (!(context__.contains_r("zeta_pop_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_pop_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_pop_p");
        pos__ = 0U;
        validate_non_negative_index("zeta_pop_p", "N_pop", N_pop);
        validate_non_negative_index("zeta_pop_p", "(N_age - 1)", (N_age - 1));
        context__.validate_dims("parameter initialization", "zeta_pop_p", "matrix_d", context__.to_vec(N_pop,(N_age - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_pop_p(N_pop, (N_age - 1));
        size_t zeta_pop_p_j_2_max__ = (N_age - 1);
        size_t zeta_pop_p_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < zeta_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_pop_p_j_1_max__; ++j_1__) {
                zeta_pop_p(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(zeta_pop_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_pop_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 206;
        if (!(context__.contains_r("sigma_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_p");
        pos__ = 0U;
        validate_non_negative_index("sigma_p", "(N_age - 1)", (N_age - 1));
        context__.validate_dims("parameter initialization", "sigma_p", "vector_d", context__.to_vec((N_age - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_p((N_age - 1));
        size_t sigma_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_p_j_1_max__; ++j_1__) {
            sigma_p(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 207;
        if (!(context__.contains_r("L_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_p");
        pos__ = 0U;
        validate_non_negative_index("L_p", "(N_age - 1)", (N_age - 1));
        validate_non_negative_index("L_p", "(N_age - 1)", (N_age - 1));
        context__.validate_dims("parameter initialization", "L_p", "matrix_d", context__.to_vec((N_age - 1),(N_age - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_p((N_age - 1), (N_age - 1));
        size_t L_p_j_2_max__ = (N_age - 1);
        size_t L_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < L_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_j_1_max__; ++j_1__) {
                L_p(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 208;
        if (!(context__.contains_r("zeta_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_p");
        pos__ = 0U;
        validate_non_negative_index("zeta_p", "N", N);
        validate_non_negative_index("zeta_p", "(N_age - 1)", (N_age - 1));
        context__.validate_dims("parameter initialization", "zeta_p", "matrix_d", context__.to_vec(N,(N_age - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_p(N, (N_age - 1));
        size_t zeta_p_j_2_max__ = (N_age - 1);
        size_t zeta_p_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_j_1_max__; ++j_1__) {
                zeta_p(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(zeta_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 210;
        if (!(context__.contains_r("p_HOS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_HOS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_HOS");
        pos__ = 0U;
        validate_non_negative_index("p_HOS", "N_H", N_H);
        context__.validate_dims("parameter initialization", "p_HOS", "vector_d", context__.to_vec(N_H));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p_HOS(N_H);
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            p_HOS(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, p_HOS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_HOS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 211;
        if (!(context__.contains_r("B_rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B_rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B_rate");
        pos__ = 0U;
        validate_non_negative_index("B_rate", "N_B", N_B);
        context__.validate_dims("parameter initialization", "B_rate", "vector_d", context__.to_vec(N_B));
        Eigen::Matrix<double, Eigen::Dynamic, 1> B_rate(N_B);
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            B_rate(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, B_rate);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B_rate: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 213;
        if (!(context__.contains_r("S_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable S_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("S_init");
        pos__ = 0U;
        validate_non_negative_index("S_init", "(max_age * N_pop)", (max_age * N_pop));
        context__.validate_dims("parameter initialization", "S_init", "vector_d", context__.to_vec((max_age * N_pop)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_init((max_age * N_pop));
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            S_init(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, S_init);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable S_init: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 214;
        if (!(context__.contains_r("q_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable q_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("q_init");
        pos__ = 0U;
        validate_non_negative_index("q_init", "N_age", N_age);
        validate_non_negative_index("q_init", "(max_age * N_pop)", (max_age * N_pop));
        context__.validate_dims("parameter initialization", "q_init", "vector_d", context__.to_vec((max_age * N_pop),N_age));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > q_init((max_age * N_pop), Eigen::Matrix<double, Eigen::Dynamic, 1>(N_age));
        size_t q_init_j_1_max__ = N_age;
        size_t q_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_init_k_0_max__; ++k_0__) {
                q_init[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t q_init_i_0_max__ = (max_age * N_pop);
        for (size_t i_0__ = 0; i_0__ < q_init_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(q_init[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable q_init: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 215;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 186;
            local_scalar_t__ mu_alpha;
            (void) mu_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_alpha = in__.scalar_constrain(lp__);
            else
                mu_alpha = in__.scalar_constrain();
            current_statement_begin__ = 187;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_alpha;
            (void) beta_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_alpha = in__.vector_constrain(N_X_alpha, lp__);
            else
                beta_alpha = in__.vector_constrain(N_X_alpha);
            current_statement_begin__ = 188;
            local_scalar_t__ sigma_alpha;
            (void) sigma_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_alpha = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_alpha = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 189;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_alpha;
            (void) zeta_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_alpha = in__.vector_constrain(N_pop, lp__);
            else
                zeta_alpha = in__.vector_constrain(N_pop);
            current_statement_begin__ = 190;
            local_scalar_t__ mu_Rmax;
            (void) mu_Rmax;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_Rmax = in__.scalar_constrain(lp__);
            else
                mu_Rmax = in__.scalar_constrain();
            current_statement_begin__ = 191;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_Rmax;
            (void) beta_Rmax;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_Rmax = in__.vector_constrain(N_X_Rmax, lp__);
            else
                beta_Rmax = in__.vector_constrain(N_X_Rmax);
            current_statement_begin__ = 192;
            local_scalar_t__ sigma_Rmax;
            (void) sigma_Rmax;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_Rmax = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_Rmax = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 193;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_Rmax;
            (void) zeta_Rmax;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_Rmax = in__.vector_constrain(N_pop, lp__);
            else
                zeta_Rmax = in__.vector_constrain(N_pop);
            current_statement_begin__ = 194;
            local_scalar_t__ rho_alphaRmax;
            (void) rho_alphaRmax;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_alphaRmax = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_alphaRmax = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 195;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_R;
            (void) beta_R;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_R = in__.vector_constrain(N_X_R, lp__);
            else
                beta_R = in__.vector_constrain(N_X_R);
            current_statement_begin__ = 196;
            local_scalar_t__ rho_R;
            (void) rho_R;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_R = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_R = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 197;
            local_scalar_t__ sigma_year_R;
            (void) sigma_year_R;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_year_R = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_year_R = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 198;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_year_R;
            (void) zeta_year_R;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_year_R = in__.vector_constrain(N_year_all, lp__);
            else
                zeta_year_R = in__.vector_constrain(N_year_all);
            current_statement_begin__ = 199;
            local_scalar_t__ sigma_R;
            (void) sigma_R;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_R = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_R = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 200;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_R;
            (void) zeta_R;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_R = in__.vector_constrain(N, lp__);
            else
                zeta_R = in__.vector_constrain(N);
            current_statement_begin__ = 202;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_p;
            (void) mu_p;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_p = in__.simplex_constrain(N_age, lp__);
            else
                mu_p = in__.simplex_constrain(N_age);
            current_statement_begin__ = 203;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_pop_p;
            (void) sigma_pop_p;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_pop_p = in__.vector_lb_constrain(0, (N_age - 1), lp__);
            else
                sigma_pop_p = in__.vector_lb_constrain(0, (N_age - 1));
            current_statement_begin__ = 204;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_pop_p;
            (void) L_pop_p;  // dummy to suppress unused var warning
            if (jacobian__)
                L_pop_p = in__.cholesky_factor_corr_constrain((N_age - 1), lp__);
            else
                L_pop_p = in__.cholesky_factor_corr_constrain((N_age - 1));
            current_statement_begin__ = 205;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_pop_p;
            (void) zeta_pop_p;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_pop_p = in__.matrix_constrain(N_pop, (N_age - 1), lp__);
            else
                zeta_pop_p = in__.matrix_constrain(N_pop, (N_age - 1));
            current_statement_begin__ = 206;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_p;
            (void) sigma_p;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_p = in__.vector_lb_constrain(0, (N_age - 1), lp__);
            else
                sigma_p = in__.vector_lb_constrain(0, (N_age - 1));
            current_statement_begin__ = 207;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_p;
            (void) L_p;  // dummy to suppress unused var warning
            if (jacobian__)
                L_p = in__.cholesky_factor_corr_constrain((N_age - 1), lp__);
            else
                L_p = in__.cholesky_factor_corr_constrain((N_age - 1));
            current_statement_begin__ = 208;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_p;
            (void) zeta_p;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_p = in__.matrix_constrain(N, (N_age - 1), lp__);
            else
                zeta_p = in__.matrix_constrain(N, (N_age - 1));
            current_statement_begin__ = 210;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_HOS;
            (void) p_HOS;  // dummy to suppress unused var warning
            if (jacobian__)
                p_HOS = in__.vector_lub_constrain(0, 1, N_H, lp__);
            else
                p_HOS = in__.vector_lub_constrain(0, 1, N_H);
            current_statement_begin__ = 211;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rate;
            (void) B_rate;  // dummy to suppress unused var warning
            if (jacobian__)
                B_rate = in__.vector_lub_constrain(0, 1, N_B, lp__);
            else
                B_rate = in__.vector_lub_constrain(0, 1, N_B);
            current_statement_begin__ = 213;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_init;
            (void) S_init;  // dummy to suppress unused var warning
            if (jacobian__)
                S_init = in__.vector_lb_constrain(0, (max_age * N_pop), lp__);
            else
                S_init = in__.vector_lb_constrain(0, (max_age * N_pop));
            current_statement_begin__ = 214;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > q_init;
            size_t q_init_d_0_max__ = (max_age * N_pop);
            q_init.reserve(q_init_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < q_init_d_0_max__; ++d_0__) {
                if (jacobian__)
                    q_init.push_back(in__.simplex_constrain(N_age, lp__));
                else
                    q_init.push_back(in__.simplex_constrain(N_age));
            }
            current_statement_begin__ = 215;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 220;
            validate_non_negative_index("alpha", "N_pop", N_pop);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha(N_pop);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 221;
            validate_non_negative_index("Rmax", "N_pop", N_pop);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rmax(N_pop);
            stan::math::initialize(Rmax, DUMMY_VAR__);
            stan::math::fill(Rmax, DUMMY_VAR__);
            current_statement_begin__ = 222;
            validate_non_negative_index("eta_year_R", "N_year_all", N_year_all);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_year_R(N_year_all);
            stan::math::initialize(eta_year_R, DUMMY_VAR__);
            stan::math::fill(eta_year_R, DUMMY_VAR__);
            current_statement_begin__ = 223;
            validate_non_negative_index("R_hat", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R_hat(N);
            stan::math::initialize(R_hat, DUMMY_VAR__);
            stan::math::fill(R_hat, DUMMY_VAR__);
            current_statement_begin__ = 224;
            validate_non_negative_index("R", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R(N);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 226;
            validate_non_negative_index("p_HOS_all", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_HOS_all(N);
            stan::math::initialize(p_HOS_all, DUMMY_VAR__);
            stan::math::fill(p_HOS_all, DUMMY_VAR__);
            current_statement_begin__ = 227;
            validate_non_negative_index("S_W", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_W(N);
            stan::math::initialize(S_W, DUMMY_VAR__);
            stan::math::fill(S_W, DUMMY_VAR__);
            current_statement_begin__ = 228;
            validate_non_negative_index("S_H", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_H(N);
            stan::math::initialize(S_H, DUMMY_VAR__);
            stan::math::fill(S_H, DUMMY_VAR__);
            current_statement_begin__ = 229;
            validate_non_negative_index("S", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S(N);
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            current_statement_begin__ = 230;
            validate_non_negative_index("B_rate_all", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rate_all(N);
            stan::math::initialize(B_rate_all, DUMMY_VAR__);
            stan::math::fill(B_rate_all, DUMMY_VAR__);
            current_statement_begin__ = 232;
            validate_non_negative_index("mu_alr_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> mu_alr_p((N_age - 1));
            stan::math::initialize(mu_alr_p, DUMMY_VAR__);
            stan::math::fill(mu_alr_p, DUMMY_VAR__);
            current_statement_begin__ = 233;
            validate_non_negative_index("mu_pop_alr_p", "N_pop", N_pop);
            validate_non_negative_index("mu_pop_alr_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu_pop_alr_p(N_pop, (N_age - 1));
            stan::math::initialize(mu_pop_alr_p, DUMMY_VAR__);
            stan::math::fill(mu_pop_alr_p, DUMMY_VAR__);
            current_statement_begin__ = 234;
            validate_non_negative_index("p", "N", N);
            validate_non_negative_index("p", "N_age", N_age);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> p(N, N_age);
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 235;
            validate_non_negative_index("q", "N", N);
            validate_non_negative_index("q", "N_age", N_age);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> q(N, N_age);
            stan::math::initialize(q, DUMMY_VAR__);
            stan::math::fill(q, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 239;
            validate_non_negative_index("L_alphaRmax", "2", 2);
            validate_non_negative_index("L_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_alphaRmax(2, 2);
            stan::math::initialize(L_alphaRmax, DUMMY_VAR__);
            stan::math::fill(L_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 240;
            validate_non_negative_index("zeta_alphaRmax", "N_pop", N_pop);
            validate_non_negative_index("zeta_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_alphaRmax(N_pop, 2);
            stan::math::initialize(zeta_alphaRmax, DUMMY_VAR__);
            stan::math::fill(zeta_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 241;
            validate_non_negative_index("eta_alphaRmax", "N_pop", N_pop);
            validate_non_negative_index("eta_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta_alphaRmax(N_pop, 2);
            stan::math::initialize(eta_alphaRmax, DUMMY_VAR__);
            stan::math::fill(eta_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 242;
            validate_non_negative_index("sigma_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_alphaRmax(2);
            stan::math::initialize(sigma_alphaRmax, DUMMY_VAR__);
            stan::math::fill(sigma_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 244;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 245;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        rho_alphaRmax, 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 246;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 247;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        stan::math::sqrt((1 - pow(rho_alphaRmax, 2))), 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 248;
            stan::model::assign(sigma_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        sigma_alpha, 
                        "assigning variable sigma_alphaRmax");
            current_statement_begin__ = 249;
            stan::model::assign(sigma_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        sigma_Rmax, 
                        "assigning variable sigma_alphaRmax");
            current_statement_begin__ = 250;
            stan::math::assign(zeta_alphaRmax, append_col(zeta_alpha, zeta_Rmax));
            current_statement_begin__ = 251;
            stan::math::assign(eta_alphaRmax, transpose(diag_pre_multiply(sigma_alphaRmax, multiply(L_alphaRmax, transpose(zeta_alphaRmax)))));
            current_statement_begin__ = 252;
            stan::math::assign(alpha, stan::math::exp(add(mu_alpha, stan::model::rvalue(eta_alphaRmax, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "eta_alphaRmax"))));
            current_statement_begin__ = 253;
            stan::math::assign(Rmax, stan::math::exp(add(mu_Rmax, stan::model::rvalue(eta_alphaRmax, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "eta_alphaRmax"))));
            }
            current_statement_begin__ = 257;
            stan::model::assign(eta_year_R, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        ((get_base1(zeta_year_R, 1, "zeta_year_R", 1) * sigma_year_R) / stan::math::sqrt((1 - pow(rho_R, 2)))), 
                        "assigning variable eta_year_R");
            current_statement_begin__ = 258;
            for (int i = 2; i <= N_year_all; ++i) {
                current_statement_begin__ = 259;
                stan::model::assign(eta_year_R, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((rho_R * get_base1(eta_year_R, (i - 1), "eta_year_R", 1)) + (get_base1(zeta_year_R, i, "zeta_year_R", 1) * sigma_year_R)), 
                            "assigning variable eta_year_R");
            }
            current_statement_begin__ = 261;
            stan::math::assign(eta_year_R, subtract(eta_year_R, mean(head(eta_year_R, N_year))));
            current_statement_begin__ = 264;
            stan::math::assign(p_HOS_all, rep_vector(0, N));
            current_statement_begin__ = 265;
            stan::model::assign(p_HOS_all, 
                        stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), 
                        p_HOS, 
                        "assigning variable p_HOS_all");
            current_statement_begin__ = 266;
            stan::math::assign(B_rate_all, rep_vector(0, N));
            current_statement_begin__ = 267;
            stan::model::assign(B_rate_all, 
                        stan::model::cons_list(stan::model::index_multi(which_B), stan::model::nil_index_list()), 
                        B_rate, 
                        "assigning variable B_rate_all");
            current_statement_begin__ = 270;
            stan::math::assign(mu_alr_p, to_row_vector(subtract(stan::math::log(head(mu_p, (N_age - 1))), stan::math::log(get_base1(mu_p, N_age, "mu_p", 1)))));
            current_statement_begin__ = 271;
            stan::math::assign(mu_pop_alr_p, add(rep_matrix(mu_alr_p, N_pop), transpose(diag_pre_multiply(sigma_pop_p, multiply(L_pop_p, transpose(zeta_pop_p))))));
            {
            current_statement_begin__ = 274;
            validate_non_negative_index("alr_p", "N", N);
            validate_non_negative_index("alr_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alr_p(N, (N_age - 1));
            stan::math::initialize(alr_p, DUMMY_VAR__);
            stan::math::fill(alr_p, DUMMY_VAR__);
            stan::math::assign(alr_p,add(stan::model::rvalue(mu_pop_alr_p, stan::model::cons_list(stan::model::index_multi(pop), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_pop_alr_p"), transpose(diag_pre_multiply(sigma_p, multiply(L_p, transpose(zeta_p))))));
            current_statement_begin__ = 275;
            validate_non_negative_index("exp_alr_p", "N", N);
            validate_non_negative_index("exp_alr_p", "N_age", N_age);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> exp_alr_p(N, N_age);
            stan::math::initialize(exp_alr_p, DUMMY_VAR__);
            stan::math::fill(exp_alr_p, DUMMY_VAR__);
            stan::math::assign(exp_alr_p,append_col(stan::math::exp(alr_p), ones_N));
            current_statement_begin__ = 276;
            stan::math::assign(p, diag_pre_multiply(elt_divide(ones_N, multiply(exp_alr_p, ones_N_age)), exp_alr_p));
            }
            current_statement_begin__ = 281;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 284;
                local_scalar_t__ alpha_i(DUMMY_VAR__);
                (void) alpha_i;  // dummy to suppress unused var warning
                stan::math::initialize(alpha_i, DUMMY_VAR__);
                stan::math::fill(alpha_i, DUMMY_VAR__);
                stan::math::assign(alpha_i,(get_base1(alpha, get_base1(pop, i, "pop", 1), "alpha", 1) * stan::math::exp(dot_product(get_base1(X_alpha, i, "X_alpha", 1), beta_alpha))));
                current_statement_begin__ = 285;
                local_scalar_t__ Rmax_i(DUMMY_VAR__);
                (void) Rmax_i;  // dummy to suppress unused var warning
                stan::math::initialize(Rmax_i, DUMMY_VAR__);
                stan::math::fill(Rmax_i, DUMMY_VAR__);
                stan::math::assign(Rmax_i,(get_base1(Rmax, get_base1(pop, i, "pop", 1), "Rmax", 1) * stan::math::exp(dot_product(get_base1(X_Rmax, i, "X_Rmax", 1), beta_Rmax))));
                current_statement_begin__ = 286;
                validate_non_negative_index("S_W_a", "N_age", N_age);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> S_W_a(N_age);
                stan::math::initialize(S_W_a, DUMMY_VAR__);
                stan::math::fill(S_W_a, DUMMY_VAR__);
                current_statement_begin__ = 287;
                int ii(0);
                (void) ii;  // dummy to suppress unused var warning
                stan::math::fill(ii, std::numeric_limits<int>::min());
                current_statement_begin__ = 289;
                int N_orphan_age(0);
                (void) N_orphan_age;  // dummy to suppress unused var warning
                stan::math::fill(N_orphan_age, std::numeric_limits<int>::min());
                stan::math::assign(N_orphan_age,std::max((N_age - std::max((get_base1(pop_year_indx, i, "pop_year_indx", 1) - min_age), 0)), N_age));
                current_statement_begin__ = 290;
                validate_non_negative_index("q_orphan", "N_orphan_age", N_orphan_age);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> q_orphan(N_orphan_age);
                stan::math::initialize(q_orphan, DUMMY_VAR__);
                stan::math::fill(q_orphan, DUMMY_VAR__);
                current_statement_begin__ = 293;
                if (as_bool(logical_lte(get_base1(pop_year_indx, i, "pop_year_indx", 1), max_age))) {
                    current_statement_begin__ = 295;
                    stan::math::assign(ii, (((get_base1(pop, i, "pop", 1) - 1) * max_age) + get_base1(pop_year_indx, i, "pop_year_indx", 1)));
                    current_statement_begin__ = 296;
                    stan::math::assign(q_orphan, append_row(sum(head(get_base1(q_init, ii, "q_init", 1), ((N_age - N_orphan_age) + 1))), tail(get_base1(q_init, ii, "q_init", 1), (N_orphan_age - 1))));
                }
                current_statement_begin__ = 300;
                for (int a = 1; a <= N_age; ++a) {
                    current_statement_begin__ = 302;
                    if (as_bool(logical_lt(get_base1(ages, a, "ages", 1), get_base1(pop_year_indx, i, "pop_year_indx", 1)))) {
                        current_statement_begin__ = 304;
                        stan::model::assign(S_W_a, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    (get_base1(R, (i - get_base1(ages, a, "ages", 1)), "R", 1) * get_base1(p, (i - get_base1(ages, a, "ages", 1)), a, "p", 1)), 
                                    "assigning variable S_W_a");
                    } else {
                        current_statement_begin__ = 307;
                        stan::model::assign(S_W_a, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    ((get_base1(S_init, ii, "S_init", 1) * (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))) * get_base1(q_orphan, (a - (N_age - N_orphan_age)), "q_orphan", 1)), 
                                    "assigning variable S_W_a");
                    }
                }
                current_statement_begin__ = 311;
                stan::model::assign(S_W_a, 
                            stan::model::cons_list(stan::model::index_min_max(2, N_age), stan::model::nil_index_list()), 
                            stan::model::deep_copy(multiply(multiply(stan::model::rvalue(S_W_a, stan::model::cons_list(stan::model::index_min_max(2, N_age), stan::model::nil_index_list()), "S_W_a"), (1 - get_base1(F_rate, i, "F_rate", 1))), (1 - get_base1(B_rate_all, i, "B_rate_all", 1)))), 
                            "assigning variable S_W_a");
                current_statement_begin__ = 312;
                stan::model::assign(S_W, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(S_W_a), 
                            "assigning variable S_W");
                current_statement_begin__ = 313;
                stan::model::assign(S_H, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(S_W, i, "S_W", 1) * get_base1(p_HOS_all, i, "p_HOS_all", 1)) / (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))), 
                            "assigning variable S_H");
                current_statement_begin__ = 314;
                stan::model::assign(S, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(S_W, i, "S_W", 1) + get_base1(S_H, i, "S_H", 1)), 
                            "assigning variable S");
                current_statement_begin__ = 315;
                stan::model::assign(q, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            divide(S_W_a, get_base1(S_W, i, "S_W", 1)), 
                            "assigning variable q");
                current_statement_begin__ = 318;
                stan::model::assign(R_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            SR(SR_fun, alpha_i, Rmax_i, get_base1(S, i, "S", 1), get_base1(A, i, "A", 1), pstream__), 
                            "assigning variable R_hat");
                current_statement_begin__ = 319;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(R_hat, i, "R_hat", 1) * stan::math::exp(((get_base1(eta_year_R, get_base1(year, i, "year", 1), "eta_year_R", 1) + dot_product(get_base1(X_R, i, "X_R", 1), beta_R)) + (sigma_R * get_base1(zeta_R, i, "zeta_R", 1))))), 
                            "assigning variable R");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 220;
            size_t alpha_j_1_max__ = N_pop;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "alpha", alpha, 0);
            current_statement_begin__ = 221;
            size_t Rmax_j_1_max__ = N_pop;
            for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Rmax(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Rmax" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rmax: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Rmax", Rmax, 0);
            current_statement_begin__ = 222;
            size_t eta_year_R_j_1_max__ = N_year_all;
            for (size_t j_1__ = 0; j_1__ < eta_year_R_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta_year_R(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta_year_R" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_year_R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 223;
            size_t R_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R_hat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R_hat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "R_hat", R_hat, 0);
            current_statement_begin__ = 224;
            size_t R_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "R", R, 0);
            current_statement_begin__ = 226;
            size_t p_HOS_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_HOS_all(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_HOS_all" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_HOS_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 227;
            size_t S_W_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S_W(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S_W" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_W: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "S_W", S_W, 0);
            current_statement_begin__ = 228;
            size_t S_H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S_H(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S_H" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_H: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 229;
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 230;
            size_t B_rate_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(B_rate_all(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: B_rate_all" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable B_rate_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "B_rate_all", B_rate_all, 0);
            check_less_or_equal(function__, "B_rate_all", B_rate_all, 1);
            current_statement_begin__ = 232;
            size_t mu_alr_p_j_1_max__ = (N_age - 1);
            for (size_t j_1__ = 0; j_1__ < mu_alr_p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_alr_p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_alr_p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_alr_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 233;
            size_t mu_pop_alr_p_j_1_max__ = N_pop;
            size_t mu_pop_alr_p_j_2_max__ = (N_age - 1);
            for (size_t j_1__ = 0; j_1__ < mu_pop_alr_p_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu_pop_alr_p_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu_pop_alr_p(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu_pop_alr_p" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_pop_alr_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 234;
            size_t p_j_1_max__ = N;
            size_t p_j_2_max__ = N_age;
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < p_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(p(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: p" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 235;
            size_t q_j_1_max__ = N;
            size_t q_j_2_max__ = N_age;
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < q_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(q(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: q" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable q: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "q", q, 0);
            check_less_or_equal(function__, "q", q, 1);
            // model body
            {
            current_statement_begin__ = 324;
            validate_non_negative_index("log_B_take", "N_B", N_B);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_B_take(N_B);
            stan::math::initialize(log_B_take, DUMMY_VAR__);
            stan::math::fill(log_B_take, DUMMY_VAR__);
            current_statement_begin__ = 329;
            lp_accum__.add(normal_log<propto__>(mu_alpha, 2, 5));
            current_statement_begin__ = 330;
            lp_accum__.add(normal_log<propto__>(beta_alpha, 0, 5));
            current_statement_begin__ = 331;
            lp_accum__.add(normal_log<propto__>(sigma_alpha, 0, 3));
            current_statement_begin__ = 332;
            lp_accum__.add(normal_log<propto__>(mu_Rmax, mu_mu_Rmax, sigma_mu_Rmax));
            current_statement_begin__ = 333;
            lp_accum__.add(normal_log<propto__>(beta_Rmax, 0, 5));
            current_statement_begin__ = 334;
            lp_accum__.add(normal_log<propto__>(sigma_Rmax, 0, 3));
            current_statement_begin__ = 335;
            lp_accum__.add(std_normal_log<propto__>(zeta_alpha));
            current_statement_begin__ = 336;
            lp_accum__.add(std_normal_log<propto__>(zeta_Rmax));
            current_statement_begin__ = 337;
            lp_accum__.add(normal_log<propto__>(beta_R, 0, 5));
            current_statement_begin__ = 338;
            lp_accum__.add(pexp_lpdf<propto__>(rho_R, 0, 0.85, 50, pstream__));
            current_statement_begin__ = 339;
            lp_accum__.add(std_normal_log<propto__>(zeta_year_R));
            current_statement_begin__ = 340;
            lp_accum__.add(normal_log<propto__>(sigma_year_R, 0, 3));
            current_statement_begin__ = 341;
            lp_accum__.add(normal_log<propto__>(sigma_R, 0, 3));
            current_statement_begin__ = 342;
            lp_accum__.add(std_normal_log<propto__>(zeta_R));
            current_statement_begin__ = 345;
            for (int i = 1; i <= (N_age - 1); ++i) {
                current_statement_begin__ = 347;
                lp_accum__.add(normal_log<propto__>(get_base1(sigma_pop_p, i, "sigma_pop_p", 1), 0, 2));
                current_statement_begin__ = 348;
                lp_accum__.add(normal_log<propto__>(get_base1(sigma_p, i, "sigma_p", 1), 0, 2));
            }
            current_statement_begin__ = 350;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_pop_p, 1));
            current_statement_begin__ = 351;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_p, 1));
            current_statement_begin__ = 354;
            lp_accum__.add(std_normal_log<propto__>(to_vector(zeta_pop_p)));
            current_statement_begin__ = 357;
            lp_accum__.add(std_normal_log<propto__>(to_vector(zeta_p)));
            current_statement_begin__ = 360;
            stan::math::assign(log_B_take, add(add(stan::math::log(stan::model::rvalue(S_W, stan::model::cons_list(stan::model::index_multi(which_B), stan::model::nil_index_list()), "S_W")), log1m(stan::model::rvalue(q, stan::model::cons_list(stan::model::index_multi(which_B), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "q"))), logit(B_rate)));
            current_statement_begin__ = 361;
            lp_accum__.add(lognormal_log<propto__>(B_take_obs, log_B_take, 0.05));
            current_statement_begin__ = 365;
            lp_accum__.add(lognormal_log<propto__>(S_init, mu_S_init, sigma_S_init));
            {
            current_statement_begin__ = 367;
            validate_non_negative_index("q_init_mat", "N_age", N_age);
            validate_non_negative_index("q_init_mat", "(max_age * N_pop)", (max_age * N_pop));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> q_init_mat(N_age, (max_age * N_pop));
            stan::math::initialize(q_init_mat, DUMMY_VAR__);
            stan::math::fill(q_init_mat, DUMMY_VAR__);
            current_statement_begin__ = 369;
            for (int j = 1; j <= size(q_init); ++j) {
                current_statement_begin__ = 369;
                stan::model::assign(q_init_mat, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            get_base1(q_init, j, "q_init", 1), 
                            "assigning variable q_init_mat");
            }
            current_statement_begin__ = 370;
            lp_accum__.add(sum(elt_multiply(subtract(mu_q_init, 1), stan::math::log(q_init_mat))));
            }
            current_statement_begin__ = 374;
            lp_accum__.add(normal_log<propto__>(tau, 0, 1));
            current_statement_begin__ = 379;
            lp_accum__.add(lognormal_log<propto__>(stan::model::rvalue(S_obs, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S_obs"), stan::math::log(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S")), tau));
            current_statement_begin__ = 380;
            lp_accum__.add(binomial_log<propto__>(n_H_obs, n_HW_obs, p_HOS));
            current_statement_begin__ = 381;
            lp_accum__.add(sum(elt_multiply(n_age_obs, stan::math::log(q))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu_alpha");
        names__.push_back("beta_alpha");
        names__.push_back("sigma_alpha");
        names__.push_back("zeta_alpha");
        names__.push_back("mu_Rmax");
        names__.push_back("beta_Rmax");
        names__.push_back("sigma_Rmax");
        names__.push_back("zeta_Rmax");
        names__.push_back("rho_alphaRmax");
        names__.push_back("beta_R");
        names__.push_back("rho_R");
        names__.push_back("sigma_year_R");
        names__.push_back("zeta_year_R");
        names__.push_back("sigma_R");
        names__.push_back("zeta_R");
        names__.push_back("mu_p");
        names__.push_back("sigma_pop_p");
        names__.push_back("L_pop_p");
        names__.push_back("zeta_pop_p");
        names__.push_back("sigma_p");
        names__.push_back("L_p");
        names__.push_back("zeta_p");
        names__.push_back("p_HOS");
        names__.push_back("B_rate");
        names__.push_back("S_init");
        names__.push_back("q_init");
        names__.push_back("tau");
        names__.push_back("alpha");
        names__.push_back("Rmax");
        names__.push_back("eta_year_R");
        names__.push_back("R_hat");
        names__.push_back("R");
        names__.push_back("p_HOS_all");
        names__.push_back("S_W");
        names__.push_back("S_H");
        names__.push_back("S");
        names__.push_back("B_rate_all");
        names__.push_back("mu_alr_p");
        names__.push_back("mu_pop_alr_p");
        names__.push_back("p");
        names__.push_back("q");
        names__.push_back("R_pop_p");
        names__.push_back("R_p");
        names__.push_back("S_W_fwd");
        names__.push_back("S_H_fwd");
        names__.push_back("S_fwd");
        names__.push_back("p_fwd");
        names__.push_back("q_fwd");
        names__.push_back("R_hat_fwd");
        names__.push_back("R_fwd");
        names__.push_back("LL_S_obs");
        names__.push_back("LL_n_H_obs");
        names__.push_back("LL_n_age_obs");
        names__.push_back("LL");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_X_alpha);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_X_Rmax);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_X_R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_year_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_B);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((max_age * N_pop));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((max_age * N_pop));
        dims__.push_back(N_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_year_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_age - 1));
        dims__.push_back((N_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dims__.push_back(N_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dims__.push_back(N_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_fwd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_IPM_SS_pp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu_alpha = in__.scalar_constrain();
        vars__.push_back(mu_alpha);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_alpha = in__.vector_constrain(N_X_alpha);
        size_t beta_alpha_j_1_max__ = N_X_alpha;
        for (size_t j_1__ = 0; j_1__ < beta_alpha_j_1_max__; ++j_1__) {
            vars__.push_back(beta_alpha(j_1__));
        }
        double sigma_alpha = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_alpha);
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_alpha = in__.vector_constrain(N_pop);
        size_t zeta_alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_alpha_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_alpha(j_1__));
        }
        double mu_Rmax = in__.scalar_constrain();
        vars__.push_back(mu_Rmax);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_Rmax = in__.vector_constrain(N_X_Rmax);
        size_t beta_Rmax_j_1_max__ = N_X_Rmax;
        for (size_t j_1__ = 0; j_1__ < beta_Rmax_j_1_max__; ++j_1__) {
            vars__.push_back(beta_Rmax(j_1__));
        }
        double sigma_Rmax = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_Rmax);
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_Rmax = in__.vector_constrain(N_pop);
        size_t zeta_Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_Rmax_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_Rmax(j_1__));
        }
        double rho_alphaRmax = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_alphaRmax);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_R = in__.vector_constrain(N_X_R);
        size_t beta_R_j_1_max__ = N_X_R;
        for (size_t j_1__ = 0; j_1__ < beta_R_j_1_max__; ++j_1__) {
            vars__.push_back(beta_R(j_1__));
        }
        double rho_R = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_R);
        double sigma_year_R = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_year_R);
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_year_R = in__.vector_constrain(N_year_all);
        size_t zeta_year_R_j_1_max__ = N_year_all;
        for (size_t j_1__ = 0; j_1__ < zeta_year_R_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_year_R(j_1__));
        }
        double sigma_R = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_R);
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_R = in__.vector_constrain(N);
        size_t zeta_R_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_R_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_R(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_p = in__.simplex_constrain(N_age);
        size_t mu_p_j_1_max__ = N_age;
        for (size_t j_1__ = 0; j_1__ < mu_p_j_1_max__; ++j_1__) {
            vars__.push_back(mu_p(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_pop_p = in__.vector_lb_constrain(0, (N_age - 1));
        size_t sigma_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_pop_p_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_pop_p(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_pop_p = in__.cholesky_factor_corr_constrain((N_age - 1));
        size_t L_pop_p_j_2_max__ = (N_age - 1);
        size_t L_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < L_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_pop_p_j_1_max__; ++j_1__) {
                vars__.push_back(L_pop_p(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_pop_p = in__.matrix_constrain(N_pop, (N_age - 1));
        size_t zeta_pop_p_j_2_max__ = (N_age - 1);
        size_t zeta_pop_p_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < zeta_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_pop_p_j_1_max__; ++j_1__) {
                vars__.push_back(zeta_pop_p(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_p = in__.vector_lb_constrain(0, (N_age - 1));
        size_t sigma_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_p_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_p(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_p = in__.cholesky_factor_corr_constrain((N_age - 1));
        size_t L_p_j_2_max__ = (N_age - 1);
        size_t L_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < L_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_j_1_max__; ++j_1__) {
                vars__.push_back(L_p(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_p = in__.matrix_constrain(N, (N_age - 1));
        size_t zeta_p_j_2_max__ = (N_age - 1);
        size_t zeta_p_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_j_1_max__; ++j_1__) {
                vars__.push_back(zeta_p(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p_HOS = in__.vector_lub_constrain(0, 1, N_H);
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            vars__.push_back(p_HOS(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> B_rate = in__.vector_lub_constrain(0, 1, N_B);
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            vars__.push_back(B_rate(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_init = in__.vector_lb_constrain(0, (max_age * N_pop));
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            vars__.push_back(S_init(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > q_init;
        size_t q_init_d_0_max__ = (max_age * N_pop);
        q_init.reserve(q_init_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < q_init_d_0_max__; ++d_0__) {
            q_init.push_back(in__.simplex_constrain(N_age));
        }
        size_t q_init_j_1_max__ = N_age;
        size_t q_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_init_k_0_max__; ++k_0__) {
                vars__.push_back(q_init[k_0__](j_1__));
            }
        }
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 220;
            validate_non_negative_index("alpha", "N_pop", N_pop);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(N_pop);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 221;
            validate_non_negative_index("Rmax", "N_pop", N_pop);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Rmax(N_pop);
            stan::math::initialize(Rmax, DUMMY_VAR__);
            stan::math::fill(Rmax, DUMMY_VAR__);
            current_statement_begin__ = 222;
            validate_non_negative_index("eta_year_R", "N_year_all", N_year_all);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta_year_R(N_year_all);
            stan::math::initialize(eta_year_R, DUMMY_VAR__);
            stan::math::fill(eta_year_R, DUMMY_VAR__);
            current_statement_begin__ = 223;
            validate_non_negative_index("R_hat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R_hat(N);
            stan::math::initialize(R_hat, DUMMY_VAR__);
            stan::math::fill(R_hat, DUMMY_VAR__);
            current_statement_begin__ = 224;
            validate_non_negative_index("R", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R(N);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 226;
            validate_non_negative_index("p_HOS_all", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_HOS_all(N);
            stan::math::initialize(p_HOS_all, DUMMY_VAR__);
            stan::math::fill(p_HOS_all, DUMMY_VAR__);
            current_statement_begin__ = 227;
            validate_non_negative_index("S_W", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_W(N);
            stan::math::initialize(S_W, DUMMY_VAR__);
            stan::math::fill(S_W, DUMMY_VAR__);
            current_statement_begin__ = 228;
            validate_non_negative_index("S_H", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_H(N);
            stan::math::initialize(S_H, DUMMY_VAR__);
            stan::math::fill(S_H, DUMMY_VAR__);
            current_statement_begin__ = 229;
            validate_non_negative_index("S", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S(N);
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            current_statement_begin__ = 230;
            validate_non_negative_index("B_rate_all", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> B_rate_all(N);
            stan::math::initialize(B_rate_all, DUMMY_VAR__);
            stan::math::fill(B_rate_all, DUMMY_VAR__);
            current_statement_begin__ = 232;
            validate_non_negative_index("mu_alr_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<double, 1, Eigen::Dynamic> mu_alr_p((N_age - 1));
            stan::math::initialize(mu_alr_p, DUMMY_VAR__);
            stan::math::fill(mu_alr_p, DUMMY_VAR__);
            current_statement_begin__ = 233;
            validate_non_negative_index("mu_pop_alr_p", "N_pop", N_pop);
            validate_non_negative_index("mu_pop_alr_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_pop_alr_p(N_pop, (N_age - 1));
            stan::math::initialize(mu_pop_alr_p, DUMMY_VAR__);
            stan::math::fill(mu_pop_alr_p, DUMMY_VAR__);
            current_statement_begin__ = 234;
            validate_non_negative_index("p", "N", N);
            validate_non_negative_index("p", "N_age", N_age);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> p(N, N_age);
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 235;
            validate_non_negative_index("q", "N", N);
            validate_non_negative_index("q", "N_age", N_age);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> q(N, N_age);
            stan::math::initialize(q, DUMMY_VAR__);
            stan::math::fill(q, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 239;
            validate_non_negative_index("L_alphaRmax", "2", 2);
            validate_non_negative_index("L_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_alphaRmax(2, 2);
            stan::math::initialize(L_alphaRmax, DUMMY_VAR__);
            stan::math::fill(L_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 240;
            validate_non_negative_index("zeta_alphaRmax", "N_pop", N_pop);
            validate_non_negative_index("zeta_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_alphaRmax(N_pop, 2);
            stan::math::initialize(zeta_alphaRmax, DUMMY_VAR__);
            stan::math::fill(zeta_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 241;
            validate_non_negative_index("eta_alphaRmax", "N_pop", N_pop);
            validate_non_negative_index("eta_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta_alphaRmax(N_pop, 2);
            stan::math::initialize(eta_alphaRmax, DUMMY_VAR__);
            stan::math::fill(eta_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 242;
            validate_non_negative_index("sigma_alphaRmax", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_alphaRmax(2);
            stan::math::initialize(sigma_alphaRmax, DUMMY_VAR__);
            stan::math::fill(sigma_alphaRmax, DUMMY_VAR__);
            current_statement_begin__ = 244;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 245;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        rho_alphaRmax, 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 246;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 247;
            stan::model::assign(L_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        stan::math::sqrt((1 - pow(rho_alphaRmax, 2))), 
                        "assigning variable L_alphaRmax");
            current_statement_begin__ = 248;
            stan::model::assign(sigma_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        sigma_alpha, 
                        "assigning variable sigma_alphaRmax");
            current_statement_begin__ = 249;
            stan::model::assign(sigma_alphaRmax, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        sigma_Rmax, 
                        "assigning variable sigma_alphaRmax");
            current_statement_begin__ = 250;
            stan::math::assign(zeta_alphaRmax, append_col(zeta_alpha, zeta_Rmax));
            current_statement_begin__ = 251;
            stan::math::assign(eta_alphaRmax, transpose(diag_pre_multiply(sigma_alphaRmax, multiply(L_alphaRmax, transpose(zeta_alphaRmax)))));
            current_statement_begin__ = 252;
            stan::math::assign(alpha, stan::math::exp(add(mu_alpha, stan::model::rvalue(eta_alphaRmax, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "eta_alphaRmax"))));
            current_statement_begin__ = 253;
            stan::math::assign(Rmax, stan::math::exp(add(mu_Rmax, stan::model::rvalue(eta_alphaRmax, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "eta_alphaRmax"))));
            }
            current_statement_begin__ = 257;
            stan::model::assign(eta_year_R, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        ((get_base1(zeta_year_R, 1, "zeta_year_R", 1) * sigma_year_R) / stan::math::sqrt((1 - pow(rho_R, 2)))), 
                        "assigning variable eta_year_R");
            current_statement_begin__ = 258;
            for (int i = 2; i <= N_year_all; ++i) {
                current_statement_begin__ = 259;
                stan::model::assign(eta_year_R, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((rho_R * get_base1(eta_year_R, (i - 1), "eta_year_R", 1)) + (get_base1(zeta_year_R, i, "zeta_year_R", 1) * sigma_year_R)), 
                            "assigning variable eta_year_R");
            }
            current_statement_begin__ = 261;
            stan::math::assign(eta_year_R, subtract(eta_year_R, mean(head(eta_year_R, N_year))));
            current_statement_begin__ = 264;
            stan::math::assign(p_HOS_all, rep_vector(0, N));
            current_statement_begin__ = 265;
            stan::model::assign(p_HOS_all, 
                        stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), 
                        p_HOS, 
                        "assigning variable p_HOS_all");
            current_statement_begin__ = 266;
            stan::math::assign(B_rate_all, rep_vector(0, N));
            current_statement_begin__ = 267;
            stan::model::assign(B_rate_all, 
                        stan::model::cons_list(stan::model::index_multi(which_B), stan::model::nil_index_list()), 
                        B_rate, 
                        "assigning variable B_rate_all");
            current_statement_begin__ = 270;
            stan::math::assign(mu_alr_p, to_row_vector(subtract(stan::math::log(head(mu_p, (N_age - 1))), stan::math::log(get_base1(mu_p, N_age, "mu_p", 1)))));
            current_statement_begin__ = 271;
            stan::math::assign(mu_pop_alr_p, add(rep_matrix(mu_alr_p, N_pop), transpose(diag_pre_multiply(sigma_pop_p, multiply(L_pop_p, transpose(zeta_pop_p))))));
            {
            current_statement_begin__ = 274;
            validate_non_negative_index("alr_p", "N", N);
            validate_non_negative_index("alr_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alr_p(N, (N_age - 1));
            stan::math::initialize(alr_p, DUMMY_VAR__);
            stan::math::fill(alr_p, DUMMY_VAR__);
            stan::math::assign(alr_p,add(stan::model::rvalue(mu_pop_alr_p, stan::model::cons_list(stan::model::index_multi(pop), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_pop_alr_p"), transpose(diag_pre_multiply(sigma_p, multiply(L_p, transpose(zeta_p))))));
            current_statement_begin__ = 275;
            validate_non_negative_index("exp_alr_p", "N", N);
            validate_non_negative_index("exp_alr_p", "N_age", N_age);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> exp_alr_p(N, N_age);
            stan::math::initialize(exp_alr_p, DUMMY_VAR__);
            stan::math::fill(exp_alr_p, DUMMY_VAR__);
            stan::math::assign(exp_alr_p,append_col(stan::math::exp(alr_p), ones_N));
            current_statement_begin__ = 276;
            stan::math::assign(p, diag_pre_multiply(elt_divide(ones_N, multiply(exp_alr_p, ones_N_age)), exp_alr_p));
            }
            current_statement_begin__ = 281;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 284;
                local_scalar_t__ alpha_i(DUMMY_VAR__);
                (void) alpha_i;  // dummy to suppress unused var warning
                stan::math::initialize(alpha_i, DUMMY_VAR__);
                stan::math::fill(alpha_i, DUMMY_VAR__);
                stan::math::assign(alpha_i,(get_base1(alpha, get_base1(pop, i, "pop", 1), "alpha", 1) * stan::math::exp(dot_product(get_base1(X_alpha, i, "X_alpha", 1), beta_alpha))));
                current_statement_begin__ = 285;
                local_scalar_t__ Rmax_i(DUMMY_VAR__);
                (void) Rmax_i;  // dummy to suppress unused var warning
                stan::math::initialize(Rmax_i, DUMMY_VAR__);
                stan::math::fill(Rmax_i, DUMMY_VAR__);
                stan::math::assign(Rmax_i,(get_base1(Rmax, get_base1(pop, i, "pop", 1), "Rmax", 1) * stan::math::exp(dot_product(get_base1(X_Rmax, i, "X_Rmax", 1), beta_Rmax))));
                current_statement_begin__ = 286;
                validate_non_negative_index("S_W_a", "N_age", N_age);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> S_W_a(N_age);
                stan::math::initialize(S_W_a, DUMMY_VAR__);
                stan::math::fill(S_W_a, DUMMY_VAR__);
                current_statement_begin__ = 287;
                int ii(0);
                (void) ii;  // dummy to suppress unused var warning
                stan::math::fill(ii, std::numeric_limits<int>::min());
                current_statement_begin__ = 289;
                int N_orphan_age(0);
                (void) N_orphan_age;  // dummy to suppress unused var warning
                stan::math::fill(N_orphan_age, std::numeric_limits<int>::min());
                stan::math::assign(N_orphan_age,std::max((N_age - std::max((get_base1(pop_year_indx, i, "pop_year_indx", 1) - min_age), 0)), N_age));
                current_statement_begin__ = 290;
                validate_non_negative_index("q_orphan", "N_orphan_age", N_orphan_age);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> q_orphan(N_orphan_age);
                stan::math::initialize(q_orphan, DUMMY_VAR__);
                stan::math::fill(q_orphan, DUMMY_VAR__);
                current_statement_begin__ = 293;
                if (as_bool(logical_lte(get_base1(pop_year_indx, i, "pop_year_indx", 1), max_age))) {
                    current_statement_begin__ = 295;
                    stan::math::assign(ii, (((get_base1(pop, i, "pop", 1) - 1) * max_age) + get_base1(pop_year_indx, i, "pop_year_indx", 1)));
                    current_statement_begin__ = 296;
                    stan::math::assign(q_orphan, append_row(sum(head(get_base1(q_init, ii, "q_init", 1), ((N_age - N_orphan_age) + 1))), tail(get_base1(q_init, ii, "q_init", 1), (N_orphan_age - 1))));
                }
                current_statement_begin__ = 300;
                for (int a = 1; a <= N_age; ++a) {
                    current_statement_begin__ = 302;
                    if (as_bool(logical_lt(get_base1(ages, a, "ages", 1), get_base1(pop_year_indx, i, "pop_year_indx", 1)))) {
                        current_statement_begin__ = 304;
                        stan::model::assign(S_W_a, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    (get_base1(R, (i - get_base1(ages, a, "ages", 1)), "R", 1) * get_base1(p, (i - get_base1(ages, a, "ages", 1)), a, "p", 1)), 
                                    "assigning variable S_W_a");
                    } else {
                        current_statement_begin__ = 307;
                        stan::model::assign(S_W_a, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    ((get_base1(S_init, ii, "S_init", 1) * (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))) * get_base1(q_orphan, (a - (N_age - N_orphan_age)), "q_orphan", 1)), 
                                    "assigning variable S_W_a");
                    }
                }
                current_statement_begin__ = 311;
                stan::model::assign(S_W_a, 
                            stan::model::cons_list(stan::model::index_min_max(2, N_age), stan::model::nil_index_list()), 
                            stan::model::deep_copy(multiply(multiply(stan::model::rvalue(S_W_a, stan::model::cons_list(stan::model::index_min_max(2, N_age), stan::model::nil_index_list()), "S_W_a"), (1 - get_base1(F_rate, i, "F_rate", 1))), (1 - get_base1(B_rate_all, i, "B_rate_all", 1)))), 
                            "assigning variable S_W_a");
                current_statement_begin__ = 312;
                stan::model::assign(S_W, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(S_W_a), 
                            "assigning variable S_W");
                current_statement_begin__ = 313;
                stan::model::assign(S_H, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(S_W, i, "S_W", 1) * get_base1(p_HOS_all, i, "p_HOS_all", 1)) / (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))), 
                            "assigning variable S_H");
                current_statement_begin__ = 314;
                stan::model::assign(S, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(S_W, i, "S_W", 1) + get_base1(S_H, i, "S_H", 1)), 
                            "assigning variable S");
                current_statement_begin__ = 315;
                stan::model::assign(q, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            divide(S_W_a, get_base1(S_W, i, "S_W", 1)), 
                            "assigning variable q");
                current_statement_begin__ = 318;
                stan::model::assign(R_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            SR(SR_fun, alpha_i, Rmax_i, get_base1(S, i, "S", 1), get_base1(A, i, "A", 1), pstream__), 
                            "assigning variable R_hat");
                current_statement_begin__ = 319;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(R_hat, i, "R_hat", 1) * stan::math::exp(((get_base1(eta_year_R, get_base1(year, i, "year", 1), "eta_year_R", 1) + dot_product(get_base1(X_R, i, "X_R", 1), beta_R)) + (sigma_R * get_base1(zeta_R, i, "zeta_R", 1))))), 
                            "assigning variable R");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 220;
            check_greater_or_equal(function__, "alpha", alpha, 0);
            current_statement_begin__ = 221;
            check_greater_or_equal(function__, "Rmax", Rmax, 0);
            current_statement_begin__ = 223;
            check_greater_or_equal(function__, "R_hat", R_hat, 0);
            current_statement_begin__ = 224;
            check_greater_or_equal(function__, "R", R, 0);
            current_statement_begin__ = 227;
            check_greater_or_equal(function__, "S_W", S_W, 0);
            current_statement_begin__ = 229;
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 230;
            check_greater_or_equal(function__, "B_rate_all", B_rate_all, 0);
            check_less_or_equal(function__, "B_rate_all", B_rate_all, 1);
            current_statement_begin__ = 234;
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 235;
            check_greater_or_equal(function__, "q", q, 0);
            check_less_or_equal(function__, "q", q, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_j_1_max__ = N_pop;
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
                size_t Rmax_j_1_max__ = N_pop;
                for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
                    vars__.push_back(Rmax(j_1__));
                }
                size_t eta_year_R_j_1_max__ = N_year_all;
                for (size_t j_1__ = 0; j_1__ < eta_year_R_j_1_max__; ++j_1__) {
                    vars__.push_back(eta_year_R(j_1__));
                }
                size_t R_hat_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                    vars__.push_back(R_hat(j_1__));
                }
                size_t R_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    vars__.push_back(R(j_1__));
                }
                size_t p_HOS_all_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                    vars__.push_back(p_HOS_all(j_1__));
                }
                size_t S_W_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                    vars__.push_back(S_W(j_1__));
                }
                size_t S_H_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                    vars__.push_back(S_H(j_1__));
                }
                size_t S_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    vars__.push_back(S(j_1__));
                }
                size_t B_rate_all_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                    vars__.push_back(B_rate_all(j_1__));
                }
                size_t mu_alr_p_j_1_max__ = (N_age - 1);
                for (size_t j_1__ = 0; j_1__ < mu_alr_p_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_alr_p(j_1__));
                }
                size_t mu_pop_alr_p_j_2_max__ = (N_age - 1);
                size_t mu_pop_alr_p_j_1_max__ = N_pop;
                for (size_t j_2__ = 0; j_2__ < mu_pop_alr_p_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu_pop_alr_p_j_1_max__; ++j_1__) {
                        vars__.push_back(mu_pop_alr_p(j_1__, j_2__));
                    }
                }
                size_t p_j_2_max__ = N_age;
                size_t p_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < p_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                        vars__.push_back(p(j_1__, j_2__));
                    }
                }
                size_t q_j_2_max__ = N_age;
                size_t q_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < q_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                        vars__.push_back(q(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 386;
            validate_non_negative_index("R_pop_p", "(N_age - 1)", (N_age - 1));
            validate_non_negative_index("R_pop_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> R_pop_p((N_age - 1), (N_age - 1));
            stan::math::initialize(R_pop_p, DUMMY_VAR__);
            stan::math::fill(R_pop_p, DUMMY_VAR__);
            current_statement_begin__ = 387;
            validate_non_negative_index("R_p", "(N_age - 1)", (N_age - 1));
            validate_non_negative_index("R_p", "(N_age - 1)", (N_age - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> R_p((N_age - 1), (N_age - 1));
            stan::math::initialize(R_p, DUMMY_VAR__);
            stan::math::fill(R_p, DUMMY_VAR__);
            current_statement_begin__ = 388;
            validate_non_negative_index("S_W_fwd", "N_fwd", N_fwd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_W_fwd(N_fwd);
            stan::math::initialize(S_W_fwd, DUMMY_VAR__);
            stan::math::fill(S_W_fwd, DUMMY_VAR__);
            current_statement_begin__ = 389;
            validate_non_negative_index("S_H_fwd", "N_fwd", N_fwd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_H_fwd(N_fwd);
            stan::math::initialize(S_H_fwd, DUMMY_VAR__);
            stan::math::fill(S_H_fwd, DUMMY_VAR__);
            current_statement_begin__ = 390;
            validate_non_negative_index("S_fwd", "N_fwd", N_fwd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_fwd(N_fwd);
            stan::math::initialize(S_fwd, DUMMY_VAR__);
            stan::math::fill(S_fwd, DUMMY_VAR__);
            current_statement_begin__ = 391;
            validate_non_negative_index("p_fwd", "N_fwd", N_fwd);
            validate_non_negative_index("p_fwd", "N_age", N_age);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> p_fwd(N_fwd, N_age);
            stan::math::initialize(p_fwd, DUMMY_VAR__);
            stan::math::fill(p_fwd, DUMMY_VAR__);
            current_statement_begin__ = 392;
            validate_non_negative_index("q_fwd", "N_fwd", N_fwd);
            validate_non_negative_index("q_fwd", "N_age", N_age);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> q_fwd(N_fwd, N_age);
            stan::math::initialize(q_fwd, DUMMY_VAR__);
            stan::math::fill(q_fwd, DUMMY_VAR__);
            current_statement_begin__ = 393;
            validate_non_negative_index("R_hat_fwd", "N_fwd", N_fwd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R_hat_fwd(N_fwd);
            stan::math::initialize(R_hat_fwd, DUMMY_VAR__);
            stan::math::fill(R_hat_fwd, DUMMY_VAR__);
            current_statement_begin__ = 394;
            validate_non_negative_index("R_fwd", "N_fwd", N_fwd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R_fwd(N_fwd);
            stan::math::initialize(R_fwd, DUMMY_VAR__);
            stan::math::fill(R_fwd, DUMMY_VAR__);
            current_statement_begin__ = 395;
            validate_non_negative_index("LL_S_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_S_obs(N);
            stan::math::initialize(LL_S_obs, DUMMY_VAR__);
            stan::math::fill(LL_S_obs, DUMMY_VAR__);
            current_statement_begin__ = 396;
            validate_non_negative_index("LL_n_H_obs", "N_H", N_H);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_n_H_obs(N_H);
            stan::math::initialize(LL_n_H_obs, DUMMY_VAR__);
            stan::math::fill(LL_n_H_obs, DUMMY_VAR__);
            current_statement_begin__ = 397;
            validate_non_negative_index("LL_n_age_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_n_age_obs(N);
            stan::math::initialize(LL_n_age_obs, DUMMY_VAR__);
            stan::math::fill(LL_n_age_obs, DUMMY_VAR__);
            current_statement_begin__ = 398;
            validate_non_negative_index("LL", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL(N);
            stan::math::initialize(LL, DUMMY_VAR__);
            stan::math::fill(LL, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 400;
            stan::math::assign(R_pop_p, multiply_lower_tri_self_transpose(L_pop_p));
            current_statement_begin__ = 401;
            stan::math::assign(R_p, multiply_lower_tri_self_transpose(L_p));
            current_statement_begin__ = 406;
            for (int i = 1; i <= N_fwd; ++i) {
                {
                current_statement_begin__ = 408;
                validate_non_negative_index("alr_p_fwd", "(N_age - 1)", (N_age - 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alr_p_fwd((N_age - 1));
                stan::math::initialize(alr_p_fwd, DUMMY_VAR__);
                stan::math::fill(alr_p_fwd, DUMMY_VAR__);
                current_statement_begin__ = 409;
                validate_non_negative_index("S_W_a_fwd", "N_age", N_age);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> S_W_a_fwd(N_age);
                stan::math::initialize(S_W_a_fwd, DUMMY_VAR__);
                stan::math::fill(S_W_a_fwd, DUMMY_VAR__);
                current_statement_begin__ = 412;
                stan::math::assign(alr_p_fwd, multi_normal_cholesky_rng(to_vector(stan::model::rvalue(mu_pop_alr_p, stan::model::cons_list(stan::model::index_uni(get_base1(pop_fwd, i, "pop_fwd", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_pop_alr_p")), L_p, base_rng__));
                current_statement_begin__ = 413;
                stan::model::assign(p_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(softmax(append_row(alr_p_fwd, 0))), 
                            "assigning variable p_fwd");
                current_statement_begin__ = 415;
                for (int a = 1; a <= N_age; ++a) {
                    current_statement_begin__ = 417;
                    if (as_bool(logical_neq(get_base1(get_base1(fwd_init_indx, i, "fwd_init_indx", 1), a, "fwd_init_indx", 2), 0))) {
                        current_statement_begin__ = 420;
                        stan::model::assign(S_W_a_fwd, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    (get_base1(R, get_base1(get_base1(fwd_init_indx, i, "fwd_init_indx", 1), a, "fwd_init_indx", 2), "R", 1) * get_base1(p, get_base1(get_base1(fwd_init_indx, i, "fwd_init_indx", 1), a, "fwd_init_indx", 2), a, "p", 1)), 
                                    "assigning variable S_W_a_fwd");
                    } else {
                        current_statement_begin__ = 424;
                        stan::model::assign(S_W_a_fwd, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    (get_base1(R_fwd, (i - get_base1(ages, a, "ages", 1)), "R_fwd", 1) * get_base1(p_fwd, (i - get_base1(ages, a, "ages", 1)), a, "p_fwd", 1)), 
                                    "assigning variable S_W_a_fwd");
                    }
                }
                current_statement_begin__ = 428;
                for (int a = 2; a <= N_age; ++a) {
                    current_statement_begin__ = 429;
                    stan::model::assign(S_W_a_fwd, 
                                stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                ((get_base1(S_W_a_fwd, a, "S_W_a_fwd", 1) * (1 - get_base1(F_rate_fwd, i, "F_rate_fwd", 1))) * (1 - get_base1(B_rate_fwd, i, "B_rate_fwd", 1))), 
                                "assigning variable S_W_a_fwd");
                }
                current_statement_begin__ = 431;
                stan::model::assign(S_W_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(S_W_a_fwd), 
                            "assigning variable S_W_fwd");
                current_statement_begin__ = 432;
                stan::model::assign(S_H_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(S_W_fwd, i, "S_W_fwd", 1) * get_base1(p_HOS_fwd, i, "p_HOS_fwd", 1)) / (1 - get_base1(p_HOS_fwd, i, "p_HOS_fwd", 1))), 
                            "assigning variable S_H_fwd");
                current_statement_begin__ = 433;
                stan::model::assign(q_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            divide(S_W_a_fwd, get_base1(S_W_fwd, i, "S_W_fwd", 1)), 
                            "assigning variable q_fwd");
                current_statement_begin__ = 434;
                stan::model::assign(S_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(S_W_fwd, i, "S_W_fwd", 1) + get_base1(S_H_fwd, i, "S_H_fwd", 1)), 
                            "assigning variable S_fwd");
                current_statement_begin__ = 435;
                stan::model::assign(R_hat_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            SR(SR_fun, get_base1(alpha, get_base1(pop_fwd, i, "pop_fwd", 1), "alpha", 1), get_base1(Rmax, get_base1(pop_fwd, i, "pop_fwd", 1), "Rmax", 1), get_base1(S_fwd, i, "S_fwd", 1), get_base1(A_fwd, i, "A_fwd", 1), pstream__), 
                            "assigning variable R_hat_fwd");
                current_statement_begin__ = 436;
                stan::model::assign(R_fwd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            lognormal_rng((stan::math::log(get_base1(R_hat_fwd, i, "R_hat_fwd", 1)) + get_base1(eta_year_R, get_base1(year_fwd, i, "year_fwd", 1), "eta_year_R", 1)), sigma_R, base_rng__), 
                            "assigning variable R_fwd");
                }
            }
            current_statement_begin__ = 439;
            stan::math::assign(LL_S_obs, rep_vector(0, N));
            current_statement_begin__ = 440;
            for (int i = 1; i <= N_S_obs; ++i) {
                current_statement_begin__ = 441;
                stan::model::assign(LL_S_obs, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(which_S_obs, i, "which_S_obs", 1)), stan::model::nil_index_list()), 
                            lognormal_log(get_base1(S_obs, get_base1(which_S_obs, i, "which_S_obs", 1), "S_obs", 1), stan::math::log(get_base1(S, get_base1(which_S_obs, i, "which_S_obs", 1), "S", 1)), tau), 
                            "assigning variable LL_S_obs");
            }
            current_statement_begin__ = 442;
            stan::math::assign(LL_n_age_obs, multiply(elt_multiply(n_age_obs, stan::math::log(q)), rep_vector(1, N_age)));
            current_statement_begin__ = 443;
            stan::math::assign(LL_n_H_obs, rep_vector(0, N_H));
            current_statement_begin__ = 444;
            for (int i = 1; i <= N_H; ++i) {
                current_statement_begin__ = 445;
                stan::model::assign(LL_n_H_obs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            binomial_log(get_base1(n_H_obs, i, "n_H_obs", 1), get_base1(n_HW_obs, i, "n_HW_obs", 1), get_base1(p_HOS, i, "p_HOS", 1)), 
                            "assigning variable LL_n_H_obs");
            }
            current_statement_begin__ = 446;
            stan::math::assign(LL, add(LL_S_obs, LL_n_age_obs));
            current_statement_begin__ = 447;
            stan::model::assign(LL, 
                        stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), 
                        stan::model::deep_copy(add(stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), "LL"), LL_n_H_obs)), 
                        "assigning variable LL");
            // validate, write generated quantities
            current_statement_begin__ = 386;
            stan::math::check_corr_matrix(function__, "R_pop_p", R_pop_p);
            size_t R_pop_p_j_2_max__ = (N_age - 1);
            size_t R_pop_p_j_1_max__ = (N_age - 1);
            for (size_t j_2__ = 0; j_2__ < R_pop_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_pop_p_j_1_max__; ++j_1__) {
                    vars__.push_back(R_pop_p(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 387;
            stan::math::check_corr_matrix(function__, "R_p", R_p);
            size_t R_p_j_2_max__ = (N_age - 1);
            size_t R_p_j_1_max__ = (N_age - 1);
            for (size_t j_2__ = 0; j_2__ < R_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_p_j_1_max__; ++j_1__) {
                    vars__.push_back(R_p(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 388;
            check_greater_or_equal(function__, "S_W_fwd", S_W_fwd, 0);
            size_t S_W_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < S_W_fwd_j_1_max__; ++j_1__) {
                vars__.push_back(S_W_fwd(j_1__));
            }
            current_statement_begin__ = 389;
            size_t S_H_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < S_H_fwd_j_1_max__; ++j_1__) {
                vars__.push_back(S_H_fwd(j_1__));
            }
            current_statement_begin__ = 390;
            check_greater_or_equal(function__, "S_fwd", S_fwd, 0);
            size_t S_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < S_fwd_j_1_max__; ++j_1__) {
                vars__.push_back(S_fwd(j_1__));
            }
            current_statement_begin__ = 391;
            check_greater_or_equal(function__, "p_fwd", p_fwd, 0);
            check_less_or_equal(function__, "p_fwd", p_fwd, 1);
            size_t p_fwd_j_2_max__ = N_age;
            size_t p_fwd_j_1_max__ = N_fwd;
            for (size_t j_2__ = 0; j_2__ < p_fwd_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_fwd_j_1_max__; ++j_1__) {
                    vars__.push_back(p_fwd(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 392;
            check_greater_or_equal(function__, "q_fwd", q_fwd, 0);
            check_less_or_equal(function__, "q_fwd", q_fwd, 1);
            size_t q_fwd_j_2_max__ = N_age;
            size_t q_fwd_j_1_max__ = N_fwd;
            for (size_t j_2__ = 0; j_2__ < q_fwd_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_fwd_j_1_max__; ++j_1__) {
                    vars__.push_back(q_fwd(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 393;
            check_greater_or_equal(function__, "R_hat_fwd", R_hat_fwd, 0);
            size_t R_hat_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < R_hat_fwd_j_1_max__; ++j_1__) {
                vars__.push_back(R_hat_fwd(j_1__));
            }
            current_statement_begin__ = 394;
            check_greater_or_equal(function__, "R_fwd", R_fwd, 0);
            size_t R_fwd_j_1_max__ = N_fwd;
            for (size_t j_1__ = 0; j_1__ < R_fwd_j_1_max__; ++j_1__) {
                vars__.push_back(R_fwd(j_1__));
            }
            current_statement_begin__ = 395;
            size_t LL_S_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_S_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_S_obs(j_1__));
            }
            current_statement_begin__ = 396;
            size_t LL_n_H_obs_j_1_max__ = N_H;
            for (size_t j_1__ = 0; j_1__ < LL_n_H_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_n_H_obs(j_1__));
            }
            current_statement_begin__ = 397;
            size_t LL_n_age_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_n_age_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_n_age_obs(j_1__));
            }
            current_statement_begin__ = 398;
            size_t LL_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_j_1_max__; ++j_1__) {
                vars__.push_back(LL(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_IPM_SS_pp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_alpha_j_1_max__ = N_X_alpha;
        for (size_t j_1__ = 0; j_1__ < beta_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_Rmax";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_Rmax_j_1_max__ = N_X_Rmax;
        for (size_t j_1__ = 0; j_1__ < beta_Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_Rmax";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_alphaRmax";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_R_j_1_max__ = N_X_R;
        for (size_t j_1__ = 0; j_1__ < beta_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_R";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_year_R";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_year_R_j_1_max__ = N_year_all;
        for (size_t j_1__ = 0; j_1__ < zeta_year_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_year_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_R";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_R_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_p_j_1_max__ = N_age;
        for (size_t j_1__ = 0; j_1__ < mu_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_pop_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_pop_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_pop_p_j_2_max__ = (N_age - 1);
        size_t L_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < L_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_pop_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_pop_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t zeta_pop_p_j_2_max__ = (N_age - 1);
        size_t zeta_pop_p_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < zeta_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_pop_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_pop_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_p_j_2_max__ = (N_age - 1);
        size_t L_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < L_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t zeta_p_j_2_max__ = (N_age - 1);
        size_t zeta_p_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_HOS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_init" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_init_j_1_max__ = N_age;
        size_t q_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_init_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_init" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = N_pop;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rmax_j_1_max__ = N_pop;
            for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rmax" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_year_R_j_1_max__ = N_year_all;
            for (size_t j_1__ = 0; j_1__ < eta_year_R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta_year_R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_HOS_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_HOS_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_W_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_W" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_H" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B_rate_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B_rate_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_alr_p_j_1_max__ = (N_age - 1);
            for (size_t j_1__ = 0; j_1__ < mu_alr_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_alr_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_pop_alr_p_j_2_max__ = (N_age - 1);
            size_t mu_pop_alr_p_j_1_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < mu_pop_alr_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_pop_alr_p_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_pop_alr_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_j_2_max__ = N_age;
            size_t p_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t q_j_2_max__ = N_age;
            size_t q_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t R_pop_p_j_2_max__ = (N_age - 1);
        size_t R_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < R_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < R_pop_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_pop_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t R_p_j_2_max__ = (N_age - 1);
        size_t R_p_j_1_max__ = (N_age - 1);
        for (size_t j_2__ = 0; j_2__ < R_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < R_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t S_W_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < S_W_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_W_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_H_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < S_H_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_H_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < S_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_fwd_j_2_max__ = N_age;
        size_t p_fwd_j_1_max__ = N_fwd;
        for (size_t j_2__ = 0; j_2__ < p_fwd_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_fwd_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_fwd" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t q_fwd_j_2_max__ = N_age;
        size_t q_fwd_j_1_max__ = N_fwd;
        for (size_t j_2__ = 0; j_2__ < q_fwd_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < q_fwd_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_fwd" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t R_hat_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < R_hat_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_hat_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < R_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_S_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_S_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_S_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_H_obs_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < LL_n_H_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_H_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_alpha_j_1_max__ = N_X_alpha;
        for (size_t j_1__ = 0; j_1__ < beta_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_Rmax";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_Rmax_j_1_max__ = N_X_Rmax;
        for (size_t j_1__ = 0; j_1__ < beta_Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_Rmax";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < zeta_Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_alphaRmax";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_R_j_1_max__ = N_X_R;
        for (size_t j_1__ = 0; j_1__ < beta_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_R";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_year_R";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_year_R_j_1_max__ = N_year_all;
        for (size_t j_1__ = 0; j_1__ < zeta_year_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_year_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_R";
        param_names__.push_back(param_name_stream__.str());
        size_t zeta_R_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < mu_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_pop_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_pop_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_pop_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_pop_p_j_1_max__ = (((N_age - 1) * ((N_age - 1) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_pop_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_pop_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_pop_p_j_2_max__ = (N_age - 1);
        size_t zeta_pop_p_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < zeta_pop_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_pop_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_pop_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_p_j_1_max__ = (N_age - 1);
        for (size_t j_1__ = 0; j_1__ < sigma_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_p_j_1_max__ = (((N_age - 1) * ((N_age - 1) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_p_j_2_max__ = (N_age - 1);
        size_t zeta_p_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_HOS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_init" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_init_j_1_max__ = (N_age - 1);
        size_t q_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_init_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_init" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = N_pop;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rmax_j_1_max__ = N_pop;
            for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rmax" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_year_R_j_1_max__ = N_year_all;
            for (size_t j_1__ = 0; j_1__ < eta_year_R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta_year_R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_HOS_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_HOS_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_W_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_W" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_H" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B_rate_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B_rate_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_alr_p_j_1_max__ = (N_age - 1);
            for (size_t j_1__ = 0; j_1__ < mu_alr_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_alr_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_pop_alr_p_j_2_max__ = (N_age - 1);
            size_t mu_pop_alr_p_j_1_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < mu_pop_alr_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_pop_alr_p_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_pop_alr_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_j_2_max__ = N_age;
            size_t p_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t q_j_2_max__ = N_age;
            size_t q_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t R_pop_p_j_1_max__ = (((N_age - 1) * ((N_age - 1) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < R_pop_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_pop_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_p_j_1_max__ = (((N_age - 1) * ((N_age - 1) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < R_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_W_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < S_W_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_W_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_H_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < S_H_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_H_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < S_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_fwd_j_2_max__ = N_age;
        size_t p_fwd_j_1_max__ = N_fwd;
        for (size_t j_2__ = 0; j_2__ < p_fwd_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_fwd_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_fwd" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t q_fwd_j_2_max__ = N_age;
        size_t q_fwd_j_1_max__ = N_fwd;
        for (size_t j_2__ = 0; j_2__ < q_fwd_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < q_fwd_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_fwd" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t R_hat_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < R_hat_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_hat_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t R_fwd_j_1_max__ = N_fwd;
        for (size_t j_1__ = 0; j_1__ < R_fwd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_fwd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_S_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_S_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_S_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_H_obs_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < LL_n_H_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_H_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_IPM_SS_pp_namespace::model_IPM_SS_pp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
