// Generated by rstantools.  Do not edit by hand.

/*
    salmonIPM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    salmonIPM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with salmonIPM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_IPM_SMaS_np_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_IPM_SMaS_np");
    reader.add_event(386, 384, "end", "model_IPM_SMaS_np");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
SR(const int& SR_fun,
       const T1__& alpha,
       const T2__& Rmax,
       const T3__& S,
       const T4__& A, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ R(DUMMY_VAR__);
        (void) R;  // dummy to suppress unused var warning
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 6;
        if (as_bool(logical_eq(SR_fun, 1))) {
            current_statement_begin__ = 7;
            stan::math::assign(R, ((alpha * S) / A));
        } else if (as_bool(logical_eq(SR_fun, 2))) {
            current_statement_begin__ = 9;
            stan::math::assign(R, ((alpha * S) / (A + ((alpha * S) / Rmax))));
        } else if (as_bool(logical_eq(SR_fun, 3))) {
            current_statement_begin__ = 11;
            stan::math::assign(R, ((alpha * (S / A)) * stan::math::exp(((-(alpha) * S) / ((A * stan::math::e()) * Rmax)))));
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct SR_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
    operator()(const int& SR_fun,
       const T1__& alpha,
       const T2__& Rmax,
       const T3__& S,
       const T4__& A, std::ostream* pstream__) const {
        return SR(SR_fun, alpha, Rmax, S, A, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pexp_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
              const T1__& mu,
              const T2__& sigma,
              const T3__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 18;
        validate_non_negative_index("LL", "num_elements(y)", num_elements(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> LL(num_elements(y));
        stan::math::initialize(LL, DUMMY_VAR__);
        stan::math::fill(LL, DUMMY_VAR__);
        current_statement_begin__ = 20;
        for (int i = 1; i <= num_elements(LL); ++i) {
            current_statement_begin__ = 21;
            stan::model::assign(LL, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        -(pow((stan::math::fabs((get_base1(y, i, "y", 1) - mu)) / sigma), shape)), 
                        "assigning variable LL");
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(sum(LL));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pexp_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
              const T1__& mu,
              const T2__& sigma,
              const T3__& shape, std::ostream* pstream__) {
    return pexp_lpdf<false>(y,mu,sigma,shape, pstream__);
}
struct pexp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
              const T1__& mu,
              const T2__& sigma,
              const T3__& shape, std::ostream* pstream__) const {
        return pexp_lpdf(y, mu, sigma, shape, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1, Eigen::Dynamic>
col_sums(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        validate_non_negative_index("s", "cols(X)", cols(X));
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> s(cols(X));
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        current_statement_begin__ = 29;
        stan::math::assign(s, multiply(rep_row_vector(1, rows(X)), X));
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct col_sums_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return col_sums(X, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_IPM_SMaS_np : public prob_grad {
private:
        int N;
        std::vector<int> pop;
        std::vector<int> year;
        int SR_fun;
        vector_d A;
        int N_X_M;
        matrix_d X_M;
        int N_M_obs;
        std::vector<int> which_M_obs;
        vector_d M_obs;
        int N_Mage;
        int max_Mage;
        matrix_d n_Mage_obs;
        int N_X_MS;
        matrix_d X_MS;
        vector_d F_rate;
        int N_B;
        std::vector<int> which_B;
        vector_d B_take_obs;
        int N_S_obs;
        std::vector<int> which_S_obs;
        vector_d S_obs;
        int N_MSage;
        int max_MSage;
        matrix_d n_MSage_obs;
        matrix_d n_GRage_obs;
        int N_H;
        std::vector<int> which_H;
        std::vector<int> n_W_obs;
        std::vector<int> n_H_obs;
        int N_pop;
        int N_year;
        std::vector<int> smolt_ages;
        std::vector<int> ocean_ages;
        int max_age;
        int N_GRage;
        std::vector<int> pop_year_indx;
        std::vector<int> n_HW_obs;
public:
    model_IPM_SMaS_np(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_IPM_SMaS_np(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_IPM_SMaS_np_namespace::model_IPM_SMaS_np";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 37;
            validate_non_negative_index("pop", "N", N);
            context__.validate_dims("data initialization", "pop", "int", context__.to_vec(N));
            pop = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("pop");
            pos__ = 0;
            size_t pop_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < pop_k_0_max__; ++k_0__) {
                pop[k_0__] = vals_i__[pos__++];
            }
            size_t pop_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pop_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pop[i_0__]", pop[i_0__], 1);
                check_less_or_equal(function__, "pop[i_0__]", pop[i_0__], N);
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("year", "N", N);
            context__.validate_dims("data initialization", "year", "int", context__.to_vec(N));
            year = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("year");
            pos__ = 0;
            size_t year_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < year_k_0_max__; ++k_0__) {
                year[k_0__] = vals_i__[pos__++];
            }
            size_t year_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < year_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "year[i_0__]", year[i_0__], 1);
                check_less_or_equal(function__, "year[i_0__]", year[i_0__], N);
            }
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "SR_fun", "int", context__.to_vec());
            SR_fun = int(0);
            vals_i__ = context__.vals_i("SR_fun");
            pos__ = 0;
            SR_fun = vals_i__[pos__++];
            check_greater_or_equal(function__, "SR_fun", SR_fun, 1);
            current_statement_begin__ = 41;
            validate_non_negative_index("A", "N", N);
            context__.validate_dims("data initialization", "A", "vector_d", context__.to_vec(N));
            A = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "N_X_M", "int", context__.to_vec());
            N_X_M = int(0);
            vals_i__ = context__.vals_i("N_X_M");
            pos__ = 0;
            N_X_M = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_X_M", N_X_M, 0);
            current_statement_begin__ = 43;
            validate_non_negative_index("X_M", "max(year)", max(year));
            validate_non_negative_index("X_M", "N_X_M", N_X_M);
            context__.validate_dims("data initialization", "X_M", "matrix_d", context__.to_vec(max(year),N_X_M));
            X_M = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(max(year), N_X_M);
            vals_r__ = context__.vals_r("X_M");
            pos__ = 0;
            size_t X_M_j_2_max__ = N_X_M;
            size_t X_M_j_1_max__ = max(year);
            for (size_t j_2__ = 0; j_2__ < X_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_M_j_1_max__; ++j_1__) {
                    X_M(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "N_M_obs", "int", context__.to_vec());
            N_M_obs = int(0);
            vals_i__ = context__.vals_i("N_M_obs");
            pos__ = 0;
            N_M_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_M_obs", N_M_obs, 1);
            check_less_or_equal(function__, "N_M_obs", N_M_obs, N);
            current_statement_begin__ = 46;
            validate_non_negative_index("which_M_obs", "N_M_obs", N_M_obs);
            context__.validate_dims("data initialization", "which_M_obs", "int", context__.to_vec(N_M_obs));
            which_M_obs = std::vector<int>(N_M_obs, int(0));
            vals_i__ = context__.vals_i("which_M_obs");
            pos__ = 0;
            size_t which_M_obs_k_0_max__ = N_M_obs;
            for (size_t k_0__ = 0; k_0__ < which_M_obs_k_0_max__; ++k_0__) {
                which_M_obs[k_0__] = vals_i__[pos__++];
            }
            size_t which_M_obs_i_0_max__ = N_M_obs;
            for (size_t i_0__ = 0; i_0__ < which_M_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_M_obs[i_0__]", which_M_obs[i_0__], 1);
                check_less_or_equal(function__, "which_M_obs[i_0__]", which_M_obs[i_0__], N);
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("M_obs", "N", N);
            context__.validate_dims("data initialization", "M_obs", "vector_d", context__.to_vec(N));
            M_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("M_obs");
            pos__ = 0;
            size_t M_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_obs_j_1_max__; ++j_1__) {
                M_obs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "M_obs", M_obs, 0);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "N_Mage", "int", context__.to_vec());
            N_Mage = int(0);
            vals_i__ = context__.vals_i("N_Mage");
            pos__ = 0;
            N_Mage = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_Mage", N_Mage, 2);
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "max_Mage", "int", context__.to_vec());
            max_Mage = int(0);
            vals_i__ = context__.vals_i("max_Mage");
            pos__ = 0;
            max_Mage = vals_i__[pos__++];
            check_greater_or_equal(function__, "max_Mage", max_Mage, 2);
            current_statement_begin__ = 51;
            validate_non_negative_index("n_Mage_obs", "N", N);
            validate_non_negative_index("n_Mage_obs", "N_Mage", N_Mage);
            context__.validate_dims("data initialization", "n_Mage_obs", "matrix_d", context__.to_vec(N,N_Mage));
            n_Mage_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N_Mage);
            vals_r__ = context__.vals_r("n_Mage_obs");
            pos__ = 0;
            size_t n_Mage_obs_j_2_max__ = N_Mage;
            size_t n_Mage_obs_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < n_Mage_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < n_Mage_obs_j_1_max__; ++j_1__) {
                    n_Mage_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "n_Mage_obs", n_Mage_obs, 0);
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "N_X_MS", "int", context__.to_vec());
            N_X_MS = int(0);
            vals_i__ = context__.vals_i("N_X_MS");
            pos__ = 0;
            N_X_MS = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_X_MS", N_X_MS, 0);
            current_statement_begin__ = 54;
            validate_non_negative_index("X_MS", "max(year)", max(year));
            validate_non_negative_index("X_MS", "N_X_MS", N_X_MS);
            context__.validate_dims("data initialization", "X_MS", "matrix_d", context__.to_vec(max(year),N_X_MS));
            X_MS = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(max(year), N_X_MS);
            vals_r__ = context__.vals_r("X_MS");
            pos__ = 0;
            size_t X_MS_j_2_max__ = N_X_MS;
            size_t X_MS_j_1_max__ = max(year);
            for (size_t j_2__ = 0; j_2__ < X_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_MS_j_1_max__; ++j_1__) {
                    X_MS(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("F_rate", "N", N);
            context__.validate_dims("data initialization", "F_rate", "vector_d", context__.to_vec(N));
            F_rate = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("F_rate");
            pos__ = 0;
            size_t F_rate_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < F_rate_j_1_max__; ++j_1__) {
                F_rate(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "N_B", "int", context__.to_vec());
            N_B = int(0);
            vals_i__ = context__.vals_i("N_B");
            pos__ = 0;
            N_B = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_B", N_B, 0);
            check_less_or_equal(function__, "N_B", N_B, N);
            current_statement_begin__ = 58;
            validate_non_negative_index("which_B", "N_B", N_B);
            context__.validate_dims("data initialization", "which_B", "int", context__.to_vec(N_B));
            which_B = std::vector<int>(N_B, int(0));
            vals_i__ = context__.vals_i("which_B");
            pos__ = 0;
            size_t which_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < which_B_k_0_max__; ++k_0__) {
                which_B[k_0__] = vals_i__[pos__++];
            }
            size_t which_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < which_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_B[i_0__]", which_B[i_0__], 1);
                check_less_or_equal(function__, "which_B[i_0__]", which_B[i_0__], N);
            }
            current_statement_begin__ = 59;
            validate_non_negative_index("B_take_obs", "N_B", N_B);
            context__.validate_dims("data initialization", "B_take_obs", "vector_d", context__.to_vec(N_B));
            B_take_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_B);
            vals_r__ = context__.vals_r("B_take_obs");
            pos__ = 0;
            size_t B_take_obs_j_1_max__ = N_B;
            for (size_t j_1__ = 0; j_1__ < B_take_obs_j_1_max__; ++j_1__) {
                B_take_obs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "N_S_obs", "int", context__.to_vec());
            N_S_obs = int(0);
            vals_i__ = context__.vals_i("N_S_obs");
            pos__ = 0;
            N_S_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_S_obs", N_S_obs, 1);
            check_less_or_equal(function__, "N_S_obs", N_S_obs, N);
            current_statement_begin__ = 62;
            validate_non_negative_index("which_S_obs", "N_S_obs", N_S_obs);
            context__.validate_dims("data initialization", "which_S_obs", "int", context__.to_vec(N_S_obs));
            which_S_obs = std::vector<int>(N_S_obs, int(0));
            vals_i__ = context__.vals_i("which_S_obs");
            pos__ = 0;
            size_t which_S_obs_k_0_max__ = N_S_obs;
            for (size_t k_0__ = 0; k_0__ < which_S_obs_k_0_max__; ++k_0__) {
                which_S_obs[k_0__] = vals_i__[pos__++];
            }
            size_t which_S_obs_i_0_max__ = N_S_obs;
            for (size_t i_0__ = 0; i_0__ < which_S_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_S_obs[i_0__]", which_S_obs[i_0__], 1);
                check_less_or_equal(function__, "which_S_obs[i_0__]", which_S_obs[i_0__], N);
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("S_obs", "N", N);
            context__.validate_dims("data initialization", "S_obs", "vector_d", context__.to_vec(N));
            S_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("S_obs");
            pos__ = 0;
            size_t S_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_obs_j_1_max__; ++j_1__) {
                S_obs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "S_obs", S_obs, 0);
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "N_MSage", "int", context__.to_vec());
            N_MSage = int(0);
            vals_i__ = context__.vals_i("N_MSage");
            pos__ = 0;
            N_MSage = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_MSage", N_MSage, 2);
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "max_MSage", "int", context__.to_vec());
            max_MSage = int(0);
            vals_i__ = context__.vals_i("max_MSage");
            pos__ = 0;
            max_MSage = vals_i__[pos__++];
            check_greater_or_equal(function__, "max_MSage", max_MSage, 1);
            current_statement_begin__ = 67;
            validate_non_negative_index("n_MSage_obs", "N", N);
            validate_non_negative_index("n_MSage_obs", "N_MSage", N_MSage);
            context__.validate_dims("data initialization", "n_MSage_obs", "matrix_d", context__.to_vec(N,N_MSage));
            n_MSage_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N_MSage);
            vals_r__ = context__.vals_r("n_MSage_obs");
            pos__ = 0;
            size_t n_MSage_obs_j_2_max__ = N_MSage;
            size_t n_MSage_obs_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < n_MSage_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < n_MSage_obs_j_1_max__; ++j_1__) {
                    n_MSage_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "n_MSage_obs", n_MSage_obs, 0);
            current_statement_begin__ = 68;
            validate_non_negative_index("n_GRage_obs", "N", N);
            validate_non_negative_index("n_GRage_obs", "(N_Mage * N_MSage)", (N_Mage * N_MSage));
            context__.validate_dims("data initialization", "n_GRage_obs", "matrix_d", context__.to_vec(N,(N_Mage * N_MSage)));
            n_GRage_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, (N_Mage * N_MSage));
            vals_r__ = context__.vals_r("n_GRage_obs");
            pos__ = 0;
            size_t n_GRage_obs_j_2_max__ = (N_Mage * N_MSage);
            size_t n_GRage_obs_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < n_GRage_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < n_GRage_obs_j_1_max__; ++j_1__) {
                    n_GRage_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "n_GRage_obs", n_GRage_obs, 0);
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "N_H", "int", context__.to_vec());
            N_H = int(0);
            vals_i__ = context__.vals_i("N_H");
            pos__ = 0;
            N_H = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_H", N_H, 0);
            check_less_or_equal(function__, "N_H", N_H, N);
            current_statement_begin__ = 71;
            validate_non_negative_index("which_H", "N_H", N_H);
            context__.validate_dims("data initialization", "which_H", "int", context__.to_vec(N_H));
            which_H = std::vector<int>(N_H, int(0));
            vals_i__ = context__.vals_i("which_H");
            pos__ = 0;
            size_t which_H_k_0_max__ = N_H;
            for (size_t k_0__ = 0; k_0__ < which_H_k_0_max__; ++k_0__) {
                which_H[k_0__] = vals_i__[pos__++];
            }
            size_t which_H_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < which_H_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_H[i_0__]", which_H[i_0__], 1);
                check_less_or_equal(function__, "which_H[i_0__]", which_H[i_0__], N);
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("n_W_obs", "N_H", N_H);
            context__.validate_dims("data initialization", "n_W_obs", "int", context__.to_vec(N_H));
            n_W_obs = std::vector<int>(N_H, int(0));
            vals_i__ = context__.vals_i("n_W_obs");
            pos__ = 0;
            size_t n_W_obs_k_0_max__ = N_H;
            for (size_t k_0__ = 0; k_0__ < n_W_obs_k_0_max__; ++k_0__) {
                n_W_obs[k_0__] = vals_i__[pos__++];
            }
            size_t n_W_obs_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < n_W_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_W_obs[i_0__]", n_W_obs[i_0__], 0);
            }
            current_statement_begin__ = 73;
            validate_non_negative_index("n_H_obs", "N_H", N_H);
            context__.validate_dims("data initialization", "n_H_obs", "int", context__.to_vec(N_H));
            n_H_obs = std::vector<int>(N_H, int(0));
            vals_i__ = context__.vals_i("n_H_obs");
            pos__ = 0;
            size_t n_H_obs_k_0_max__ = N_H;
            for (size_t k_0__ = 0; k_0__ < n_H_obs_k_0_max__; ++k_0__) {
                n_H_obs[k_0__] = vals_i__[pos__++];
            }
            size_t n_H_obs_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < n_H_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_H_obs[i_0__]", n_H_obs[i_0__], 0);
            }
            // initialize transformed data variables
            current_statement_begin__ = 77;
            N_pop = int(0);
            stan::math::fill(N_pop, std::numeric_limits<int>::min());
            current_statement_begin__ = 78;
            N_year = int(0);
            stan::math::fill(N_year, std::numeric_limits<int>::min());
            current_statement_begin__ = 79;
            validate_non_negative_index("smolt_ages", "N_Mage", N_Mage);
            smolt_ages = std::vector<int>(N_Mage, int(0));
            stan::math::fill(smolt_ages, std::numeric_limits<int>::min());
            current_statement_begin__ = 80;
            validate_non_negative_index("ocean_ages", "N_MSage", N_MSage);
            ocean_ages = std::vector<int>(N_MSage, int(0));
            stan::math::fill(ocean_ages, std::numeric_limits<int>::min());
            current_statement_begin__ = 81;
            max_age = int(0);
            stan::math::fill(max_age, std::numeric_limits<int>::min());
            current_statement_begin__ = 82;
            N_GRage = int(0);
            stan::math::fill(N_GRage, std::numeric_limits<int>::min());
            current_statement_begin__ = 83;
            validate_non_negative_index("pop_year_indx", "N", N);
            pop_year_indx = std::vector<int>(N, int(0));
            stan::math::fill(pop_year_indx, std::numeric_limits<int>::min());
            current_statement_begin__ = 84;
            validate_non_negative_index("n_HW_obs", "N_H", N_H);
            n_HW_obs = std::vector<int>(N_H, int(0));
            stan::math::fill(n_HW_obs, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 86;
            stan::math::assign(N_pop, max(pop));
            current_statement_begin__ = 87;
            stan::math::assign(N_year, max(year));
            current_statement_begin__ = 88;
            for (int a = 1; a <= N_Mage; ++a) {
                current_statement_begin__ = 89;
                stan::model::assign(smolt_ages, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            ((max_Mage - N_Mage) + a), 
                            "assigning variable smolt_ages");
            }
            current_statement_begin__ = 90;
            for (int a = 1; a <= N_MSage; ++a) {
                current_statement_begin__ = 91;
                stan::model::assign(ocean_ages, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            ((max_MSage - N_MSage) + a), 
                            "assigning variable ocean_ages");
            }
            current_statement_begin__ = 92;
            stan::math::assign(max_age, (max_Mage + max_MSage));
            current_statement_begin__ = 93;
            stan::math::assign(N_GRage, (N_Mage * N_MSage));
            current_statement_begin__ = 94;
            stan::model::assign(pop_year_indx, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable pop_year_indx");
            current_statement_begin__ = 95;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 97;
                if (as_bool((primitive_value(logical_eq(i, 1)) || primitive_value(logical_neq(get_base1(pop, (i - 1), "pop", 1), get_base1(pop, i, "pop", 1)))))) {
                    current_statement_begin__ = 98;
                    stan::model::assign(pop_year_indx, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable pop_year_indx");
                } else {
                    current_statement_begin__ = 100;
                    stan::model::assign(pop_year_indx, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(pop_year_indx, (i - 1), "pop_year_indx", 1) + 1), 
                                "assigning variable pop_year_indx");
                }
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= N_H; ++i) {
                current_statement_begin__ = 102;
                stan::model::assign(n_HW_obs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(n_H_obs, i, "n_H_obs", 1) + get_base1(n_W_obs, i, "n_W_obs", 1)), 
                            "assigning variable n_HW_obs");
            }
            // validate transformed data
            current_statement_begin__ = 77;
            check_greater_or_equal(function__, "N_pop", N_pop, 1);
            check_less_or_equal(function__, "N_pop", N_pop, N);
            current_statement_begin__ = 78;
            check_greater_or_equal(function__, "N_year", N_year, 1);
            check_less_or_equal(function__, "N_year", N_year, N);
            current_statement_begin__ = 79;
            size_t smolt_ages_i_0_max__ = N_Mage;
            for (size_t i_0__ = 0; i_0__ < smolt_ages_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "smolt_ages[i_0__]", smolt_ages[i_0__], 0);
            }
            current_statement_begin__ = 80;
            size_t ocean_ages_i_0_max__ = N_MSage;
            for (size_t i_0__ = 0; i_0__ < ocean_ages_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ocean_ages[i_0__]", ocean_ages[i_0__], 0);
            }
            current_statement_begin__ = 81;
            check_greater_or_equal(function__, "max_age", max_age, 2);
            current_statement_begin__ = 82;
            check_greater_or_equal(function__, "N_GRage", N_GRage, 2);
            current_statement_begin__ = 83;
            size_t pop_year_indx_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pop_year_indx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pop_year_indx[i_0__]", pop_year_indx[i_0__], 1);
            }
            current_statement_begin__ = 84;
            size_t n_HW_obs_i_0_max__ = N_H;
            for (size_t i_0__ = 0; i_0__ < n_HW_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_HW_obs[i_0__]", n_HW_obs[i_0__], 0);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 108;
            validate_non_negative_index("alpha", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 109;
            validate_non_negative_index("Rmax", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 110;
            validate_non_negative_index("beta_M", "N_pop", N_pop);
            validate_non_negative_index("beta_M", "N_X_M", N_X_M);
            num_params_r__ += (N_pop * N_X_M);
            current_statement_begin__ = 111;
            validate_non_negative_index("rho_M", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 112;
            validate_non_negative_index("sigma_M", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 113;
            validate_non_negative_index("zeta_M", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 115;
            validate_non_negative_index("mu_p_M", "N_Mage", N_Mage);
            validate_non_negative_index("mu_p_M", "N_pop", N_pop);
            num_params_r__ += ((N_Mage - 1) * N_pop);
            current_statement_begin__ = 116;
            validate_non_negative_index("sigma_p_M", "N_pop", N_pop);
            validate_non_negative_index("sigma_p_M", "(N_Mage - 1)", (N_Mage - 1));
            num_params_r__ += (N_pop * (N_Mage - 1));
            current_statement_begin__ = 117;
            validate_non_negative_index("L_p_M", "(N_Mage - 1)", (N_Mage - 1));
            validate_non_negative_index("L_p_M", "(N_Mage - 1)", (N_Mage - 1));
            validate_non_negative_index("L_p_M", "N_pop", N_pop);
            num_params_r__ += ((((N_Mage - 1) * ((N_Mage - 1) - 1)) / 2) * N_pop);
            current_statement_begin__ = 118;
            validate_non_negative_index("zeta_p_M", "N", N);
            validate_non_negative_index("zeta_p_M", "(N_Mage - 1)", (N_Mage - 1));
            num_params_r__ += (N * (N_Mage - 1));
            current_statement_begin__ = 120;
            validate_non_negative_index("mu_MS", "N_pop", N_pop);
            validate_non_negative_index("mu_MS", "N_Mage", N_Mage);
            num_params_r__ += (N_pop * N_Mage);
            current_statement_begin__ = 121;
            validate_non_negative_index("beta_MS", "N_pop", N_pop);
            validate_non_negative_index("beta_MS", "N_X_MS", N_X_MS);
            num_params_r__ += (N_pop * N_X_MS);
            current_statement_begin__ = 122;
            validate_non_negative_index("rho_MS", "N_pop", N_pop);
            validate_non_negative_index("rho_MS", "N_Mage", N_Mage);
            num_params_r__ += (N_pop * N_Mage);
            current_statement_begin__ = 123;
            validate_non_negative_index("sigma_MS", "N_pop", N_pop);
            validate_non_negative_index("sigma_MS", "N_Mage", N_Mage);
            num_params_r__ += (N_pop * N_Mage);
            current_statement_begin__ = 124;
            validate_non_negative_index("L_MS", "N_Mage", N_Mage);
            validate_non_negative_index("L_MS", "N_Mage", N_Mage);
            validate_non_negative_index("L_MS", "N_pop", N_pop);
            num_params_r__ += (((N_Mage * (N_Mage - 1)) / 2) * N_pop);
            current_statement_begin__ = 125;
            validate_non_negative_index("zeta_MS", "N", N);
            validate_non_negative_index("zeta_MS", "N_Mage", N_Mage);
            num_params_r__ += (N * N_Mage);
            current_statement_begin__ = 127;
            validate_non_negative_index("mu_p_MS", "N_MSage", N_MSage);
            validate_non_negative_index("mu_p_MS", "N_pop", N_pop);
            validate_non_negative_index("mu_p_MS", "N_Mage", N_Mage);
            num_params_r__ += (((N_MSage - 1) * N_pop) * N_Mage);
            current_statement_begin__ = 128;
            validate_non_negative_index("sigma_p_MS", "(N_MSage - 1)", (N_MSage - 1));
            validate_non_negative_index("sigma_p_MS", "N_pop", N_pop);
            validate_non_negative_index("sigma_p_MS", "N_Mage", N_Mage);
            num_params_r__ += (((N_MSage - 1) * N_pop) * N_Mage);
            current_statement_begin__ = 129;
            validate_non_negative_index("L_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
            validate_non_negative_index("L_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
            validate_non_negative_index("L_p_MS", "N_pop", N_pop);
            num_params_r__ += ((((N_Mage * (N_MSage - 1)) * ((N_Mage * (N_MSage - 1)) - 1)) / 2) * N_pop);
            current_statement_begin__ = 130;
            validate_non_negative_index("zeta_p_MS", "N", N);
            validate_non_negative_index("zeta_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
            num_params_r__ += (N * (N_Mage * (N_MSage - 1)));
            current_statement_begin__ = 132;
            validate_non_negative_index("p_HOS", "N_H", N_H);
            num_params_r__ += N_H;
            current_statement_begin__ = 133;
            validate_non_negative_index("B_rate", "N_B", N_B);
            num_params_r__ += N_B;
            current_statement_begin__ = 135;
            validate_non_negative_index("M_init", "(max_Mage * N_pop)", (max_Mage * N_pop));
            num_params_r__ += (max_Mage * N_pop);
            current_statement_begin__ = 136;
            validate_non_negative_index("q_M_init", "N_Mage", N_Mage);
            validate_non_negative_index("q_M_init", "(max_Mage * N_pop)", (max_Mage * N_pop));
            num_params_r__ += ((N_Mage - 1) * (max_Mage * N_pop));
            current_statement_begin__ = 137;
            validate_non_negative_index("S_init", "(max_age * N_pop)", (max_age * N_pop));
            num_params_r__ += (max_age * N_pop);
            current_statement_begin__ = 138;
            validate_non_negative_index("q_GR_init", "N_GRage", N_GRage);
            validate_non_negative_index("q_GR_init", "(max_age * N_pop)", (max_age * N_pop));
            num_params_r__ += ((N_GRage - 1) * (max_age * N_pop));
            current_statement_begin__ = 139;
            validate_non_negative_index("tau_M", "N_pop", N_pop);
            num_params_r__ += N_pop;
            current_statement_begin__ = 140;
            validate_non_negative_index("tau_S", "N_pop", N_pop);
            num_params_r__ += N_pop;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_IPM_SMaS_np() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 108;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(N_pop);
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 109;
        if (!(context__.contains_r("Rmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Rmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Rmax");
        pos__ = 0U;
        validate_non_negative_index("Rmax", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "Rmax", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Rmax(N_pop);
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            Rmax(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, Rmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Rmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 110;
        if (!(context__.contains_r("beta_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_M");
        pos__ = 0U;
        validate_non_negative_index("beta_M", "N_pop", N_pop);
        validate_non_negative_index("beta_M", "N_X_M", N_X_M);
        context__.validate_dims("parameter initialization", "beta_M", "matrix_d", context__.to_vec(N_pop,N_X_M));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_M(N_pop, N_X_M);
        size_t beta_M_j_2_max__ = N_X_M;
        size_t beta_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_M_j_1_max__; ++j_1__) {
                beta_M(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 111;
        if (!(context__.contains_r("rho_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_M");
        pos__ = 0U;
        validate_non_negative_index("rho_M", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "rho_M", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho_M(N_pop);
        size_t rho_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_M_j_1_max__; ++j_1__) {
            rho_M(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(-(1), 1, rho_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 112;
        if (!(context__.contains_r("sigma_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_M");
        pos__ = 0U;
        validate_non_negative_index("sigma_M", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "sigma_M", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_M(N_pop);
        size_t sigma_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_M_j_1_max__; ++j_1__) {
            sigma_M(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 113;
        if (!(context__.contains_r("zeta_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_M");
        pos__ = 0U;
        validate_non_negative_index("zeta_M", "N", N);
        context__.validate_dims("parameter initialization", "zeta_M", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_M(N);
        size_t zeta_M_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_M_j_1_max__; ++j_1__) {
            zeta_M(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("mu_p_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_p_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_p_M");
        pos__ = 0U;
        validate_non_negative_index("mu_p_M", "N_Mage", N_Mage);
        validate_non_negative_index("mu_p_M", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "mu_p_M", "vector_d", context__.to_vec(N_pop,N_Mage));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > mu_p_M(N_pop, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_Mage));
        size_t mu_p_M_j_1_max__ = N_Mage;
        size_t mu_p_M_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < mu_p_M_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_p_M_k_0_max__; ++k_0__) {
                mu_p_M[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t mu_p_M_i_0_max__ = N_pop;
        for (size_t i_0__ = 0; i_0__ < mu_p_M_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(mu_p_M[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_p_M: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("sigma_p_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_p_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_p_M");
        pos__ = 0U;
        validate_non_negative_index("sigma_p_M", "N_pop", N_pop);
        validate_non_negative_index("sigma_p_M", "(N_Mage - 1)", (N_Mage - 1));
        context__.validate_dims("parameter initialization", "sigma_p_M", "matrix_d", context__.to_vec(N_pop,(N_Mage - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_p_M(N_pop, (N_Mage - 1));
        size_t sigma_p_M_j_2_max__ = (N_Mage - 1);
        size_t sigma_p_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_p_M_j_1_max__; ++j_1__) {
                sigma_p_M(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, sigma_p_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_p_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("L_p_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_p_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_p_M");
        pos__ = 0U;
        validate_non_negative_index("L_p_M", "(N_Mage - 1)", (N_Mage - 1));
        validate_non_negative_index("L_p_M", "(N_Mage - 1)", (N_Mage - 1));
        validate_non_negative_index("L_p_M", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "L_p_M", "matrix_d", context__.to_vec(N_pop,(N_Mage - 1),(N_Mage - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > L_p_M(N_pop, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_Mage - 1), (N_Mage - 1)));
        size_t L_p_M_j_2_max__ = (N_Mage - 1);
        size_t L_p_M_j_1_max__ = (N_Mage - 1);
        size_t L_p_M_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_M_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_p_M_k_0_max__; ++k_0__) {
                    L_p_M[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t L_p_M_i_0_max__ = N_pop;
        for (size_t i_0__ = 0; i_0__ < L_p_M_i_0_max__; ++i_0__) {
            try {
                writer__.cholesky_factor_corr_unconstrain(L_p_M[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_p_M: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("zeta_p_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_p_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_p_M");
        pos__ = 0U;
        validate_non_negative_index("zeta_p_M", "N", N);
        validate_non_negative_index("zeta_p_M", "(N_Mage - 1)", (N_Mage - 1));
        context__.validate_dims("parameter initialization", "zeta_p_M", "matrix_d", context__.to_vec(N,(N_Mage - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_p_M(N, (N_Mage - 1));
        size_t zeta_p_M_j_2_max__ = (N_Mage - 1);
        size_t zeta_p_M_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_M_j_1_max__; ++j_1__) {
                zeta_p_M(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(zeta_p_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_p_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("mu_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_MS");
        pos__ = 0U;
        validate_non_negative_index("mu_MS", "N_pop", N_pop);
        validate_non_negative_index("mu_MS", "N_Mage", N_Mage);
        context__.validate_dims("parameter initialization", "mu_MS", "matrix_d", context__.to_vec(N_pop,N_Mage));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_MS(N_pop, N_Mage);
        size_t mu_MS_j_2_max__ = N_Mage;
        size_t mu_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < mu_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_MS_j_1_max__; ++j_1__) {
                mu_MS(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(0, 1, mu_MS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_MS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("beta_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_MS");
        pos__ = 0U;
        validate_non_negative_index("beta_MS", "N_pop", N_pop);
        validate_non_negative_index("beta_MS", "N_X_MS", N_X_MS);
        context__.validate_dims("parameter initialization", "beta_MS", "matrix_d", context__.to_vec(N_pop,N_X_MS));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_MS(N_pop, N_X_MS);
        size_t beta_MS_j_2_max__ = N_X_MS;
        size_t beta_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_MS_j_1_max__; ++j_1__) {
                beta_MS(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta_MS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_MS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("rho_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_MS");
        pos__ = 0U;
        validate_non_negative_index("rho_MS", "N_pop", N_pop);
        validate_non_negative_index("rho_MS", "N_Mage", N_Mage);
        context__.validate_dims("parameter initialization", "rho_MS", "matrix_d", context__.to_vec(N_pop,N_Mage));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_MS(N_pop, N_Mage);
        size_t rho_MS_j_2_max__ = N_Mage;
        size_t rho_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < rho_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_MS_j_1_max__; ++j_1__) {
                rho_MS(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(-(1), 1, rho_MS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_MS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("sigma_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_MS");
        pos__ = 0U;
        validate_non_negative_index("sigma_MS", "N_pop", N_pop);
        validate_non_negative_index("sigma_MS", "N_Mage", N_Mage);
        context__.validate_dims("parameter initialization", "sigma_MS", "matrix_d", context__.to_vec(N_pop,N_Mage));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_MS(N_pop, N_Mage);
        size_t sigma_MS_j_2_max__ = N_Mage;
        size_t sigma_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_MS_j_1_max__; ++j_1__) {
                sigma_MS(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, sigma_MS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_MS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("L_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_MS");
        pos__ = 0U;
        validate_non_negative_index("L_MS", "N_Mage", N_Mage);
        validate_non_negative_index("L_MS", "N_Mage", N_Mage);
        validate_non_negative_index("L_MS", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "L_MS", "matrix_d", context__.to_vec(N_pop,N_Mage,N_Mage));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > L_MS(N_pop, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_Mage, N_Mage));
        size_t L_MS_j_2_max__ = N_Mage;
        size_t L_MS_j_1_max__ = N_Mage;
        size_t L_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_MS_k_0_max__; ++k_0__) {
                    L_MS[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t L_MS_i_0_max__ = N_pop;
        for (size_t i_0__ = 0; i_0__ < L_MS_i_0_max__; ++i_0__) {
            try {
                writer__.cholesky_factor_corr_unconstrain(L_MS[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_MS: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("zeta_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_MS");
        pos__ = 0U;
        validate_non_negative_index("zeta_MS", "N", N);
        validate_non_negative_index("zeta_MS", "N_Mage", N_Mage);
        context__.validate_dims("parameter initialization", "zeta_MS", "matrix_d", context__.to_vec(N,N_Mage));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_MS(N, N_Mage);
        size_t zeta_MS_j_2_max__ = N_Mage;
        size_t zeta_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_MS_j_1_max__; ++j_1__) {
                zeta_MS(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(zeta_MS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_MS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("mu_p_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_p_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_p_MS");
        pos__ = 0U;
        validate_non_negative_index("mu_p_MS", "N_MSage", N_MSage);
        validate_non_negative_index("mu_p_MS", "N_pop", N_pop);
        validate_non_negative_index("mu_p_MS", "N_Mage", N_Mage);
        context__.validate_dims("parameter initialization", "mu_p_MS", "vector_d", context__.to_vec(N_pop,N_Mage,N_MSage));
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > mu_p_MS(N_pop, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N_Mage, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_MSage)));
        size_t mu_p_MS_j_1_max__ = N_MSage;
        size_t mu_p_MS_k_0_max__ = N_pop;
        size_t mu_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < mu_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < mu_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_p_MS_k_0_max__; ++k_0__) {
                    mu_p_MS[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                }
            }
        }
        size_t mu_p_MS_i_0_max__ = N_pop;
        size_t mu_p_MS_i_1_max__ = N_Mage;
        for (size_t i_0__ = 0; i_0__ < mu_p_MS_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < mu_p_MS_i_1_max__; ++i_1__) {
                try {
                    writer__.simplex_unconstrain(mu_p_MS[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_p_MS: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 128;
        if (!(context__.contains_r("sigma_p_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_p_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_p_MS");
        pos__ = 0U;
        validate_non_negative_index("sigma_p_MS", "(N_MSage - 1)", (N_MSage - 1));
        validate_non_negative_index("sigma_p_MS", "N_pop", N_pop);
        validate_non_negative_index("sigma_p_MS", "N_Mage", N_Mage);
        context__.validate_dims("parameter initialization", "sigma_p_MS", "vector_d", context__.to_vec(N_pop,N_Mage,(N_MSage - 1)));
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > sigma_p_MS(N_pop, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N_Mage, Eigen::Matrix<double, Eigen::Dynamic, 1>((N_MSage - 1))));
        size_t sigma_p_MS_j_1_max__ = (N_MSage - 1);
        size_t sigma_p_MS_k_0_max__ = N_pop;
        size_t sigma_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < sigma_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < sigma_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_p_MS_k_0_max__; ++k_0__) {
                    sigma_p_MS[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                }
            }
        }
        size_t sigma_p_MS_i_0_max__ = N_pop;
        size_t sigma_p_MS_i_1_max__ = N_Mage;
        for (size_t i_0__ = 0; i_0__ < sigma_p_MS_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < sigma_p_MS_i_1_max__; ++i_1__) {
                try {
                    writer__.vector_lb_unconstrain(0, sigma_p_MS[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_p_MS: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 129;
        if (!(context__.contains_r("L_p_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_p_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_p_MS");
        pos__ = 0U;
        validate_non_negative_index("L_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
        validate_non_negative_index("L_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
        validate_non_negative_index("L_p_MS", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "L_p_MS", "matrix_d", context__.to_vec(N_pop,(N_Mage * (N_MSage - 1)),(N_Mage * (N_MSage - 1))));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > L_p_MS(N_pop, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_Mage * (N_MSage - 1)), (N_Mage * (N_MSage - 1))));
        size_t L_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t L_p_MS_j_1_max__ = (N_Mage * (N_MSage - 1));
        size_t L_p_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_p_MS_k_0_max__; ++k_0__) {
                    L_p_MS[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t L_p_MS_i_0_max__ = N_pop;
        for (size_t i_0__ = 0; i_0__ < L_p_MS_i_0_max__; ++i_0__) {
            try {
                writer__.cholesky_factor_corr_unconstrain(L_p_MS[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_p_MS: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 130;
        if (!(context__.contains_r("zeta_p_MS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_p_MS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_p_MS");
        pos__ = 0U;
        validate_non_negative_index("zeta_p_MS", "N", N);
        validate_non_negative_index("zeta_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
        context__.validate_dims("parameter initialization", "zeta_p_MS", "matrix_d", context__.to_vec(N,(N_Mage * (N_MSage - 1))));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_p_MS(N, (N_Mage * (N_MSage - 1)));
        size_t zeta_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t zeta_p_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_MS_j_1_max__; ++j_1__) {
                zeta_p_MS(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(zeta_p_MS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_p_MS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 132;
        if (!(context__.contains_r("p_HOS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_HOS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_HOS");
        pos__ = 0U;
        validate_non_negative_index("p_HOS", "N_H", N_H);
        context__.validate_dims("parameter initialization", "p_HOS", "vector_d", context__.to_vec(N_H));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p_HOS(N_H);
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            p_HOS(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, p_HOS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_HOS: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("B_rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B_rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B_rate");
        pos__ = 0U;
        validate_non_negative_index("B_rate", "N_B", N_B);
        context__.validate_dims("parameter initialization", "B_rate", "vector_d", context__.to_vec(N_B));
        Eigen::Matrix<double, Eigen::Dynamic, 1> B_rate(N_B);
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            B_rate(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, B_rate);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B_rate: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 135;
        if (!(context__.contains_r("M_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable M_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("M_init");
        pos__ = 0U;
        validate_non_negative_index("M_init", "(max_Mage * N_pop)", (max_Mage * N_pop));
        context__.validate_dims("parameter initialization", "M_init", "vector_d", context__.to_vec((max_Mage * N_pop)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> M_init((max_Mage * N_pop));
        size_t M_init_j_1_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < M_init_j_1_max__; ++j_1__) {
            M_init(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, M_init);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable M_init: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 136;
        if (!(context__.contains_r("q_M_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable q_M_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("q_M_init");
        pos__ = 0U;
        validate_non_negative_index("q_M_init", "N_Mage", N_Mage);
        validate_non_negative_index("q_M_init", "(max_Mage * N_pop)", (max_Mage * N_pop));
        context__.validate_dims("parameter initialization", "q_M_init", "vector_d", context__.to_vec((max_Mage * N_pop),N_Mage));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > q_M_init((max_Mage * N_pop), Eigen::Matrix<double, Eigen::Dynamic, 1>(N_Mage));
        size_t q_M_init_j_1_max__ = N_Mage;
        size_t q_M_init_k_0_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_M_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_M_init_k_0_max__; ++k_0__) {
                q_M_init[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t q_M_init_i_0_max__ = (max_Mage * N_pop);
        for (size_t i_0__ = 0; i_0__ < q_M_init_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(q_M_init[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable q_M_init: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 137;
        if (!(context__.contains_r("S_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable S_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("S_init");
        pos__ = 0U;
        validate_non_negative_index("S_init", "(max_age * N_pop)", (max_age * N_pop));
        context__.validate_dims("parameter initialization", "S_init", "vector_d", context__.to_vec((max_age * N_pop)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_init((max_age * N_pop));
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            S_init(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, S_init);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable S_init: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 138;
        if (!(context__.contains_r("q_GR_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable q_GR_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("q_GR_init");
        pos__ = 0U;
        validate_non_negative_index("q_GR_init", "N_GRage", N_GRage);
        validate_non_negative_index("q_GR_init", "(max_age * N_pop)", (max_age * N_pop));
        context__.validate_dims("parameter initialization", "q_GR_init", "vector_d", context__.to_vec((max_age * N_pop),N_GRage));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > q_GR_init((max_age * N_pop), Eigen::Matrix<double, Eigen::Dynamic, 1>(N_GRage));
        size_t q_GR_init_j_1_max__ = N_GRage;
        size_t q_GR_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_GR_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_GR_init_k_0_max__; ++k_0__) {
                q_GR_init[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t q_GR_init_i_0_max__ = (max_age * N_pop);
        for (size_t i_0__ = 0; i_0__ < q_GR_init_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(q_GR_init[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable q_GR_init: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 139;
        if (!(context__.contains_r("tau_M")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_M missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_M");
        pos__ = 0U;
        validate_non_negative_index("tau_M", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "tau_M", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_M(N_pop);
        size_t tau_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_M_j_1_max__; ++j_1__) {
            tau_M(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_M);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_M: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 140;
        if (!(context__.contains_r("tau_S")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_S missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_S");
        pos__ = 0U;
        validate_non_negative_index("tau_S", "N_pop", N_pop);
        context__.validate_dims("parameter initialization", "tau_S", "vector_d", context__.to_vec(N_pop));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_S(N_pop);
        size_t tau_S_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_S_j_1_max__; ++j_1__) {
            tau_S(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_S);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_S: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 108;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                alpha = in__.vector_lb_constrain(0, N_pop);
            current_statement_begin__ = 109;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rmax;
            (void) Rmax;  // dummy to suppress unused var warning
            if (jacobian__)
                Rmax = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                Rmax = in__.vector_lb_constrain(0, N_pop);
            current_statement_begin__ = 110;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta_M;
            (void) beta_M;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_M = in__.matrix_constrain(N_pop, N_X_M, lp__);
            else
                beta_M = in__.matrix_constrain(N_pop, N_X_M);
            current_statement_begin__ = 111;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho_M;
            (void) rho_M;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_M = in__.vector_lub_constrain(-(1), 1, N_pop, lp__);
            else
                rho_M = in__.vector_lub_constrain(-(1), 1, N_pop);
            current_statement_begin__ = 112;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_M;
            (void) sigma_M;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_M = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                sigma_M = in__.vector_lb_constrain(0, N_pop);
            current_statement_begin__ = 113;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_M;
            (void) zeta_M;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_M = in__.vector_constrain(N, lp__);
            else
                zeta_M = in__.vector_constrain(N);
            current_statement_begin__ = 115;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > mu_p_M;
            size_t mu_p_M_d_0_max__ = N_pop;
            mu_p_M.reserve(mu_p_M_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu_p_M_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu_p_M.push_back(in__.simplex_constrain(N_Mage, lp__));
                else
                    mu_p_M.push_back(in__.simplex_constrain(N_Mage));
            }
            current_statement_begin__ = 116;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_p_M;
            (void) sigma_p_M;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_p_M = in__.matrix_lb_constrain(0, N_pop, (N_Mage - 1), lp__);
            else
                sigma_p_M = in__.matrix_lb_constrain(0, N_pop, (N_Mage - 1));
            current_statement_begin__ = 117;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > L_p_M;
            size_t L_p_M_d_0_max__ = N_pop;
            L_p_M.reserve(L_p_M_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < L_p_M_d_0_max__; ++d_0__) {
                if (jacobian__)
                    L_p_M.push_back(in__.cholesky_factor_corr_constrain((N_Mage - 1), lp__));
                else
                    L_p_M.push_back(in__.cholesky_factor_corr_constrain((N_Mage - 1)));
            }
            current_statement_begin__ = 118;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_p_M;
            (void) zeta_p_M;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_p_M = in__.matrix_constrain(N, (N_Mage - 1), lp__);
            else
                zeta_p_M = in__.matrix_constrain(N, (N_Mage - 1));
            current_statement_begin__ = 120;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu_MS;
            (void) mu_MS;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_MS = in__.matrix_lub_constrain(0, 1, N_pop, N_Mage, lp__);
            else
                mu_MS = in__.matrix_lub_constrain(0, 1, N_pop, N_Mage);
            current_statement_begin__ = 121;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta_MS;
            (void) beta_MS;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_MS = in__.matrix_constrain(N_pop, N_X_MS, lp__);
            else
                beta_MS = in__.matrix_constrain(N_pop, N_X_MS);
            current_statement_begin__ = 122;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rho_MS;
            (void) rho_MS;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_MS = in__.matrix_lub_constrain(-(1), 1, N_pop, N_Mage, lp__);
            else
                rho_MS = in__.matrix_lub_constrain(-(1), 1, N_pop, N_Mage);
            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_MS;
            (void) sigma_MS;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_MS = in__.matrix_lb_constrain(0, N_pop, N_Mage, lp__);
            else
                sigma_MS = in__.matrix_lb_constrain(0, N_pop, N_Mage);
            current_statement_begin__ = 124;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > L_MS;
            size_t L_MS_d_0_max__ = N_pop;
            L_MS.reserve(L_MS_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < L_MS_d_0_max__; ++d_0__) {
                if (jacobian__)
                    L_MS.push_back(in__.cholesky_factor_corr_constrain(N_Mage, lp__));
                else
                    L_MS.push_back(in__.cholesky_factor_corr_constrain(N_Mage));
            }
            current_statement_begin__ = 125;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_MS;
            (void) zeta_MS;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_MS = in__.matrix_constrain(N, N_Mage, lp__);
            else
                zeta_MS = in__.matrix_constrain(N, N_Mage);
            current_statement_begin__ = 127;
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > mu_p_MS;
            size_t mu_p_MS_d_0_max__ = N_pop;
            size_t mu_p_MS_d_1_max__ = N_Mage;
            mu_p_MS.resize(mu_p_MS_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu_p_MS_d_0_max__; ++d_0__) {
                mu_p_MS[d_0__].reserve(mu_p_MS_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < mu_p_MS_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        mu_p_MS[d_0__].push_back(in__.simplex_constrain(N_MSage, lp__));
                    else
                        mu_p_MS[d_0__].push_back(in__.simplex_constrain(N_MSage));
                }
            }
            current_statement_begin__ = 128;
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > sigma_p_MS;
            size_t sigma_p_MS_d_0_max__ = N_pop;
            size_t sigma_p_MS_d_1_max__ = N_Mage;
            sigma_p_MS.resize(sigma_p_MS_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_p_MS_d_0_max__; ++d_0__) {
                sigma_p_MS[d_0__].reserve(sigma_p_MS_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < sigma_p_MS_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        sigma_p_MS[d_0__].push_back(in__.vector_lb_constrain(0, (N_MSage - 1), lp__));
                    else
                        sigma_p_MS[d_0__].push_back(in__.vector_lb_constrain(0, (N_MSage - 1)));
                }
            }
            current_statement_begin__ = 129;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > L_p_MS;
            size_t L_p_MS_d_0_max__ = N_pop;
            L_p_MS.reserve(L_p_MS_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < L_p_MS_d_0_max__; ++d_0__) {
                if (jacobian__)
                    L_p_MS.push_back(in__.cholesky_factor_corr_constrain((N_Mage * (N_MSage - 1)), lp__));
                else
                    L_p_MS.push_back(in__.cholesky_factor_corr_constrain((N_Mage * (N_MSage - 1))));
            }
            current_statement_begin__ = 130;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> zeta_p_MS;
            (void) zeta_p_MS;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_p_MS = in__.matrix_constrain(N, (N_Mage * (N_MSage - 1)), lp__);
            else
                zeta_p_MS = in__.matrix_constrain(N, (N_Mage * (N_MSage - 1)));
            current_statement_begin__ = 132;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_HOS;
            (void) p_HOS;  // dummy to suppress unused var warning
            if (jacobian__)
                p_HOS = in__.vector_lub_constrain(0, 1, N_H, lp__);
            else
                p_HOS = in__.vector_lub_constrain(0, 1, N_H);
            current_statement_begin__ = 133;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rate;
            (void) B_rate;  // dummy to suppress unused var warning
            if (jacobian__)
                B_rate = in__.vector_lub_constrain(0, 1, N_B, lp__);
            else
                B_rate = in__.vector_lub_constrain(0, 1, N_B);
            current_statement_begin__ = 135;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> M_init;
            (void) M_init;  // dummy to suppress unused var warning
            if (jacobian__)
                M_init = in__.vector_lb_constrain(0, (max_Mage * N_pop), lp__);
            else
                M_init = in__.vector_lb_constrain(0, (max_Mage * N_pop));
            current_statement_begin__ = 136;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > q_M_init;
            size_t q_M_init_d_0_max__ = (max_Mage * N_pop);
            q_M_init.reserve(q_M_init_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < q_M_init_d_0_max__; ++d_0__) {
                if (jacobian__)
                    q_M_init.push_back(in__.simplex_constrain(N_Mage, lp__));
                else
                    q_M_init.push_back(in__.simplex_constrain(N_Mage));
            }
            current_statement_begin__ = 137;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_init;
            (void) S_init;  // dummy to suppress unused var warning
            if (jacobian__)
                S_init = in__.vector_lb_constrain(0, (max_age * N_pop), lp__);
            else
                S_init = in__.vector_lb_constrain(0, (max_age * N_pop));
            current_statement_begin__ = 138;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > q_GR_init;
            size_t q_GR_init_d_0_max__ = (max_age * N_pop);
            q_GR_init.reserve(q_GR_init_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < q_GR_init_d_0_max__; ++d_0__) {
                if (jacobian__)
                    q_GR_init.push_back(in__.simplex_constrain(N_GRage, lp__));
                else
                    q_GR_init.push_back(in__.simplex_constrain(N_GRage));
            }
            current_statement_begin__ = 139;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_M;
            (void) tau_M;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_M = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                tau_M = in__.vector_lb_constrain(0, N_pop);
            current_statement_begin__ = 140;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_S;
            (void) tau_S;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_S = in__.vector_lb_constrain(0, N_pop, lp__);
            else
                tau_S = in__.vector_lb_constrain(0, N_pop);
            // transformed parameters
            current_statement_begin__ = 146;
            validate_non_negative_index("M_hat", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> M_hat(N);
            stan::math::initialize(M_hat, DUMMY_VAR__);
            stan::math::fill(M_hat, DUMMY_VAR__);
            current_statement_begin__ = 147;
            validate_non_negative_index("epsilon_M", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> epsilon_M(N);
            stan::math::initialize(epsilon_M, DUMMY_VAR__);
            stan::math::fill(epsilon_M, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("M0", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> M0(N);
            stan::math::initialize(M0, DUMMY_VAR__);
            stan::math::fill(M0, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("M", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> M(N);
            stan::math::initialize(M, DUMMY_VAR__);
            stan::math::fill(M, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("gamma_M", "N_pop", N_pop);
            validate_non_negative_index("gamma_M", "(N_Mage - 1)", (N_Mage - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> gamma_M(N_pop, (N_Mage - 1));
            stan::math::initialize(gamma_M, DUMMY_VAR__);
            stan::math::fill(gamma_M, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("p_M", "N", N);
            validate_non_negative_index("p_M", "N_Mage", N_Mage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> p_M(N, N_Mage);
            stan::math::initialize(p_M, DUMMY_VAR__);
            stan::math::fill(p_M, DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("q_M", "N", N);
            validate_non_negative_index("q_M", "N_Mage", N_Mage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> q_M(N, N_Mage);
            stan::math::initialize(q_M, DUMMY_VAR__);
            stan::math::fill(q_M, DUMMY_VAR__);
            current_statement_begin__ = 155;
            validate_non_negative_index("epsilon_MS", "N", N);
            validate_non_negative_index("epsilon_MS", "N_Mage", N_Mage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> epsilon_MS(N, N_Mage);
            stan::math::initialize(epsilon_MS, DUMMY_VAR__);
            stan::math::fill(epsilon_MS, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("s_MS", "N", N);
            validate_non_negative_index("s_MS", "N_Mage", N_Mage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> s_MS(N, N_Mage);
            stan::math::initialize(s_MS, DUMMY_VAR__);
            stan::math::fill(s_MS, DUMMY_VAR__);
            current_statement_begin__ = 157;
            validate_non_negative_index("gamma_MS", "(N_MSage - 1)", (N_MSage - 1));
            validate_non_negative_index("gamma_MS", "N_pop", N_pop);
            validate_non_negative_index("gamma_MS", "N_Mage", N_Mage);
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > gamma_MS(N_pop, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >(N_Mage, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((N_MSage - 1))));
            stan::math::initialize(gamma_MS, DUMMY_VAR__);
            stan::math::fill(gamma_MS, DUMMY_VAR__);
            current_statement_begin__ = 158;
            validate_non_negative_index("p_MS", "N_MSage", N_MSage);
            validate_non_negative_index("p_MS", "N", N);
            validate_non_negative_index("p_MS", "N_Mage", N_Mage);
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > p_MS(N, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >(N_Mage, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N_MSage)));
            stan::math::initialize(p_MS, DUMMY_VAR__);
            stan::math::fill(p_MS, DUMMY_VAR__);
            current_statement_begin__ = 160;
            validate_non_negative_index("p_HOS_all", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_HOS_all(N);
            stan::math::initialize(p_HOS_all, DUMMY_VAR__);
            stan::math::fill(p_HOS_all, DUMMY_VAR__);
            current_statement_begin__ = 161;
            validate_non_negative_index("S_W", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_W(N);
            stan::math::initialize(S_W, DUMMY_VAR__);
            stan::math::fill(S_W, DUMMY_VAR__);
            current_statement_begin__ = 162;
            validate_non_negative_index("S_H", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_H(N);
            stan::math::initialize(S_H, DUMMY_VAR__);
            stan::math::fill(S_H, DUMMY_VAR__);
            current_statement_begin__ = 163;
            validate_non_negative_index("S", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S(N);
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("B_rate_all", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rate_all(N);
            stan::math::initialize(B_rate_all, DUMMY_VAR__);
            stan::math::fill(B_rate_all, DUMMY_VAR__);
            current_statement_begin__ = 166;
            validate_non_negative_index("q_GR", "N", N);
            validate_non_negative_index("q_GR", "N_GRage", N_GRage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> q_GR(N, N_GRage);
            stan::math::initialize(q_GR, DUMMY_VAR__);
            stan::math::fill(q_GR, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("q_MS", "N", N);
            validate_non_negative_index("q_MS", "N_MSage", N_MSage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> q_MS(N, N_MSage);
            stan::math::initialize(q_MS, DUMMY_VAR__);
            stan::math::fill(q_MS, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 170;
            stan::math::assign(p_HOS_all, rep_vector(0, N));
            current_statement_begin__ = 171;
            stan::model::assign(p_HOS_all, 
                        stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), 
                        p_HOS, 
                        "assigning variable p_HOS_all");
            current_statement_begin__ = 172;
            stan::math::assign(B_rate_all, rep_vector(0, N));
            current_statement_begin__ = 173;
            stan::model::assign(B_rate_all, 
                        stan::model::cons_list(stan::model::index_multi(which_B), stan::model::nil_index_list()), 
                        B_rate, 
                        "assigning variable B_rate_all");
            current_statement_begin__ = 176;
            for (int j = 1; j <= N_pop; ++j) {
                current_statement_begin__ = 179;
                stan::model::assign(gamma_M, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(subtract(stan::math::log(stan::model::rvalue(mu_p_M, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, (N_Mage - 1)), stan::model::nil_index_list())), "mu_p_M")), stan::math::log(get_base1(get_base1(mu_p_M, j, "mu_p_M", 1), N_Mage, "mu_p_M", 2)))), 
                            "assigning variable gamma_M");
                current_statement_begin__ = 182;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 184;
                    stan::model::assign(gamma_MS, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                subtract(stan::math::log(stan::model::rvalue(mu_p_MS, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(a), stan::model::cons_list(stan::model::index_min_max(1, (N_MSage - 1)), stan::model::nil_index_list()))), "mu_p_MS")), stan::math::log(get_base1(get_base1(get_base1(mu_p_MS, j, "mu_p_MS", 1), a, "mu_p_MS", 2), N_MSage, "mu_p_MS", 3))), 
                                "assigning variable gamma_MS");
                }
            }
            current_statement_begin__ = 190;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 192;
                validate_non_negative_index("alr_p_M", "N_Mage", N_Mage);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> alr_p_M(N_Mage);
                stan::math::initialize(alr_p_M, DUMMY_VAR__);
                stan::math::fill(alr_p_M, DUMMY_VAR__);
                current_statement_begin__ = 193;
                validate_non_negative_index("M_a", "N_Mage", N_Mage);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> M_a(N_Mage);
                stan::math::initialize(M_a, DUMMY_VAR__);
                stan::math::fill(M_a, DUMMY_VAR__);
                current_statement_begin__ = 194;
                validate_non_negative_index("gamma_MS_i", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_MS_i((N_Mage * (N_MSage - 1)));
                stan::math::initialize(gamma_MS_i, DUMMY_VAR__);
                stan::math::fill(gamma_MS_i, DUMMY_VAR__);
                current_statement_begin__ = 195;
                validate_non_negative_index("sigma_p_MS_i", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_p_MS_i((N_Mage * (N_MSage - 1)));
                stan::math::initialize(sigma_p_MS_i, DUMMY_VAR__);
                stan::math::fill(sigma_p_MS_i, DUMMY_VAR__);
                current_statement_begin__ = 196;
                validate_non_negative_index("alr_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alr_p_MS((N_Mage * (N_MSage - 1)));
                stan::math::initialize(alr_p_MS, DUMMY_VAR__);
                stan::math::fill(alr_p_MS, DUMMY_VAR__);
                current_statement_begin__ = 197;
                validate_non_negative_index("S_W_a", "N_Mage", N_Mage);
                validate_non_negative_index("S_W_a", "N_MSage", N_MSage);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> S_W_a(N_Mage, N_MSage);
                stan::math::initialize(S_W_a, DUMMY_VAR__);
                stan::math::fill(S_W_a, DUMMY_VAR__);
                current_statement_begin__ = 198;
                int ii(0);
                (void) ii;  // dummy to suppress unused var warning
                stan::math::fill(ii, std::numeric_limits<int>::min());
                current_statement_begin__ = 202;
                stan::math::assign(alr_p_M, rep_row_vector(0, N_Mage));
                current_statement_begin__ = 203;
                stan::model::assign(alr_p_M, 
                            stan::model::cons_list(stan::model::index_min_max(1, (N_Mage - 1)), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(gamma_M, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "gamma_M"), elt_multiply(stan::model::rvalue(sigma_p_M, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sigma_p_M"), transpose(multiply(get_base1(L_p_M, get_base1(pop, i, "pop", 1), "L_p_M", 1), transpose(stan::model::rvalue(zeta_p_M, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_p_M")))))), 
                            "assigning variable alr_p_M");
                current_statement_begin__ = 204;
                stan::math::assign(alr_p_M, stan::math::exp(alr_p_M));
                current_statement_begin__ = 205;
                stan::model::assign(p_M, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            divide(alr_p_M, sum(alr_p_M)), 
                            "assigning variable p_M");
                current_statement_begin__ = 209;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 211;
                    stan::model::assign(gamma_MS_i, 
                                stan::model::cons_list(stan::model::index_min_max((((a - 1) * (N_MSage - 1)) + 1), (a * (N_MSage - 1))), stan::model::nil_index_list()), 
                                get_base1(get_base1(gamma_MS, get_base1(pop, i, "pop", 1), "gamma_MS", 1), a, "gamma_MS", 2), 
                                "assigning variable gamma_MS_i");
                    current_statement_begin__ = 212;
                    stan::model::assign(sigma_p_MS_i, 
                                stan::model::cons_list(stan::model::index_min_max((((a - 1) * (N_MSage - 1)) + 1), (a * (N_MSage - 1))), stan::model::nil_index_list()), 
                                get_base1(get_base1(sigma_p_MS, get_base1(pop, i, "pop", 1), "sigma_p_MS", 1), a, "sigma_p_MS", 2), 
                                "assigning variable sigma_p_MS_i");
                }
                current_statement_begin__ = 214;
                stan::math::assign(alr_p_MS, add(gamma_MS_i, elt_multiply(sigma_p_MS_i, multiply(get_base1(L_p_MS, get_base1(pop, i, "pop", 1), "L_p_MS", 1), transpose(stan::model::rvalue(zeta_p_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_p_MS"))))));
                current_statement_begin__ = 216;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 218;
                    stan::model::assign(p_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                stan::math::exp(append_row(stan::model::rvalue(alr_p_MS, stan::model::cons_list(stan::model::index_min_max((((a - 1) * (N_MSage - 1)) + 1), (a * (N_MSage - 1))), stan::model::nil_index_list()), "alr_p_MS"), 0)), 
                                "assigning variable p_MS");
                    current_statement_begin__ = 219;
                    stan::model::assign(p_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                divide(get_base1(get_base1(p_MS, i, "p_MS", 1), a, "p_MS", 2), sum(get_base1(get_base1(p_MS, i, "p_MS", 1), a, "p_MS", 2))), 
                                "assigning variable p_MS");
                }
                current_statement_begin__ = 224;
                if (as_bool(logical_eq(get_base1(pop_year_indx, i, "pop_year_indx", 1), 1))) {
                    current_statement_begin__ = 226;
                    stan::model::assign(epsilon_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(zeta_M, i, "zeta_M", 1) * get_base1(sigma_M, get_base1(pop, i, "pop", 1), "sigma_M", 1)) / stan::math::sqrt((1 - pow(get_base1(rho_M, get_base1(pop, i, "pop", 1), "rho_M", 1), 2)))), 
                                "assigning variable epsilon_M");
                    current_statement_begin__ = 228;
                    stan::model::assign(epsilon_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                elt_divide(elt_multiply(stan::model::rvalue(zeta_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_MS"), stan::model::rvalue(sigma_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sigma_MS")), stan::math::sqrt(subtract(1, square(stan::model::rvalue(rho_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rho_MS"))))), 
                                "assigning variable epsilon_MS");
                } else {
                    current_statement_begin__ = 232;
                    stan::model::assign(epsilon_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(rho_M, get_base1(pop, i, "pop", 1), "rho_M", 1) * get_base1(epsilon_M, (i - 1), "epsilon_M", 1)) + (get_base1(zeta_M, i, "zeta_M", 1) * get_base1(sigma_M, get_base1(pop, i, "pop", 1), "sigma_M", 1))), 
                                "assigning variable epsilon_M");
                    current_statement_begin__ = 233;
                    stan::model::assign(epsilon_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(add(elt_multiply(stan::model::rvalue(rho_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rho_MS"), stan::model::rvalue(epsilon_MS, stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "epsilon_MS")), elt_multiply(stan::model::rvalue(sigma_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sigma_MS"), transpose(multiply(get_base1(L_MS, get_base1(pop, i, "pop", 1), "L_MS", 1), transpose(stan::model::rvalue(zeta_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_MS"))))))), 
                                "assigning variable epsilon_MS");
                }
                current_statement_begin__ = 236;
                stan::model::assign(s_MS, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            inv_logit(add(add(logit(stan::model::rvalue(mu_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_MS")), dot_product(stan::model::rvalue(X_MS, stan::model::cons_list(stan::model::index_uni(get_base1(year, i, "year", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_MS"), stan::model::rvalue(beta_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta_MS"))), stan::model::rvalue(epsilon_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "epsilon_MS"))), 
                            "assigning variable s_MS");
                current_statement_begin__ = 239;
                if (as_bool(logical_lte(get_base1(pop_year_indx, i, "pop_year_indx", 1), max_Mage))) {
                    current_statement_begin__ = 242;
                    stan::math::assign(ii, (((get_base1(pop, i, "pop", 1) - 1) * max_Mage) + get_base1(pop_year_indx, i, "pop_year_indx", 1)));
                    current_statement_begin__ = 243;
                    stan::model::assign(M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(M_init, ii, "M_init", 1), 
                                "assigning variable M");
                    current_statement_begin__ = 244;
                    stan::model::assign(q_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                to_row_vector(stan::model::rvalue(q_M_init, stan::model::cons_list(stan::model::index_uni(ii), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_M_init")), 
                                "assigning variable q_M");
                } else {
                    current_statement_begin__ = 248;
                    for (int a = 1; a <= N_Mage; ++a) {
                        current_statement_begin__ = 251;
                        stan::model::assign(M_a, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    (get_base1(M0, (i - get_base1(smolt_ages, a, "smolt_ages", 1)), "M0", 1) * get_base1(p_M, (i - get_base1(smolt_ages, a, "smolt_ages", 1)), a, "p_M", 1)), 
                                    "assigning variable M_a");
                    }
                    current_statement_begin__ = 253;
                    stan::model::assign(M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sum(M_a), 
                                "assigning variable M");
                    current_statement_begin__ = 254;
                    stan::model::assign(q_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                divide(M_a, get_base1(M, i, "M", 1)), 
                                "assigning variable q_M");
                }
                current_statement_begin__ = 258;
                if (as_bool(logical_lte(get_base1(pop_year_indx, i, "pop_year_indx", 1), max_age))) {
                    current_statement_begin__ = 261;
                    stan::math::assign(ii, (((get_base1(pop, i, "pop", 1) - 1) * max_age) + get_base1(pop_year_indx, i, "pop_year_indx", 1)));
                    current_statement_begin__ = 262;
                    stan::model::assign(S_W, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(S_init, ii, "S_init", 1) * (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))), 
                                "assigning variable S_W");
                    current_statement_begin__ = 263;
                    stan::model::assign(S_H, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(S_init, ii, "S_init", 1) * get_base1(p_HOS_all, i, "p_HOS_all", 1)), 
                                "assigning variable S_H");
                    current_statement_begin__ = 264;
                    stan::model::assign(q_GR, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                to_row_vector(stan::model::rvalue(q_GR_init, stan::model::cons_list(stan::model::index_uni(ii), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR_init")), 
                                "assigning variable q_GR");
                    current_statement_begin__ = 265;
                    stan::math::assign(S_W_a, to_matrix(multiply(get_base1(S_W, i, "S_W", 1), stan::model::rvalue(q_GR, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR")), N_Mage, N_MSage, 0));
                    current_statement_begin__ = 266;
                    stan::model::assign(q_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                col_sums(to_matrix(stan::model::rvalue(q_GR, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR"), N_Mage, N_MSage, 0), pstream__), 
                                "assigning variable q_MS");
                } else {
                    current_statement_begin__ = 270;
                    for (int sa = 1; sa <= N_Mage; ++sa) {
                        current_statement_begin__ = 272;
                        for (int oa = 1; oa <= N_MSage; ++oa) {
                            current_statement_begin__ = 273;
                            stan::model::assign(S_W_a, 
                                        stan::model::cons_list(stan::model::index_uni(sa), stan::model::cons_list(stan::model::index_uni(oa), stan::model::nil_index_list())), 
                                        (((get_base1(M, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), "M", 1) * get_base1(q_M, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), sa, "q_M", 1)) * get_base1(s_MS, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), sa, "s_MS", 1)) * get_base1(get_base1(get_base1(p_MS, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), "p_MS", 1), sa, "p_MS", 2), oa, "p_MS", 3)), 
                                        "assigning variable S_W_a");
                        }
                    }
                    current_statement_begin__ = 276;
                    stan::model::assign(S_W_a, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, N_MSage), stan::model::nil_index_list())), 
                                stan::model::deep_copy(multiply(multiply(stan::model::rvalue(S_W_a, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, N_MSage), stan::model::nil_index_list())), "S_W_a"), (1 - get_base1(F_rate, i, "F_rate", 1))), (1 - get_base1(B_rate_all, i, "B_rate_all", 1)))), 
                                "assigning variable S_W_a");
                    current_statement_begin__ = 277;
                    stan::model::assign(S_W, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sum(S_W_a), 
                                "assigning variable S_W");
                    current_statement_begin__ = 278;
                    stan::model::assign(S_H, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(S_W, i, "S_W", 1) * get_base1(p_HOS_all, i, "p_HOS_all", 1)) / (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))), 
                                "assigning variable S_H");
                    current_statement_begin__ = 279;
                    stan::model::assign(q_GR, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                divide(to_row_vector(transpose(S_W_a)), get_base1(S_W, i, "S_W", 1)), 
                                "assigning variable q_GR");
                    current_statement_begin__ = 280;
                    stan::model::assign(q_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                col_sums(to_matrix(stan::model::rvalue(q_GR, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR"), N_Mage, N_MSage, 0), pstream__), 
                                "assigning variable q_MS");
                }
                current_statement_begin__ = 283;
                stan::model::assign(S, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(S_W, i, "S_W", 1) + get_base1(S_H, i, "S_H", 1)), 
                            "assigning variable S");
                current_statement_begin__ = 286;
                stan::model::assign(M_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(A, i, "A", 1) * SR(SR_fun, get_base1(alpha, get_base1(pop, i, "pop", 1), "alpha", 1), get_base1(Rmax, get_base1(pop, i, "pop", 1), "Rmax", 1), get_base1(S, i, "S", 1), get_base1(A, i, "A", 1), pstream__)), 
                            "assigning variable M_hat");
                current_statement_begin__ = 287;
                stan::model::assign(M0, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(M_hat, i, "M_hat", 1) * stan::math::exp((dot_product(stan::model::rvalue(X_M, stan::model::cons_list(stan::model::index_uni(get_base1(year, i, "year", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_M"), stan::model::rvalue(beta_M, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta_M")) + get_base1(epsilon_M, i, "epsilon_M", 1)))), 
                            "assigning variable M0");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 146;
            size_t M_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_hat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(M_hat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: M_hat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable M_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "M_hat", M_hat, 0);
            current_statement_begin__ = 147;
            size_t epsilon_M_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < epsilon_M_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(epsilon_M(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: epsilon_M" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable epsilon_M: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 148;
            size_t M0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(M0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: M0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable M0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "M0", M0, 0);
            current_statement_begin__ = 149;
            size_t M_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(M(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: M" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable M: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "M", M, 0);
            current_statement_begin__ = 151;
            size_t gamma_M_j_1_max__ = N_pop;
            size_t gamma_M_j_2_max__ = (N_Mage - 1);
            for (size_t j_1__ = 0; j_1__ < gamma_M_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < gamma_M_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(gamma_M(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: gamma_M" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma_M: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 152;
            size_t p_M_j_1_max__ = N;
            size_t p_M_j_2_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < p_M_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < p_M_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(p_M(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: p_M" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_M: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "p_M", p_M, 0);
            check_less_or_equal(function__, "p_M", p_M, 1);
            current_statement_begin__ = 153;
            size_t q_M_j_1_max__ = N;
            size_t q_M_j_2_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < q_M_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < q_M_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(q_M(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: q_M" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable q_M: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "q_M", q_M, 0);
            check_less_or_equal(function__, "q_M", q_M, 1);
            current_statement_begin__ = 155;
            size_t epsilon_MS_j_1_max__ = N;
            size_t epsilon_MS_j_2_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < epsilon_MS_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < epsilon_MS_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(epsilon_MS(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: epsilon_MS" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable epsilon_MS: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 156;
            size_t s_MS_j_1_max__ = N;
            size_t s_MS_j_2_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < s_MS_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < s_MS_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(s_MS(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: s_MS" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable s_MS: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "s_MS", s_MS, 0);
            check_less_or_equal(function__, "s_MS", s_MS, 1);
            current_statement_begin__ = 157;
            size_t gamma_MS_k_0_max__ = N_pop;
            size_t gamma_MS_k_1_max__ = N_Mage;
            size_t gamma_MS_j_1_max__ = (N_MSage - 1);
            for (size_t k_0__ = 0; k_0__ < gamma_MS_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < gamma_MS_k_1_max__; ++k_1__) {
                    for (size_t j_1__ = 0; j_1__ < gamma_MS_j_1_max__; ++j_1__) {
                        if (stan::math::is_uninitialized(gamma_MS[k_0__][k_1__](j_1__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: gamma_MS" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "(" << j_1__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma_MS: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            current_statement_begin__ = 158;
            size_t p_MS_k_0_max__ = N;
            size_t p_MS_k_1_max__ = N_Mage;
            size_t p_MS_j_1_max__ = N_MSage;
            for (size_t k_0__ = 0; k_0__ < p_MS_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < p_MS_k_1_max__; ++k_1__) {
                    for (size_t j_1__ = 0; j_1__ < p_MS_j_1_max__; ++j_1__) {
                        if (stan::math::is_uninitialized(p_MS[k_0__][k_1__](j_1__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: p_MS" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "(" << j_1__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_MS: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            size_t p_MS_i_0_max__ = N;
            size_t p_MS_i_1_max__ = N_Mage;
            for (size_t i_0__ = 0; i_0__ < p_MS_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < p_MS_i_1_max__; ++i_1__) {
                    stan::math::check_simplex(function__, "p_MS[i_0__][i_1__]", p_MS[i_0__][i_1__]);
                }
            }
            current_statement_begin__ = 160;
            size_t p_HOS_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_HOS_all(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_HOS_all" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_HOS_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 161;
            size_t S_W_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S_W(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S_W" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_W: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "S_W", S_W, 0);
            current_statement_begin__ = 162;
            size_t S_H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S_H(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S_H" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_H: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 163;
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 164;
            size_t B_rate_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(B_rate_all(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: B_rate_all" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable B_rate_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "B_rate_all", B_rate_all, 0);
            check_less_or_equal(function__, "B_rate_all", B_rate_all, 1);
            current_statement_begin__ = 166;
            size_t q_GR_j_1_max__ = N;
            size_t q_GR_j_2_max__ = N_GRage;
            for (size_t j_1__ = 0; j_1__ < q_GR_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < q_GR_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(q_GR(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: q_GR" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable q_GR: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "q_GR", q_GR, 0);
            check_less_or_equal(function__, "q_GR", q_GR, 1);
            current_statement_begin__ = 167;
            size_t q_MS_j_1_max__ = N;
            size_t q_MS_j_2_max__ = N_MSage;
            for (size_t j_1__ = 0; j_1__ < q_MS_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < q_MS_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(q_MS(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: q_MS" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable q_MS: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "q_MS", q_MS, 0);
            check_less_or_equal(function__, "q_MS", q_MS, 1);
            // model body
            {
            current_statement_begin__ = 292;
            validate_non_negative_index("B_take", "N_B", N_B);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_take(N_B);
            stan::math::initialize(B_take, DUMMY_VAR__);
            stan::math::fill(B_take, DUMMY_VAR__);
            current_statement_begin__ = 297;
            lp_accum__.add(lognormal_log<propto__>(alpha, 2, 2));
            current_statement_begin__ = 298;
            lp_accum__.add(lognormal_log<propto__>(Rmax, 8, 1));
            current_statement_begin__ = 299;
            lp_accum__.add(normal_log<propto__>(to_vector(beta_M), 0, 5));
            current_statement_begin__ = 300;
            lp_accum__.add(pexp_lpdf<propto__>(rho_M, 0, 0.85, 20, pstream__));
            current_statement_begin__ = 301;
            lp_accum__.add(normal_log<propto__>(sigma_M, 0, 5));
            current_statement_begin__ = 302;
            lp_accum__.add(normal_log<propto__>(zeta_M, 0, 1));
            current_statement_begin__ = 305;
            lp_accum__.add(normal_log<propto__>(to_vector(sigma_p_M), 0, 5));
            current_statement_begin__ = 306;
            for (int j = 1; j <= N_pop; ++j) {
                current_statement_begin__ = 307;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(get_base1(L_p_M, j, "L_p_M", 1), 1));
            }
            current_statement_begin__ = 310;
            lp_accum__.add(normal_log<propto__>(to_vector(zeta_p_M), 0, 1));
            current_statement_begin__ = 313;
            lp_accum__.add(normal_log<propto__>(to_vector(beta_MS), 0, 5));
            current_statement_begin__ = 314;
            lp_accum__.add(normal_log<propto__>(to_vector(sigma_MS), 0, 5));
            current_statement_begin__ = 315;
            lp_accum__.add(pexp_lpdf<propto__>(to_vector(rho_MS), 0, 0.85, 20, pstream__));
            current_statement_begin__ = 316;
            for (int j = 1; j <= N_pop; ++j) {
                current_statement_begin__ = 317;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(get_base1(L_MS, j, "L_MS", 1), 1));
            }
            current_statement_begin__ = 318;
            lp_accum__.add(normal_log<propto__>(to_vector(zeta_MS), 0, 1));
            current_statement_begin__ = 321;
            for (int j = 1; j <= N_pop; ++j) {
                current_statement_begin__ = 323;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 324;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(sigma_p_MS, j, "sigma_p_MS", 1), a, "sigma_p_MS", 2), 0, 5));
                }
                current_statement_begin__ = 325;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(get_base1(L_p_MS, j, "L_p_MS", 1), 1));
            }
            current_statement_begin__ = 329;
            lp_accum__.add(normal_log<propto__>(to_vector(zeta_p_MS), 0, 1));
            current_statement_begin__ = 332;
            stan::math::assign(B_take, elt_divide(elt_multiply(elt_multiply(B_rate, stan::model::rvalue(S_W, stan::model::cons_list(stan::model::index_multi(which_B), stan::model::nil_index_list()), "S_W")), subtract(1, stan::model::rvalue(q_MS, stan::model::cons_list(stan::model::index_multi(which_B), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "q_MS"))), subtract(1, B_rate)));
            current_statement_begin__ = 333;
            lp_accum__.add(lognormal_log<propto__>(B_take_obs, stan::math::log(B_take), 0.1));
            current_statement_begin__ = 336;
            lp_accum__.add(lognormal_log<propto__>(M_init, 0, 5));
            current_statement_begin__ = 337;
            lp_accum__.add(lognormal_log<propto__>(S_init, 0, 5));
            current_statement_begin__ = 338;
            lp_accum__.add(lognormal_log<propto__>(tau_M, -(3), 0.2));
            current_statement_begin__ = 340;
            lp_accum__.add(lognormal_log<propto__>(tau_S, -(3), 0.2));
            current_statement_begin__ = 343;
            lp_accum__.add(lognormal_log<propto__>(stan::model::rvalue(M_obs, stan::model::cons_list(stan::model::index_multi(which_M_obs), stan::model::nil_index_list()), "M_obs"), stan::math::log(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_multi(which_M_obs), stan::model::nil_index_list()), "M")), stan::model::rvalue(tau_M, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(pop, stan::model::cons_list(stan::model::index_multi(which_M_obs), stan::model::nil_index_list()), "pop")), stan::model::nil_index_list()), "tau_M")));
            current_statement_begin__ = 344;
            lp_accum__.add(sum(elt_multiply(n_Mage_obs, stan::math::log(q_M))));
            current_statement_begin__ = 345;
            lp_accum__.add(lognormal_log<propto__>(stan::model::rvalue(S_obs, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S_obs"), stan::math::log(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "S")), stan::model::rvalue(tau_S, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(pop, stan::model::cons_list(stan::model::index_multi(which_S_obs), stan::model::nil_index_list()), "pop")), stan::model::nil_index_list()), "tau_S")));
            current_statement_begin__ = 346;
            lp_accum__.add(sum(elt_multiply(n_MSage_obs, stan::math::log(q_MS))));
            current_statement_begin__ = 347;
            lp_accum__.add(sum(elt_multiply(n_GRage_obs, stan::math::log(q_GR))));
            current_statement_begin__ = 348;
            lp_accum__.add(binomial_log<propto__>(n_H_obs, n_HW_obs, p_HOS));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("Rmax");
        names__.push_back("beta_M");
        names__.push_back("rho_M");
        names__.push_back("sigma_M");
        names__.push_back("zeta_M");
        names__.push_back("mu_p_M");
        names__.push_back("sigma_p_M");
        names__.push_back("L_p_M");
        names__.push_back("zeta_p_M");
        names__.push_back("mu_MS");
        names__.push_back("beta_MS");
        names__.push_back("rho_MS");
        names__.push_back("sigma_MS");
        names__.push_back("L_MS");
        names__.push_back("zeta_MS");
        names__.push_back("mu_p_MS");
        names__.push_back("sigma_p_MS");
        names__.push_back("L_p_MS");
        names__.push_back("zeta_p_MS");
        names__.push_back("p_HOS");
        names__.push_back("B_rate");
        names__.push_back("M_init");
        names__.push_back("q_M_init");
        names__.push_back("S_init");
        names__.push_back("q_GR_init");
        names__.push_back("tau_M");
        names__.push_back("tau_S");
        names__.push_back("M_hat");
        names__.push_back("epsilon_M");
        names__.push_back("M0");
        names__.push_back("M");
        names__.push_back("gamma_M");
        names__.push_back("p_M");
        names__.push_back("q_M");
        names__.push_back("epsilon_MS");
        names__.push_back("s_MS");
        names__.push_back("gamma_MS");
        names__.push_back("p_MS");
        names__.push_back("p_HOS_all");
        names__.push_back("S_W");
        names__.push_back("S_H");
        names__.push_back("S");
        names__.push_back("B_rate_all");
        names__.push_back("q_GR");
        names__.push_back("q_MS");
        names__.push_back("R_p_M");
        names__.push_back("R_MS");
        names__.push_back("R_p_MS");
        names__.push_back("LL_M_obs");
        names__.push_back("LL_n_smolt_age_obs");
        names__.push_back("LL_S_obs");
        names__.push_back("LL_n_ocean_age_obs");
        names__.push_back("LL_n_GR_age_obs");
        names__.push_back("LL_n_H_obs");
        names__.push_back("LL");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_X_M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_Mage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_Mage - 1));
        dims__.push_back((N_Mage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((N_Mage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_X_MS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dims__.push_back(N_MSage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dims__.push_back((N_MSage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_Mage * (N_MSage - 1)));
        dims__.push_back((N_Mage * (N_MSage - 1)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((N_Mage * (N_MSage - 1)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_B);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((max_Mage * N_pop));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((max_Mage * N_pop));
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((max_age * N_pop));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((max_age * N_pop));
        dims__.push_back(N_GRage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_Mage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dims__.push_back((N_MSage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_Mage);
        dims__.push_back(N_MSage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_GRage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N_MSage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_Mage - 1));
        dims__.push_back((N_Mage - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back(N_Mage);
        dims__.push_back(N_Mage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pop);
        dims__.push_back((N_Mage * (N_MSage - 1)));
        dims__.push_back((N_Mage * (N_MSage - 1)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_IPM_SMaS_np_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(0, N_pop);
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> Rmax = in__.vector_lb_constrain(0, N_pop);
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            vars__.push_back(Rmax(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_M = in__.matrix_constrain(N_pop, N_X_M);
        size_t beta_M_j_2_max__ = N_X_M;
        size_t beta_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_M_j_1_max__; ++j_1__) {
                vars__.push_back(beta_M(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho_M = in__.vector_lub_constrain(-(1), 1, N_pop);
        size_t rho_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_M_j_1_max__; ++j_1__) {
            vars__.push_back(rho_M(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_M = in__.vector_lb_constrain(0, N_pop);
        size_t sigma_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_M_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_M(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_M = in__.vector_constrain(N);
        size_t zeta_M_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_M_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_M(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > mu_p_M;
        size_t mu_p_M_d_0_max__ = N_pop;
        mu_p_M.reserve(mu_p_M_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu_p_M_d_0_max__; ++d_0__) {
            mu_p_M.push_back(in__.simplex_constrain(N_Mage));
        }
        size_t mu_p_M_j_1_max__ = N_Mage;
        size_t mu_p_M_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < mu_p_M_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_p_M_k_0_max__; ++k_0__) {
                vars__.push_back(mu_p_M[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_p_M = in__.matrix_lb_constrain(0, N_pop, (N_Mage - 1));
        size_t sigma_p_M_j_2_max__ = (N_Mage - 1);
        size_t sigma_p_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_p_M_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_p_M(j_1__, j_2__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > L_p_M;
        size_t L_p_M_d_0_max__ = N_pop;
        L_p_M.reserve(L_p_M_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < L_p_M_d_0_max__; ++d_0__) {
            L_p_M.push_back(in__.cholesky_factor_corr_constrain((N_Mage - 1)));
        }
        size_t L_p_M_j_2_max__ = (N_Mage - 1);
        size_t L_p_M_j_1_max__ = (N_Mage - 1);
        size_t L_p_M_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_M_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_p_M_k_0_max__; ++k_0__) {
                    vars__.push_back(L_p_M[k_0__](j_1__, j_2__));
                }
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_p_M = in__.matrix_constrain(N, (N_Mage - 1));
        size_t zeta_p_M_j_2_max__ = (N_Mage - 1);
        size_t zeta_p_M_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_M_j_1_max__; ++j_1__) {
                vars__.push_back(zeta_p_M(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_MS = in__.matrix_lub_constrain(0, 1, N_pop, N_Mage);
        size_t mu_MS_j_2_max__ = N_Mage;
        size_t mu_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < mu_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_MS_j_1_max__; ++j_1__) {
                vars__.push_back(mu_MS(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_MS = in__.matrix_constrain(N_pop, N_X_MS);
        size_t beta_MS_j_2_max__ = N_X_MS;
        size_t beta_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_MS_j_1_max__; ++j_1__) {
                vars__.push_back(beta_MS(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_MS = in__.matrix_lub_constrain(-(1), 1, N_pop, N_Mage);
        size_t rho_MS_j_2_max__ = N_Mage;
        size_t rho_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < rho_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_MS_j_1_max__; ++j_1__) {
                vars__.push_back(rho_MS(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_MS = in__.matrix_lb_constrain(0, N_pop, N_Mage);
        size_t sigma_MS_j_2_max__ = N_Mage;
        size_t sigma_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_MS_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_MS(j_1__, j_2__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > L_MS;
        size_t L_MS_d_0_max__ = N_pop;
        L_MS.reserve(L_MS_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < L_MS_d_0_max__; ++d_0__) {
            L_MS.push_back(in__.cholesky_factor_corr_constrain(N_Mage));
        }
        size_t L_MS_j_2_max__ = N_Mage;
        size_t L_MS_j_1_max__ = N_Mage;
        size_t L_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_MS_k_0_max__; ++k_0__) {
                    vars__.push_back(L_MS[k_0__](j_1__, j_2__));
                }
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_MS = in__.matrix_constrain(N, N_Mage);
        size_t zeta_MS_j_2_max__ = N_Mage;
        size_t zeta_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_MS_j_1_max__; ++j_1__) {
                vars__.push_back(zeta_MS(j_1__, j_2__));
            }
        }
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > mu_p_MS;
        size_t mu_p_MS_d_0_max__ = N_pop;
        size_t mu_p_MS_d_1_max__ = N_Mage;
        mu_p_MS.resize(mu_p_MS_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu_p_MS_d_0_max__; ++d_0__) {
            mu_p_MS[d_0__].reserve(mu_p_MS_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < mu_p_MS_d_1_max__; ++d_1__) {
                mu_p_MS[d_0__].push_back(in__.simplex_constrain(N_MSage));
            }
        }
        size_t mu_p_MS_j_1_max__ = N_MSage;
        size_t mu_p_MS_k_0_max__ = N_pop;
        size_t mu_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < mu_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < mu_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_p_MS_k_0_max__; ++k_0__) {
                    vars__.push_back(mu_p_MS[k_0__][k_1__](j_1__));
                }
            }
        }
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > sigma_p_MS;
        size_t sigma_p_MS_d_0_max__ = N_pop;
        size_t sigma_p_MS_d_1_max__ = N_Mage;
        sigma_p_MS.resize(sigma_p_MS_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_p_MS_d_0_max__; ++d_0__) {
            sigma_p_MS[d_0__].reserve(sigma_p_MS_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < sigma_p_MS_d_1_max__; ++d_1__) {
                sigma_p_MS[d_0__].push_back(in__.vector_lb_constrain(0, (N_MSage - 1)));
            }
        }
        size_t sigma_p_MS_j_1_max__ = (N_MSage - 1);
        size_t sigma_p_MS_k_0_max__ = N_pop;
        size_t sigma_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < sigma_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < sigma_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_p_MS_k_0_max__; ++k_0__) {
                    vars__.push_back(sigma_p_MS[k_0__][k_1__](j_1__));
                }
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > L_p_MS;
        size_t L_p_MS_d_0_max__ = N_pop;
        L_p_MS.reserve(L_p_MS_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < L_p_MS_d_0_max__; ++d_0__) {
            L_p_MS.push_back(in__.cholesky_factor_corr_constrain((N_Mage * (N_MSage - 1))));
        }
        size_t L_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t L_p_MS_j_1_max__ = (N_Mage * (N_MSage - 1));
        size_t L_p_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_p_MS_k_0_max__; ++k_0__) {
                    vars__.push_back(L_p_MS[k_0__](j_1__, j_2__));
                }
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> zeta_p_MS = in__.matrix_constrain(N, (N_Mage * (N_MSage - 1)));
        size_t zeta_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t zeta_p_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_MS_j_1_max__; ++j_1__) {
                vars__.push_back(zeta_p_MS(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p_HOS = in__.vector_lub_constrain(0, 1, N_H);
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            vars__.push_back(p_HOS(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> B_rate = in__.vector_lub_constrain(0, 1, N_B);
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            vars__.push_back(B_rate(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> M_init = in__.vector_lb_constrain(0, (max_Mage * N_pop));
        size_t M_init_j_1_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < M_init_j_1_max__; ++j_1__) {
            vars__.push_back(M_init(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > q_M_init;
        size_t q_M_init_d_0_max__ = (max_Mage * N_pop);
        q_M_init.reserve(q_M_init_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < q_M_init_d_0_max__; ++d_0__) {
            q_M_init.push_back(in__.simplex_constrain(N_Mage));
        }
        size_t q_M_init_j_1_max__ = N_Mage;
        size_t q_M_init_k_0_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_M_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_M_init_k_0_max__; ++k_0__) {
                vars__.push_back(q_M_init[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_init = in__.vector_lb_constrain(0, (max_age * N_pop));
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            vars__.push_back(S_init(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > q_GR_init;
        size_t q_GR_init_d_0_max__ = (max_age * N_pop);
        q_GR_init.reserve(q_GR_init_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < q_GR_init_d_0_max__; ++d_0__) {
            q_GR_init.push_back(in__.simplex_constrain(N_GRage));
        }
        size_t q_GR_init_j_1_max__ = N_GRage;
        size_t q_GR_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_GR_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_GR_init_k_0_max__; ++k_0__) {
                vars__.push_back(q_GR_init[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_M = in__.vector_lb_constrain(0, N_pop);
        size_t tau_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_M_j_1_max__; ++j_1__) {
            vars__.push_back(tau_M(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_S = in__.vector_lb_constrain(0, N_pop);
        size_t tau_S_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_S_j_1_max__; ++j_1__) {
            vars__.push_back(tau_S(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 146;
            validate_non_negative_index("M_hat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> M_hat(N);
            stan::math::initialize(M_hat, DUMMY_VAR__);
            stan::math::fill(M_hat, DUMMY_VAR__);
            current_statement_begin__ = 147;
            validate_non_negative_index("epsilon_M", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> epsilon_M(N);
            stan::math::initialize(epsilon_M, DUMMY_VAR__);
            stan::math::fill(epsilon_M, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("M0", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> M0(N);
            stan::math::initialize(M0, DUMMY_VAR__);
            stan::math::fill(M0, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("M", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> M(N);
            stan::math::initialize(M, DUMMY_VAR__);
            stan::math::fill(M, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("gamma_M", "N_pop", N_pop);
            validate_non_negative_index("gamma_M", "(N_Mage - 1)", (N_Mage - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> gamma_M(N_pop, (N_Mage - 1));
            stan::math::initialize(gamma_M, DUMMY_VAR__);
            stan::math::fill(gamma_M, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("p_M", "N", N);
            validate_non_negative_index("p_M", "N_Mage", N_Mage);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> p_M(N, N_Mage);
            stan::math::initialize(p_M, DUMMY_VAR__);
            stan::math::fill(p_M, DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("q_M", "N", N);
            validate_non_negative_index("q_M", "N_Mage", N_Mage);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> q_M(N, N_Mage);
            stan::math::initialize(q_M, DUMMY_VAR__);
            stan::math::fill(q_M, DUMMY_VAR__);
            current_statement_begin__ = 155;
            validate_non_negative_index("epsilon_MS", "N", N);
            validate_non_negative_index("epsilon_MS", "N_Mage", N_Mage);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> epsilon_MS(N, N_Mage);
            stan::math::initialize(epsilon_MS, DUMMY_VAR__);
            stan::math::fill(epsilon_MS, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("s_MS", "N", N);
            validate_non_negative_index("s_MS", "N_Mage", N_Mage);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> s_MS(N, N_Mage);
            stan::math::initialize(s_MS, DUMMY_VAR__);
            stan::math::fill(s_MS, DUMMY_VAR__);
            current_statement_begin__ = 157;
            validate_non_negative_index("gamma_MS", "(N_MSage - 1)", (N_MSage - 1));
            validate_non_negative_index("gamma_MS", "N_pop", N_pop);
            validate_non_negative_index("gamma_MS", "N_Mage", N_Mage);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > gamma_MS(N_pop, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N_Mage, Eigen::Matrix<double, Eigen::Dynamic, 1>((N_MSage - 1))));
            stan::math::initialize(gamma_MS, DUMMY_VAR__);
            stan::math::fill(gamma_MS, DUMMY_VAR__);
            current_statement_begin__ = 158;
            validate_non_negative_index("p_MS", "N_MSage", N_MSage);
            validate_non_negative_index("p_MS", "N", N);
            validate_non_negative_index("p_MS", "N_Mage", N_Mage);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > p_MS(N, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N_Mage, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_MSage)));
            stan::math::initialize(p_MS, DUMMY_VAR__);
            stan::math::fill(p_MS, DUMMY_VAR__);
            current_statement_begin__ = 160;
            validate_non_negative_index("p_HOS_all", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_HOS_all(N);
            stan::math::initialize(p_HOS_all, DUMMY_VAR__);
            stan::math::fill(p_HOS_all, DUMMY_VAR__);
            current_statement_begin__ = 161;
            validate_non_negative_index("S_W", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_W(N);
            stan::math::initialize(S_W, DUMMY_VAR__);
            stan::math::fill(S_W, DUMMY_VAR__);
            current_statement_begin__ = 162;
            validate_non_negative_index("S_H", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_H(N);
            stan::math::initialize(S_H, DUMMY_VAR__);
            stan::math::fill(S_H, DUMMY_VAR__);
            current_statement_begin__ = 163;
            validate_non_negative_index("S", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S(N);
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("B_rate_all", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> B_rate_all(N);
            stan::math::initialize(B_rate_all, DUMMY_VAR__);
            stan::math::fill(B_rate_all, DUMMY_VAR__);
            current_statement_begin__ = 166;
            validate_non_negative_index("q_GR", "N", N);
            validate_non_negative_index("q_GR", "N_GRage", N_GRage);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> q_GR(N, N_GRage);
            stan::math::initialize(q_GR, DUMMY_VAR__);
            stan::math::fill(q_GR, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("q_MS", "N", N);
            validate_non_negative_index("q_MS", "N_MSage", N_MSage);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> q_MS(N, N_MSage);
            stan::math::initialize(q_MS, DUMMY_VAR__);
            stan::math::fill(q_MS, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 170;
            stan::math::assign(p_HOS_all, rep_vector(0, N));
            current_statement_begin__ = 171;
            stan::model::assign(p_HOS_all, 
                        stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), 
                        p_HOS, 
                        "assigning variable p_HOS_all");
            current_statement_begin__ = 172;
            stan::math::assign(B_rate_all, rep_vector(0, N));
            current_statement_begin__ = 173;
            stan::model::assign(B_rate_all, 
                        stan::model::cons_list(stan::model::index_multi(which_B), stan::model::nil_index_list()), 
                        B_rate, 
                        "assigning variable B_rate_all");
            current_statement_begin__ = 176;
            for (int j = 1; j <= N_pop; ++j) {
                current_statement_begin__ = 179;
                stan::model::assign(gamma_M, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(subtract(stan::math::log(stan::model::rvalue(mu_p_M, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, (N_Mage - 1)), stan::model::nil_index_list())), "mu_p_M")), stan::math::log(get_base1(get_base1(mu_p_M, j, "mu_p_M", 1), N_Mage, "mu_p_M", 2)))), 
                            "assigning variable gamma_M");
                current_statement_begin__ = 182;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 184;
                    stan::model::assign(gamma_MS, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                subtract(stan::math::log(stan::model::rvalue(mu_p_MS, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(a), stan::model::cons_list(stan::model::index_min_max(1, (N_MSage - 1)), stan::model::nil_index_list()))), "mu_p_MS")), stan::math::log(get_base1(get_base1(get_base1(mu_p_MS, j, "mu_p_MS", 1), a, "mu_p_MS", 2), N_MSage, "mu_p_MS", 3))), 
                                "assigning variable gamma_MS");
                }
            }
            current_statement_begin__ = 190;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 192;
                validate_non_negative_index("alr_p_M", "N_Mage", N_Mage);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> alr_p_M(N_Mage);
                stan::math::initialize(alr_p_M, DUMMY_VAR__);
                stan::math::fill(alr_p_M, DUMMY_VAR__);
                current_statement_begin__ = 193;
                validate_non_negative_index("M_a", "N_Mage", N_Mage);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> M_a(N_Mage);
                stan::math::initialize(M_a, DUMMY_VAR__);
                stan::math::fill(M_a, DUMMY_VAR__);
                current_statement_begin__ = 194;
                validate_non_negative_index("gamma_MS_i", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_MS_i((N_Mage * (N_MSage - 1)));
                stan::math::initialize(gamma_MS_i, DUMMY_VAR__);
                stan::math::fill(gamma_MS_i, DUMMY_VAR__);
                current_statement_begin__ = 195;
                validate_non_negative_index("sigma_p_MS_i", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_p_MS_i((N_Mage * (N_MSage - 1)));
                stan::math::initialize(sigma_p_MS_i, DUMMY_VAR__);
                stan::math::fill(sigma_p_MS_i, DUMMY_VAR__);
                current_statement_begin__ = 196;
                validate_non_negative_index("alr_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alr_p_MS((N_Mage * (N_MSage - 1)));
                stan::math::initialize(alr_p_MS, DUMMY_VAR__);
                stan::math::fill(alr_p_MS, DUMMY_VAR__);
                current_statement_begin__ = 197;
                validate_non_negative_index("S_W_a", "N_Mage", N_Mage);
                validate_non_negative_index("S_W_a", "N_MSage", N_MSage);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> S_W_a(N_Mage, N_MSage);
                stan::math::initialize(S_W_a, DUMMY_VAR__);
                stan::math::fill(S_W_a, DUMMY_VAR__);
                current_statement_begin__ = 198;
                int ii(0);
                (void) ii;  // dummy to suppress unused var warning
                stan::math::fill(ii, std::numeric_limits<int>::min());
                current_statement_begin__ = 202;
                stan::math::assign(alr_p_M, rep_row_vector(0, N_Mage));
                current_statement_begin__ = 203;
                stan::model::assign(alr_p_M, 
                            stan::model::cons_list(stan::model::index_min_max(1, (N_Mage - 1)), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(gamma_M, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "gamma_M"), elt_multiply(stan::model::rvalue(sigma_p_M, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sigma_p_M"), transpose(multiply(get_base1(L_p_M, get_base1(pop, i, "pop", 1), "L_p_M", 1), transpose(stan::model::rvalue(zeta_p_M, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_p_M")))))), 
                            "assigning variable alr_p_M");
                current_statement_begin__ = 204;
                stan::math::assign(alr_p_M, stan::math::exp(alr_p_M));
                current_statement_begin__ = 205;
                stan::model::assign(p_M, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            divide(alr_p_M, sum(alr_p_M)), 
                            "assigning variable p_M");
                current_statement_begin__ = 209;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 211;
                    stan::model::assign(gamma_MS_i, 
                                stan::model::cons_list(stan::model::index_min_max((((a - 1) * (N_MSage - 1)) + 1), (a * (N_MSage - 1))), stan::model::nil_index_list()), 
                                get_base1(get_base1(gamma_MS, get_base1(pop, i, "pop", 1), "gamma_MS", 1), a, "gamma_MS", 2), 
                                "assigning variable gamma_MS_i");
                    current_statement_begin__ = 212;
                    stan::model::assign(sigma_p_MS_i, 
                                stan::model::cons_list(stan::model::index_min_max((((a - 1) * (N_MSage - 1)) + 1), (a * (N_MSage - 1))), stan::model::nil_index_list()), 
                                get_base1(get_base1(sigma_p_MS, get_base1(pop, i, "pop", 1), "sigma_p_MS", 1), a, "sigma_p_MS", 2), 
                                "assigning variable sigma_p_MS_i");
                }
                current_statement_begin__ = 214;
                stan::math::assign(alr_p_MS, add(gamma_MS_i, elt_multiply(sigma_p_MS_i, multiply(get_base1(L_p_MS, get_base1(pop, i, "pop", 1), "L_p_MS", 1), transpose(stan::model::rvalue(zeta_p_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_p_MS"))))));
                current_statement_begin__ = 216;
                for (int a = 1; a <= N_Mage; ++a) {
                    current_statement_begin__ = 218;
                    stan::model::assign(p_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                stan::math::exp(append_row(stan::model::rvalue(alr_p_MS, stan::model::cons_list(stan::model::index_min_max((((a - 1) * (N_MSage - 1)) + 1), (a * (N_MSage - 1))), stan::model::nil_index_list()), "alr_p_MS"), 0)), 
                                "assigning variable p_MS");
                    current_statement_begin__ = 219;
                    stan::model::assign(p_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list())), 
                                divide(get_base1(get_base1(p_MS, i, "p_MS", 1), a, "p_MS", 2), sum(get_base1(get_base1(p_MS, i, "p_MS", 1), a, "p_MS", 2))), 
                                "assigning variable p_MS");
                }
                current_statement_begin__ = 224;
                if (as_bool(logical_eq(get_base1(pop_year_indx, i, "pop_year_indx", 1), 1))) {
                    current_statement_begin__ = 226;
                    stan::model::assign(epsilon_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(zeta_M, i, "zeta_M", 1) * get_base1(sigma_M, get_base1(pop, i, "pop", 1), "sigma_M", 1)) / stan::math::sqrt((1 - pow(get_base1(rho_M, get_base1(pop, i, "pop", 1), "rho_M", 1), 2)))), 
                                "assigning variable epsilon_M");
                    current_statement_begin__ = 228;
                    stan::model::assign(epsilon_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                elt_divide(elt_multiply(stan::model::rvalue(zeta_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_MS"), stan::model::rvalue(sigma_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sigma_MS")), stan::math::sqrt(subtract(1, square(stan::model::rvalue(rho_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rho_MS"))))), 
                                "assigning variable epsilon_MS");
                } else {
                    current_statement_begin__ = 232;
                    stan::model::assign(epsilon_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(rho_M, get_base1(pop, i, "pop", 1), "rho_M", 1) * get_base1(epsilon_M, (i - 1), "epsilon_M", 1)) + (get_base1(zeta_M, i, "zeta_M", 1) * get_base1(sigma_M, get_base1(pop, i, "pop", 1), "sigma_M", 1))), 
                                "assigning variable epsilon_M");
                    current_statement_begin__ = 233;
                    stan::model::assign(epsilon_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(add(elt_multiply(stan::model::rvalue(rho_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "rho_MS"), stan::model::rvalue(epsilon_MS, stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "epsilon_MS")), elt_multiply(stan::model::rvalue(sigma_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sigma_MS"), transpose(multiply(get_base1(L_MS, get_base1(pop, i, "pop", 1), "L_MS", 1), transpose(stan::model::rvalue(zeta_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "zeta_MS"))))))), 
                                "assigning variable epsilon_MS");
                }
                current_statement_begin__ = 236;
                stan::model::assign(s_MS, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            inv_logit(add(add(logit(stan::model::rvalue(mu_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu_MS")), dot_product(stan::model::rvalue(X_MS, stan::model::cons_list(stan::model::index_uni(get_base1(year, i, "year", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_MS"), stan::model::rvalue(beta_MS, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta_MS"))), stan::model::rvalue(epsilon_MS, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "epsilon_MS"))), 
                            "assigning variable s_MS");
                current_statement_begin__ = 239;
                if (as_bool(logical_lte(get_base1(pop_year_indx, i, "pop_year_indx", 1), max_Mage))) {
                    current_statement_begin__ = 242;
                    stan::math::assign(ii, (((get_base1(pop, i, "pop", 1) - 1) * max_Mage) + get_base1(pop_year_indx, i, "pop_year_indx", 1)));
                    current_statement_begin__ = 243;
                    stan::model::assign(M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(M_init, ii, "M_init", 1), 
                                "assigning variable M");
                    current_statement_begin__ = 244;
                    stan::model::assign(q_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                to_row_vector(stan::model::rvalue(q_M_init, stan::model::cons_list(stan::model::index_uni(ii), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_M_init")), 
                                "assigning variable q_M");
                } else {
                    current_statement_begin__ = 248;
                    for (int a = 1; a <= N_Mage; ++a) {
                        current_statement_begin__ = 251;
                        stan::model::assign(M_a, 
                                    stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                    (get_base1(M0, (i - get_base1(smolt_ages, a, "smolt_ages", 1)), "M0", 1) * get_base1(p_M, (i - get_base1(smolt_ages, a, "smolt_ages", 1)), a, "p_M", 1)), 
                                    "assigning variable M_a");
                    }
                    current_statement_begin__ = 253;
                    stan::model::assign(M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sum(M_a), 
                                "assigning variable M");
                    current_statement_begin__ = 254;
                    stan::model::assign(q_M, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                divide(M_a, get_base1(M, i, "M", 1)), 
                                "assigning variable q_M");
                }
                current_statement_begin__ = 258;
                if (as_bool(logical_lte(get_base1(pop_year_indx, i, "pop_year_indx", 1), max_age))) {
                    current_statement_begin__ = 261;
                    stan::math::assign(ii, (((get_base1(pop, i, "pop", 1) - 1) * max_age) + get_base1(pop_year_indx, i, "pop_year_indx", 1)));
                    current_statement_begin__ = 262;
                    stan::model::assign(S_W, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(S_init, ii, "S_init", 1) * (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))), 
                                "assigning variable S_W");
                    current_statement_begin__ = 263;
                    stan::model::assign(S_H, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(S_init, ii, "S_init", 1) * get_base1(p_HOS_all, i, "p_HOS_all", 1)), 
                                "assigning variable S_H");
                    current_statement_begin__ = 264;
                    stan::model::assign(q_GR, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                to_row_vector(stan::model::rvalue(q_GR_init, stan::model::cons_list(stan::model::index_uni(ii), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR_init")), 
                                "assigning variable q_GR");
                    current_statement_begin__ = 265;
                    stan::math::assign(S_W_a, to_matrix(multiply(get_base1(S_W, i, "S_W", 1), stan::model::rvalue(q_GR, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR")), N_Mage, N_MSage, 0));
                    current_statement_begin__ = 266;
                    stan::model::assign(q_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                col_sums(to_matrix(stan::model::rvalue(q_GR, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR"), N_Mage, N_MSage, 0), pstream__), 
                                "assigning variable q_MS");
                } else {
                    current_statement_begin__ = 270;
                    for (int sa = 1; sa <= N_Mage; ++sa) {
                        current_statement_begin__ = 272;
                        for (int oa = 1; oa <= N_MSage; ++oa) {
                            current_statement_begin__ = 273;
                            stan::model::assign(S_W_a, 
                                        stan::model::cons_list(stan::model::index_uni(sa), stan::model::cons_list(stan::model::index_uni(oa), stan::model::nil_index_list())), 
                                        (((get_base1(M, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), "M", 1) * get_base1(q_M, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), sa, "q_M", 1)) * get_base1(s_MS, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), sa, "s_MS", 1)) * get_base1(get_base1(get_base1(p_MS, (i - get_base1(ocean_ages, oa, "ocean_ages", 1)), "p_MS", 1), sa, "p_MS", 2), oa, "p_MS", 3)), 
                                        "assigning variable S_W_a");
                        }
                    }
                    current_statement_begin__ = 276;
                    stan::model::assign(S_W_a, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, N_MSage), stan::model::nil_index_list())), 
                                stan::model::deep_copy(multiply(multiply(stan::model::rvalue(S_W_a, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, N_MSage), stan::model::nil_index_list())), "S_W_a"), (1 - get_base1(F_rate, i, "F_rate", 1))), (1 - get_base1(B_rate_all, i, "B_rate_all", 1)))), 
                                "assigning variable S_W_a");
                    current_statement_begin__ = 277;
                    stan::model::assign(S_W, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sum(S_W_a), 
                                "assigning variable S_W");
                    current_statement_begin__ = 278;
                    stan::model::assign(S_H, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(S_W, i, "S_W", 1) * get_base1(p_HOS_all, i, "p_HOS_all", 1)) / (1 - get_base1(p_HOS_all, i, "p_HOS_all", 1))), 
                                "assigning variable S_H");
                    current_statement_begin__ = 279;
                    stan::model::assign(q_GR, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                divide(to_row_vector(transpose(S_W_a)), get_base1(S_W, i, "S_W", 1)), 
                                "assigning variable q_GR");
                    current_statement_begin__ = 280;
                    stan::model::assign(q_MS, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                col_sums(to_matrix(stan::model::rvalue(q_GR, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q_GR"), N_Mage, N_MSage, 0), pstream__), 
                                "assigning variable q_MS");
                }
                current_statement_begin__ = 283;
                stan::model::assign(S, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(S_W, i, "S_W", 1) + get_base1(S_H, i, "S_H", 1)), 
                            "assigning variable S");
                current_statement_begin__ = 286;
                stan::model::assign(M_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(A, i, "A", 1) * SR(SR_fun, get_base1(alpha, get_base1(pop, i, "pop", 1), "alpha", 1), get_base1(Rmax, get_base1(pop, i, "pop", 1), "Rmax", 1), get_base1(S, i, "S", 1), get_base1(A, i, "A", 1), pstream__)), 
                            "assigning variable M_hat");
                current_statement_begin__ = 287;
                stan::model::assign(M0, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(M_hat, i, "M_hat", 1) * stan::math::exp((dot_product(stan::model::rvalue(X_M, stan::model::cons_list(stan::model::index_uni(get_base1(year, i, "year", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_M"), stan::model::rvalue(beta_M, stan::model::cons_list(stan::model::index_uni(get_base1(pop, i, "pop", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta_M")) + get_base1(epsilon_M, i, "epsilon_M", 1)))), 
                            "assigning variable M0");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 146;
            check_greater_or_equal(function__, "M_hat", M_hat, 0);
            current_statement_begin__ = 148;
            check_greater_or_equal(function__, "M0", M0, 0);
            current_statement_begin__ = 149;
            check_greater_or_equal(function__, "M", M, 0);
            current_statement_begin__ = 152;
            check_greater_or_equal(function__, "p_M", p_M, 0);
            check_less_or_equal(function__, "p_M", p_M, 1);
            current_statement_begin__ = 153;
            check_greater_or_equal(function__, "q_M", q_M, 0);
            check_less_or_equal(function__, "q_M", q_M, 1);
            current_statement_begin__ = 156;
            check_greater_or_equal(function__, "s_MS", s_MS, 0);
            check_less_or_equal(function__, "s_MS", s_MS, 1);
            current_statement_begin__ = 158;
            size_t p_MS_i_0_max__ = N;
            size_t p_MS_i_1_max__ = N_Mage;
            for (size_t i_0__ = 0; i_0__ < p_MS_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < p_MS_i_1_max__; ++i_1__) {
                    stan::math::check_simplex(function__, "p_MS[i_0__][i_1__]", p_MS[i_0__][i_1__]);
                }
            }
            current_statement_begin__ = 161;
            check_greater_or_equal(function__, "S_W", S_W, 0);
            current_statement_begin__ = 163;
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 164;
            check_greater_or_equal(function__, "B_rate_all", B_rate_all, 0);
            check_less_or_equal(function__, "B_rate_all", B_rate_all, 1);
            current_statement_begin__ = 166;
            check_greater_or_equal(function__, "q_GR", q_GR, 0);
            check_less_or_equal(function__, "q_GR", q_GR, 1);
            current_statement_begin__ = 167;
            check_greater_or_equal(function__, "q_MS", q_MS, 0);
            check_less_or_equal(function__, "q_MS", q_MS, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t M_hat_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < M_hat_j_1_max__; ++j_1__) {
                    vars__.push_back(M_hat(j_1__));
                }
                size_t epsilon_M_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < epsilon_M_j_1_max__; ++j_1__) {
                    vars__.push_back(epsilon_M(j_1__));
                }
                size_t M0_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < M0_j_1_max__; ++j_1__) {
                    vars__.push_back(M0(j_1__));
                }
                size_t M_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < M_j_1_max__; ++j_1__) {
                    vars__.push_back(M(j_1__));
                }
                size_t gamma_M_j_2_max__ = (N_Mage - 1);
                size_t gamma_M_j_1_max__ = N_pop;
                for (size_t j_2__ = 0; j_2__ < gamma_M_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < gamma_M_j_1_max__; ++j_1__) {
                        vars__.push_back(gamma_M(j_1__, j_2__));
                    }
                }
                size_t p_M_j_2_max__ = N_Mage;
                size_t p_M_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < p_M_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < p_M_j_1_max__; ++j_1__) {
                        vars__.push_back(p_M(j_1__, j_2__));
                    }
                }
                size_t q_M_j_2_max__ = N_Mage;
                size_t q_M_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < q_M_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < q_M_j_1_max__; ++j_1__) {
                        vars__.push_back(q_M(j_1__, j_2__));
                    }
                }
                size_t epsilon_MS_j_2_max__ = N_Mage;
                size_t epsilon_MS_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < epsilon_MS_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < epsilon_MS_j_1_max__; ++j_1__) {
                        vars__.push_back(epsilon_MS(j_1__, j_2__));
                    }
                }
                size_t s_MS_j_2_max__ = N_Mage;
                size_t s_MS_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < s_MS_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < s_MS_j_1_max__; ++j_1__) {
                        vars__.push_back(s_MS(j_1__, j_2__));
                    }
                }
                size_t gamma_MS_j_1_max__ = (N_MSage - 1);
                size_t gamma_MS_k_0_max__ = N_pop;
                size_t gamma_MS_k_1_max__ = N_Mage;
                for (size_t j_1__ = 0; j_1__ < gamma_MS_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < gamma_MS_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < gamma_MS_k_0_max__; ++k_0__) {
                            vars__.push_back(gamma_MS[k_0__][k_1__](j_1__));
                        }
                    }
                }
                size_t p_MS_j_1_max__ = N_MSage;
                size_t p_MS_k_0_max__ = N;
                size_t p_MS_k_1_max__ = N_Mage;
                for (size_t j_1__ = 0; j_1__ < p_MS_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < p_MS_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < p_MS_k_0_max__; ++k_0__) {
                            vars__.push_back(p_MS[k_0__][k_1__](j_1__));
                        }
                    }
                }
                size_t p_HOS_all_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                    vars__.push_back(p_HOS_all(j_1__));
                }
                size_t S_W_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                    vars__.push_back(S_W(j_1__));
                }
                size_t S_H_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                    vars__.push_back(S_H(j_1__));
                }
                size_t S_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    vars__.push_back(S(j_1__));
                }
                size_t B_rate_all_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                    vars__.push_back(B_rate_all(j_1__));
                }
                size_t q_GR_j_2_max__ = N_GRage;
                size_t q_GR_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < q_GR_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < q_GR_j_1_max__; ++j_1__) {
                        vars__.push_back(q_GR(j_1__, j_2__));
                    }
                }
                size_t q_MS_j_2_max__ = N_MSage;
                size_t q_MS_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < q_MS_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < q_MS_j_1_max__; ++j_1__) {
                        vars__.push_back(q_MS(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 352;
            validate_non_negative_index("R_p_M", "(N_Mage - 1)", (N_Mage - 1));
            validate_non_negative_index("R_p_M", "(N_Mage - 1)", (N_Mage - 1));
            validate_non_negative_index("R_p_M", "N_pop", N_pop);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > R_p_M(N_pop, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_Mage - 1), (N_Mage - 1)));
            stan::math::initialize(R_p_M, DUMMY_VAR__);
            stan::math::fill(R_p_M, DUMMY_VAR__);
            current_statement_begin__ = 353;
            validate_non_negative_index("R_MS", "N_Mage", N_Mage);
            validate_non_negative_index("R_MS", "N_Mage", N_Mage);
            validate_non_negative_index("R_MS", "N_pop", N_pop);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > R_MS(N_pop, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_Mage, N_Mage));
            stan::math::initialize(R_MS, DUMMY_VAR__);
            stan::math::fill(R_MS, DUMMY_VAR__);
            current_statement_begin__ = 354;
            validate_non_negative_index("R_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
            validate_non_negative_index("R_p_MS", "(N_Mage * (N_MSage - 1))", (N_Mage * (N_MSage - 1)));
            validate_non_negative_index("R_p_MS", "N_pop", N_pop);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > R_p_MS(N_pop, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_Mage * (N_MSage - 1)), (N_Mage * (N_MSage - 1))));
            stan::math::initialize(R_p_MS, DUMMY_VAR__);
            stan::math::fill(R_p_MS, DUMMY_VAR__);
            current_statement_begin__ = 355;
            validate_non_negative_index("LL_M_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_M_obs(N);
            stan::math::initialize(LL_M_obs, DUMMY_VAR__);
            stan::math::fill(LL_M_obs, DUMMY_VAR__);
            current_statement_begin__ = 356;
            validate_non_negative_index("LL_n_smolt_age_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_n_smolt_age_obs(N);
            stan::math::initialize(LL_n_smolt_age_obs, DUMMY_VAR__);
            stan::math::fill(LL_n_smolt_age_obs, DUMMY_VAR__);
            current_statement_begin__ = 357;
            validate_non_negative_index("LL_S_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_S_obs(N);
            stan::math::initialize(LL_S_obs, DUMMY_VAR__);
            stan::math::fill(LL_S_obs, DUMMY_VAR__);
            current_statement_begin__ = 358;
            validate_non_negative_index("LL_n_ocean_age_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_n_ocean_age_obs(N);
            stan::math::initialize(LL_n_ocean_age_obs, DUMMY_VAR__);
            stan::math::fill(LL_n_ocean_age_obs, DUMMY_VAR__);
            current_statement_begin__ = 359;
            validate_non_negative_index("LL_n_GR_age_obs", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_n_GR_age_obs(N);
            stan::math::initialize(LL_n_GR_age_obs, DUMMY_VAR__);
            stan::math::fill(LL_n_GR_age_obs, DUMMY_VAR__);
            current_statement_begin__ = 360;
            validate_non_negative_index("LL_n_H_obs", "N_H", N_H);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL_n_H_obs(N_H);
            stan::math::initialize(LL_n_H_obs, DUMMY_VAR__);
            stan::math::fill(LL_n_H_obs, DUMMY_VAR__);
            current_statement_begin__ = 361;
            validate_non_negative_index("LL", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> LL(N);
            stan::math::initialize(LL, DUMMY_VAR__);
            stan::math::fill(LL, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 363;
            for (int j = 1; j <= N_pop; ++j) {
                current_statement_begin__ = 365;
                stan::model::assign(R_p_M, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            multiply_lower_tri_self_transpose(get_base1(L_p_M, j, "L_p_M", 1)), 
                            "assigning variable R_p_M");
                current_statement_begin__ = 366;
                stan::model::assign(R_MS, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            multiply_lower_tri_self_transpose(get_base1(L_MS, j, "L_MS", 1)), 
                            "assigning variable R_MS");
                current_statement_begin__ = 367;
                stan::model::assign(R_p_MS, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            multiply_lower_tri_self_transpose(get_base1(L_p_MS, j, "L_p_MS", 1)), 
                            "assigning variable R_p_MS");
            }
            current_statement_begin__ = 370;
            stan::math::assign(LL_M_obs, rep_vector(0, N));
            current_statement_begin__ = 371;
            for (int i = 1; i <= N_M_obs; ++i) {
                current_statement_begin__ = 372;
                stan::model::assign(LL_M_obs, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(which_M_obs, i, "which_M_obs", 1)), stan::model::nil_index_list()), 
                            lognormal_log(get_base1(M_obs, get_base1(which_M_obs, i, "which_M_obs", 1), "M_obs", 1), stan::math::log(get_base1(M, get_base1(which_M_obs, i, "which_M_obs", 1), "M", 1)), tau_M), 
                            "assigning variable LL_M_obs");
            }
            current_statement_begin__ = 373;
            stan::math::assign(LL_n_smolt_age_obs, multiply(elt_multiply(n_Mage_obs, stan::math::log(q_M)), rep_vector(1, N_Mage)));
            current_statement_begin__ = 374;
            stan::math::assign(LL_S_obs, rep_vector(0, N));
            current_statement_begin__ = 375;
            for (int i = 1; i <= N_S_obs; ++i) {
                current_statement_begin__ = 376;
                stan::model::assign(LL_S_obs, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(which_S_obs, i, "which_S_obs", 1)), stan::model::nil_index_list()), 
                            lognormal_log(get_base1(S_obs, get_base1(which_S_obs, i, "which_S_obs", 1), "S_obs", 1), stan::math::log(get_base1(S, get_base1(which_S_obs, i, "which_S_obs", 1), "S", 1)), tau_S), 
                            "assigning variable LL_S_obs");
            }
            current_statement_begin__ = 377;
            stan::math::assign(LL_n_ocean_age_obs, multiply(elt_multiply(n_MSage_obs, stan::math::log(q_MS)), rep_vector(1, N_MSage)));
            current_statement_begin__ = 378;
            stan::math::assign(LL_n_GR_age_obs, multiply(elt_multiply(n_GRage_obs, stan::math::log(q_GR)), rep_vector(1, N_GRage)));
            current_statement_begin__ = 379;
            stan::math::assign(LL_n_H_obs, rep_vector(0, N_H));
            current_statement_begin__ = 380;
            for (int i = 1; i <= N_H; ++i) {
                current_statement_begin__ = 381;
                stan::model::assign(LL_n_H_obs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            binomial_log(get_base1(n_H_obs, i, "n_H_obs", 1), get_base1(n_HW_obs, i, "n_HW_obs", 1), get_base1(p_HOS, i, "p_HOS", 1)), 
                            "assigning variable LL_n_H_obs");
            }
            current_statement_begin__ = 382;
            stan::math::assign(LL, add(add(add(add(LL_M_obs, LL_n_smolt_age_obs), LL_S_obs), LL_n_ocean_age_obs), LL_n_GR_age_obs));
            current_statement_begin__ = 383;
            stan::model::assign(LL, 
                        stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), 
                        stan::model::deep_copy(add(stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_multi(which_H), stan::model::nil_index_list()), "LL"), LL_n_H_obs)), 
                        "assigning variable LL");
            // validate, write generated quantities
            current_statement_begin__ = 352;
            size_t R_p_M_i_0_max__ = N_pop;
            for (size_t i_0__ = 0; i_0__ < R_p_M_i_0_max__; ++i_0__) {
                stan::math::check_corr_matrix(function__, "R_p_M[i_0__]", R_p_M[i_0__]);
            }
            size_t R_p_M_j_2_max__ = (N_Mage - 1);
            size_t R_p_M_j_1_max__ = (N_Mage - 1);
            size_t R_p_M_k_0_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < R_p_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_p_M_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < R_p_M_k_0_max__; ++k_0__) {
                        vars__.push_back(R_p_M[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 353;
            size_t R_MS_i_0_max__ = N_pop;
            for (size_t i_0__ = 0; i_0__ < R_MS_i_0_max__; ++i_0__) {
                stan::math::check_corr_matrix(function__, "R_MS[i_0__]", R_MS[i_0__]);
            }
            size_t R_MS_j_2_max__ = N_Mage;
            size_t R_MS_j_1_max__ = N_Mage;
            size_t R_MS_k_0_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < R_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_MS_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < R_MS_k_0_max__; ++k_0__) {
                        vars__.push_back(R_MS[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 354;
            size_t R_p_MS_i_0_max__ = N_pop;
            for (size_t i_0__ = 0; i_0__ < R_p_MS_i_0_max__; ++i_0__) {
                stan::math::check_corr_matrix(function__, "R_p_MS[i_0__]", R_p_MS[i_0__]);
            }
            size_t R_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
            size_t R_p_MS_j_1_max__ = (N_Mage * (N_MSage - 1));
            size_t R_p_MS_k_0_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < R_p_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_p_MS_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < R_p_MS_k_0_max__; ++k_0__) {
                        vars__.push_back(R_p_MS[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 355;
            size_t LL_M_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_M_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_M_obs(j_1__));
            }
            current_statement_begin__ = 356;
            size_t LL_n_smolt_age_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_n_smolt_age_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_n_smolt_age_obs(j_1__));
            }
            current_statement_begin__ = 357;
            size_t LL_S_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_S_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_S_obs(j_1__));
            }
            current_statement_begin__ = 358;
            size_t LL_n_ocean_age_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_n_ocean_age_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_n_ocean_age_obs(j_1__));
            }
            current_statement_begin__ = 359;
            size_t LL_n_GR_age_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_n_GR_age_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_n_GR_age_obs(j_1__));
            }
            current_statement_begin__ = 360;
            size_t LL_n_H_obs_j_1_max__ = N_H;
            for (size_t j_1__ = 0; j_1__ < LL_n_H_obs_j_1_max__; ++j_1__) {
                vars__.push_back(LL_n_H_obs(j_1__));
            }
            current_statement_begin__ = 361;
            size_t LL_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < LL_j_1_max__; ++j_1__) {
                vars__.push_back(LL(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_IPM_SMaS_np";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_M_j_2_max__ = N_X_M;
        size_t beta_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_M_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_p_M_j_1_max__ = N_Mage;
        size_t mu_p_M_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < mu_p_M_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_p_M_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_p_M" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_p_M_j_2_max__ = (N_Mage - 1);
        size_t sigma_p_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_p_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_p_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_p_M_j_2_max__ = (N_Mage - 1);
        size_t L_p_M_j_1_max__ = (N_Mage - 1);
        size_t L_p_M_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_M_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_p_M_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_p_M" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t zeta_p_M_j_2_max__ = (N_Mage - 1);
        size_t zeta_p_M_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_p_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_MS_j_2_max__ = N_Mage;
        size_t mu_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < mu_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_MS_j_2_max__ = N_X_MS;
        size_t beta_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_MS_j_2_max__ = N_Mage;
        size_t rho_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < rho_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_MS_j_2_max__ = N_Mage;
        size_t sigma_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_MS_j_2_max__ = N_Mage;
        size_t L_MS_j_1_max__ = N_Mage;
        size_t L_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t zeta_MS_j_2_max__ = N_Mage;
        size_t zeta_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_p_MS_j_1_max__ = N_MSage;
        size_t mu_p_MS_k_0_max__ = N_pop;
        size_t mu_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < mu_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < mu_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_p_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_p_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t sigma_p_MS_j_1_max__ = (N_MSage - 1);
        size_t sigma_p_MS_k_0_max__ = N_pop;
        size_t sigma_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < sigma_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < sigma_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_p_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sigma_p_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t L_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t L_p_MS_j_1_max__ = (N_Mage * (N_MSage - 1));
        size_t L_p_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < L_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_p_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_p_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_p_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t zeta_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t zeta_p_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_p_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_HOS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t M_init_j_1_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < M_init_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M_init" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_M_init_j_1_max__ = N_Mage;
        size_t q_M_init_k_0_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_M_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_M_init_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_M_init" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_init" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_GR_init_j_1_max__ = N_GRage;
        size_t q_GR_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_GR_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_GR_init_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_GR_init" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_S_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_S_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_S" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t M_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "M_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t epsilon_M_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < epsilon_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon_M" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t M0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "M0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t M_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "M" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_M_j_2_max__ = (N_Mage - 1);
            size_t gamma_M_j_1_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < gamma_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < gamma_M_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "gamma_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_M_j_2_max__ = N_Mage;
            size_t p_M_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < p_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_M_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t q_M_j_2_max__ = N_Mage;
            size_t q_M_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_M_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t epsilon_MS_j_2_max__ = N_Mage;
            size_t epsilon_MS_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < epsilon_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < epsilon_MS_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "epsilon_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t s_MS_j_2_max__ = N_Mage;
            size_t s_MS_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < s_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < s_MS_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "s_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t gamma_MS_j_1_max__ = (N_MSage - 1);
            size_t gamma_MS_k_0_max__ = N_pop;
            size_t gamma_MS_k_1_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < gamma_MS_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < gamma_MS_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < gamma_MS_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "gamma_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t p_MS_j_1_max__ = N_MSage;
            size_t p_MS_k_0_max__ = N;
            size_t p_MS_k_1_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < p_MS_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < p_MS_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_MS_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "p_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t p_HOS_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_HOS_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_W_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_W" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_H" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B_rate_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B_rate_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t q_GR_j_2_max__ = N_GRage;
            size_t q_GR_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_GR_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_GR_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q_GR" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t q_MS_j_2_max__ = N_MSage;
            size_t q_MS_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_MS_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t R_p_M_j_2_max__ = (N_Mage - 1);
        size_t R_p_M_j_1_max__ = (N_Mage - 1);
        size_t R_p_M_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < R_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < R_p_M_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < R_p_M_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "R_p_M" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t R_MS_j_2_max__ = N_Mage;
        size_t R_MS_j_1_max__ = N_Mage;
        size_t R_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < R_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < R_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < R_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "R_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t R_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t R_p_MS_j_1_max__ = (N_Mage * (N_MSage - 1));
        size_t R_p_MS_k_0_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < R_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < R_p_MS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < R_p_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "R_p_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t LL_M_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_M_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_M_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_smolt_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_smolt_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_smolt_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_S_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_S_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_S_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_ocean_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_ocean_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_ocean_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_GR_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_GR_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_GR_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_H_obs_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < LL_n_H_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_H_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rmax_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < Rmax_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rmax" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_M_j_2_max__ = N_X_M;
        size_t beta_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < rho_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < sigma_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_M_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < zeta_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_p_M_j_1_max__ = (N_Mage - 1);
        size_t mu_p_M_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < mu_p_M_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_p_M_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_p_M" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_p_M_j_2_max__ = (N_Mage - 1);
        size_t sigma_p_M_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_p_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_p_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_p_M_j_1_max__ = (((N_Mage - 1) * ((N_Mage - 1) - 1)) / 2);
        size_t L_p_M_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < L_p_M_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_p_M_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_p_M" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t zeta_p_M_j_2_max__ = (N_Mage - 1);
        size_t zeta_p_M_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_M_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_p_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_MS_j_2_max__ = N_Mage;
        size_t mu_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < mu_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_MS_j_2_max__ = N_X_MS;
        size_t beta_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < beta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_MS_j_2_max__ = N_Mage;
        size_t rho_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < rho_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_MS_j_2_max__ = N_Mage;
        size_t sigma_MS_j_1_max__ = N_pop;
        for (size_t j_2__ = 0; j_2__ < sigma_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_MS_j_1_max__ = ((N_Mage * (N_Mage - 1)) / 2);
        size_t L_MS_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < L_MS_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_MS_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t zeta_MS_j_2_max__ = N_Mage;
        size_t zeta_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_p_MS_j_1_max__ = (N_MSage - 1);
        size_t mu_p_MS_k_0_max__ = N_pop;
        size_t mu_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < mu_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < mu_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_p_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_p_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t sigma_p_MS_j_1_max__ = (N_MSage - 1);
        size_t sigma_p_MS_k_0_max__ = N_pop;
        size_t sigma_p_MS_k_1_max__ = N_Mage;
        for (size_t j_1__ = 0; j_1__ < sigma_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < sigma_p_MS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_p_MS_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sigma_p_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t L_p_MS_j_1_max__ = (((N_Mage * (N_MSage - 1)) * ((N_Mage * (N_MSage - 1)) - 1)) / 2);
        size_t L_p_MS_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < L_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_p_MS_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_p_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t zeta_p_MS_j_2_max__ = (N_Mage * (N_MSage - 1));
        size_t zeta_p_MS_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < zeta_p_MS_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < zeta_p_MS_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta_p_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t p_HOS_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < p_HOS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_HOS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_rate_j_1_max__ = N_B;
        for (size_t j_1__ = 0; j_1__ < B_rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t M_init_j_1_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < M_init_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M_init" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_M_init_j_1_max__ = (N_Mage - 1);
        size_t q_M_init_k_0_max__ = (max_Mage * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_M_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_M_init_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_M_init" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t S_init_j_1_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < S_init_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_init" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_GR_init_j_1_max__ = (N_GRage - 1);
        size_t q_GR_init_k_0_max__ = (max_age * N_pop);
        for (size_t j_1__ = 0; j_1__ < q_GR_init_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < q_GR_init_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q_GR_init" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_M_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_M_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_M" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_S_j_1_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < tau_S_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_S" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t M_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "M_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t epsilon_M_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < epsilon_M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon_M" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t M0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "M0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t M_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "M" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_M_j_2_max__ = (N_Mage - 1);
            size_t gamma_M_j_1_max__ = N_pop;
            for (size_t j_2__ = 0; j_2__ < gamma_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < gamma_M_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "gamma_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_M_j_2_max__ = N_Mage;
            size_t p_M_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < p_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_M_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t q_M_j_2_max__ = N_Mage;
            size_t q_M_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_M_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q_M" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t epsilon_MS_j_2_max__ = N_Mage;
            size_t epsilon_MS_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < epsilon_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < epsilon_MS_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "epsilon_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t s_MS_j_2_max__ = N_Mage;
            size_t s_MS_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < s_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < s_MS_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "s_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t gamma_MS_j_1_max__ = (N_MSage - 1);
            size_t gamma_MS_k_0_max__ = N_pop;
            size_t gamma_MS_k_1_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < gamma_MS_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < gamma_MS_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < gamma_MS_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "gamma_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t p_MS_j_1_max__ = (N_MSage - 1);
            size_t p_MS_k_0_max__ = N;
            size_t p_MS_k_1_max__ = N_Mage;
            for (size_t j_1__ = 0; j_1__ < p_MS_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < p_MS_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_MS_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "p_MS" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t p_HOS_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_HOS_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_HOS_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_W_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_W_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_W" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_H" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B_rate_all_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < B_rate_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B_rate_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t q_GR_j_2_max__ = N_GRage;
            size_t q_GR_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_GR_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_GR_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q_GR" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t q_MS_j_2_max__ = N_MSage;
            size_t q_MS_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < q_MS_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < q_MS_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "q_MS" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t R_p_M_j_1_max__ = (((N_Mage - 1) * ((N_Mage - 1) - 1)) / 2);
        size_t R_p_M_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < R_p_M_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < R_p_M_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_p_M" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t R_MS_j_1_max__ = ((N_Mage * (N_Mage - 1)) / 2);
        size_t R_MS_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < R_MS_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < R_MS_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t R_p_MS_j_1_max__ = (((N_Mage * (N_MSage - 1)) * ((N_Mage * (N_MSage - 1)) - 1)) / 2);
        size_t R_p_MS_k_0_max__ = N_pop;
        for (size_t j_1__ = 0; j_1__ < R_p_MS_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < R_p_MS_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R_p_MS" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t LL_M_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_M_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_M_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_smolt_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_smolt_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_smolt_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_S_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_S_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_S_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_ocean_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_ocean_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_ocean_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_GR_age_obs_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_n_GR_age_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_GR_age_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_n_H_obs_j_1_max__ = N_H;
        for (size_t j_1__ = 0; j_1__ < LL_n_H_obs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL_n_H_obs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t LL_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < LL_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_IPM_SMaS_np_namespace::model_IPM_SMaS_np stan_model;
#endif
